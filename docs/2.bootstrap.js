(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1:function(t,n,e){"use strict";e.r(n);var r=e(2),i=e(30);class o{constructor(t){this.canvas=t,this.ctx=this.canvas.getContext("2d")}render(t){const n=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.canvas.width=e.width*n,this.canvas.height=e.height*n,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.beginPath();const r=t.width(),i=t.height(),o=this.canvas.width/r,s=this.canvas.height/i,c=o>s?s:o,u=new Map,d=new Map;for(let n=0;n<r;n++)for(let e=0;e<i;e++){const r=t.at(n,e),i=r.kind;let o=u.get(i);if(void 0===o&&void 0!==(o=r.color_code())&&u.set(i,o),this.ctx.fillStyle=o,this.ctx.fillRect(n*c,e*c,c,c),!d.has(i)){const t=r.legend();d.set(i,{text:t,color:o})}}return this.ctx.stroke(),{legends:d}}}var s=e(32);class c{constructor(t){this.canvas=t}render(t){const n=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.canvas.width=e.width*n,this.canvas.height=e.height*n;const i=t.width(),o=t.height(),c=this.determineCellSize(i,o),u=new s.Point(this.canvas.width/2,c+198),d=new s.PixelView(this.canvas,u),a=new Map,h=new Map,l=new Map;let f=null;function w(t,n,e){const r=function(t,n){const e=h.get(t);if(void 0!==e)return e;let r=n.rgb_color();void 0===r&&(r=16777215);const i=(new s.CubeColor).getByHorizontalColor(r);return h.set(t,i),l.set(t,{text:n.legend(),color:n.color_code()}),i}(t,e),i=c+2*n,o=new s.CubeDimension(c,c,i);return new s.Cube(o,r,!1)}function g(t){const n=t.kind,e=t.altitude;if(l.has(n)||l.set(n,{text:t.legend(),color:t.color_code()}),n===r.b.Top)return null===f&&(f=w(n,e,t)),f;if(n===r.b.Town||n===r.b.Path)return w(n,e,t);const i=a.get(e);if(void 0!==i)return i;const o=w(n,e,t);return a.set(e,o),o}for(let n=0;n<i;n++)for(let e=0;e<o;e++){const r=g(t.at(n,e)),i=new s.Point3D(n*c,e*c,0);d.renderObject(r,i)}return{legends:l}}determineCellSize(t,n){const e=n+t,r=(this.canvas.height-200)/e*2,i=this.canvas.width/e*2/Math.sqrt(3);let o=Math.floor(r>i?i:r);return o%2==1&&o--,o>6?o:6}}(new class{constructor(){this.generator=r.a.new(),this.currentBoard=null,this.screen=null;const t=document.getElementById("dimension-selector"),n=t[t.selectedIndex];this.dim=n.value,t.addEventListener("change",this.onVisualizationChange.bind(this)),this.widthInput=document.getElementById("width-input"),this.heightInput=document.getElementById("height-input"),this.screenRoot=document.getElementById("screen-root"),this.initRenderer(),this.paintButton=document.getElementById("paint-button"),this.paintButton.addEventListener("click",()=>{this.render()}),this.legends=document.getElementById("legends"),this.downloadJSONButton=document.getElementById("download-json-button"),this.downloadJSONButton.addEventListener("click",this.onDownloadJSON.bind(this)),this.downloadPNGButton=document.getElementById("download-png-button"),this.downloadPNGButton.addEventListener("click",this.onDownloadPNG.bind(this))}render(){this.paintButton.textContent="Painting...";for(const t of[this.paintButton,this.downloadJSONButton,this.downloadPNGButton])t.classList.add("disabled");window.setTimeout(()=>{const t=Date.now(),[n,e]=this.getSize(),r=this.generator.gen_auto(n,e),i=this.renderer.render(r);this.legends.innerHTML="";const o=Array.from(i.legends.keys());o.sort();for(const t of o){const n=i.legends.get(t),e=document.createElement("div");e.className="legend";const r=document.createElement("div");r.className="legend-color",r.style.backgroundColor=n.color||"none",e.appendChild(r);const o=document.createElement("div");o.className="legend-name",o.textContent=n.text,e.appendChild(o),this.legends.appendChild(e)}this.currentBoard=r;for(const t of[this.paintButton,this.downloadJSONButton,this.downloadPNGButton])t.classList.remove("disabled");this.paintButton.textContent="Generate",console.log("Consumed:",Date.now()-t)},0)}getSize(){const t=parseInt(this.widthInput.value,10),n=parseInt(this.heightInput.value,10);if(!isNaN(t)&&!isNaN(n))return[t,n];if("3d"===this.dim)return[120,120];const e=this.screenRoot.getBoundingClientRect();if(isNaN(t)){if(isNaN(n)){const t=(e.height>e.width?e.height:e.width)/200;return[Math.floor(e.width/t),Math.floor(e.height/t)]}{const t=e.height/n;return[Math.floor(e.width/t),n]}}{const n=e.width/t;return[t,Math.floor(e.height/n)]}}initRenderer(){const t=this.screenRoot.firstChild;switch(null!==t&&this.screenRoot.removeChild(t),this.currentBoard=null,this.screen=document.createElement("canvas"),this.screen.className="screen",this.screenRoot.appendChild(this.screen),this.dim){case"2d":this.renderer=new o(this.screen);break;case"3d":this.renderer=new c(this.screen);break;default:throw new Error(`Unknown context ${this.dim}`)}}onDownloadJSON(t){if(null===this.currentBoard)return;const n=new Blob([this.currentBoard.as_json()],{type:"text/plain;charset=utf-8"});Object(i.saveAs)(n,"board.json")}onDownloadPNG(t){null!==this.screen&&this.screen.toBlob(t=>Object(i.saveAs)(t,"board.png"))}onVisualizationChange(t){const n=t.target,e=n[n.selectedIndex].value;this.dim!==e&&(this.dim=e,this.initRenderer(),this.render())}}).render()},2:function(t,n,e){"use strict";e.d(n,"b",function(){return l}),e.d(n,"g",function(){return p}),e.d(n,"c",function(){return m}),e.d(n,"j",function(){return b}),e.d(n,"d",function(){return B}),e.d(n,"e",function(){return N}),e.d(n,"f",function(){return y}),e.d(n,"i",function(){return C}),e.d(n,"h",function(){return x}),e.d(n,"k",function(){return E}),e.d(n,"l",function(){return k}),e.d(n,"n",function(){return O}),e.d(n,"a",function(){return P}),e.d(n,"m",function(){return M});var r=e(45);let i=new TextDecoder("utf-8"),o=null;function s(){return null!==o&&o.buffer===r.t.buffer||(o=new Uint8Array(r.t.buffer)),o}function c(t,n){return i.decode(s().subarray(t,t+n))}let u=null;function d(){return null===u&&(u=r.i()),u}let a=null;function h(){return null!==a&&a.buffer===r.t.buffer||(a=new Uint32Array(r.t.buffer)),a}const l=Object.freeze({Sea:0,Mountain:1,Forest:2,Plain:3,Town:4,Top:5,Highland:6,DeepSea:7,Path:8}),f=(Object.freeze({Low:0,Middle:1,High:2}),new Array(32));f.fill(void 0),f.push(void 0,null,!0,!1);let w=f.length;function g(t){w===f.length&&f.push(f.length+1);const n=w;return w=f[n],f[n]=t,n}function p(t,n){let e=c(t,n);return g(new Function(e))}function v(t){return f[t]}function m(t,n){return g(v(t).call(v(n)))}function b(t){return g(v(t).self)}function B(t){return g(v(t).crypto)}function N(t){return g(v(t).getRandomValues)}function _(t,n){return s().subarray(t/1,t/1+n)}function y(t,n,e){let r=_(n,e);v(t).getRandomValues(r)}function C(t,n){let r=c(t,n);return g(e(46)(r))}function x(t,n,e){let r=_(n,e);v(t).randomFillSync(r)}function E(t){return void 0===v(t)?1:0}function k(t,n){return v(t)===v(n)?1:0}function O(t,n){throw new Error(c(t,n))}class R{static __wrap(t){const n=Object.create(R.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){r.a(t)}(t)}width(){return r.m(this.ptr)>>>0}height(){return r.l(this.ptr)>>>0}at(t,n){return I.__wrap(r.k(this.ptr,t,n))}as_json(){const t=d();r.j(t,this.ptr);const n=h(),e=n[t/4],i=n[t/4+1];if(0===e)return;const o=c(e,i).slice();return r.h(e,1*i),o}}class I{static __wrap(t){const n=Object.create(I.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){r.b(t)}(t)}get kind(){return r.e(this.ptr)}set kind(t){return r.g(this.ptr,t)}get altitude(){return r.d(this.ptr)}set altitude(t){return r.f(this.ptr,t)}color_code(){const t=d();r.n(t,this.ptr);const n=h(),e=n[t/4],i=n[t/4+1];if(0===e)return;const o=c(e,i).slice();return r.h(e,1*i),o}rgb_color(){const t=d();r.p(t,this.ptr);const n=h()[t/4],e=h()[t/4+1];return 0===n?void 0:e}legend(){const t=d();r.o(t,this.ptr);const n=h(),e=n[t/4],i=n[t/4+1],o=c(e,i).slice();return r.h(e,1*i),o}}class P{static __wrap(t){const n=Object.create(P.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){r.c(t)}(t)}static new(){return P.__wrap(r.s())}gen_auto(t,n){return R.__wrap(r.r(this.ptr,t,n))}gen(t,n,e){return R.__wrap(r.q(this.ptr,t,n,e))}}function M(t){var n;(n=t)<36||(f[n]=w,w=n)}},45:function(t,n,e){"use strict";var r=e.w[t.i];t.exports=r;e(2);r.u()},46:function(t,n){function e(t){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}e.keys=function(){return[]},e.resolve=e,t.exports=e,e.id=46}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,