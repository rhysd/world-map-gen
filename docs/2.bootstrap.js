(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1:function(t,n,e){"use strict";e.r(n);var i=e(2);class r{constructor(t){this.canvas=document.createElement("canvas"),this.canvas.className="screen",t.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d")}render(t){const n=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.canvas.width=e.width*n,this.canvas.height=e.height*n,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.beginPath();const i=t.width,r=t.height,s=this.canvas.width/i,o=this.canvas.height/r,c=new Map;for(let n=0;n<i;n++)for(let e=0;e<r;e++){const i=t.at(n,e).kind;let r=c.get(i);void 0===r&&(r=t.land_color_code(i),c.set(i,r)),this.ctx.fillStyle=r,this.ctx.fillRect(n*s,e*o,s,o)}this.ctx.stroke()}}var s=e(30);class o{constructor(t){this.canvas=document.createElement("canvas"),this.canvas.className="screen",t.appendChild(this.canvas)}determineCellSize(t,n){const e=n+t,i=(this.canvas.height-200)/e*2,r=this.canvas.width/e*2/Math.sqrt(3);let s=Math.floor(i>r?r:i);return s%2==1&&s--,s>6?s:6}render(t){const n=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.canvas.width=e.width*n,this.canvas.height=e.height*n;const r=t.width,o=t.height,c=this.determineCellSize(r,o),u=new s.Point(this.canvas.width/2,c+99),a=new s.PixelView(this.canvas,u),h=new Map,d=new Map;function l(n,e){const i=function(n){const e=d.get(n);if(void 0!==e)return e;let i=t.land_rgb_color(n);void 0===i&&(i=16777215);const r=(new s.CubeColor).getByHorizontalColor(i);return d.set(n,r),r}(n),r=c+2*e,o=new s.CubeDimension(c,c,r);return new s.Cube(o,i,!1)}function f(t){const n=t.kind,e=t.altitude;if(n===i.b.Town||n===i.b.Path)return l(n,e);const r=h.get(e);if(void 0!==r)return r;const s=l(n,e);return h.set(e,s),s}for(let n=0;n<r;n++)for(let e=0;e<o;e++){const i=f(t.at(n,e)),r=new s.Point3D(n*c,e*c,0);a.renderObject(i,r)}}}(new class{constructor(){this.generator=i.a.new();const t=document.getElementById("dimension-selector"),n=t[t.selectedIndex];this.dim=n.value,t.addEventListener("change",this.onVisualizationChange.bind(this)),this.widthInput=document.getElementById("width-input"),this.heightInput=document.getElementById("height-input"),this.screenRoot=document.getElementById("screen-root"),this.initRenderer(),this.paintButton=document.getElementById("paint-button"),this.paintButton.addEventListener("click",()=>{this.render()})}getSize(){const t=parseInt(this.widthInput.value,10),n=parseInt(this.heightInput.value,10);if(!isNaN(t)&&!isNaN(n))return[t,n];if("3d"===this.dim)return[120,120];const e=this.screenRoot.getBoundingClientRect();if(isNaN(t)){if(isNaN(n)){const t=(e.height>e.width?e.height:e.width)/200;return[Math.floor(e.width/t),Math.floor(e.height/t)]}{const t=e.height/n;return[Math.floor(e.width/t),n]}}{const n=e.width/t;return[t,Math.floor(e.height/n)]}}initRenderer(){const t=this.screenRoot.firstChild;switch(null!==t&&this.screenRoot.removeChild(t),this.dim){case"2d":this.renderer=new r(this.screenRoot);break;case"3d":this.renderer=new o(this.screenRoot);break;default:throw new Error(`Unknown context ${this.dim}`)}}onVisualizationChange(t){const n=t.target,e=n[n.selectedIndex].value;this.dim!==e&&(this.dim=e,this.initRenderer(),this.render())}render(){this.paintButton.textContent="Painting...",this.paintButton.classList.add("disabled"),window.setTimeout(()=>{const t=Date.now(),[n,e]=this.getSize(),i=this.generator.gen_auto(n,e);this.renderer.render(i),this.paintButton.classList.remove("disabled"),this.paintButton.textContent="Paint",console.log("Consumed:",Date.now()-t)},0)}}).render()},2:function(t,n,e){"use strict";e.d(n,"b",function(){return l}),e.d(n,"g",function(){return g}),e.d(n,"c",function(){return m}),e.d(n,"j",function(){return b}),e.d(n,"d",function(){return _}),e.d(n,"e",function(){return C}),e.d(n,"f",function(){return y}),e.d(n,"i",function(){return R}),e.d(n,"h",function(){return B}),e.d(n,"m",function(){return k}),e.d(n,"k",function(){return E}),e.d(n,"l",function(){return I}),e.d(n,"a",function(){return N}),e.d(n,"n",function(){return z});var i=e(43);Object.freeze({Low:0,Middle:1,High:2});let r=new TextDecoder("utf-8"),s=null;function o(){return null!==s&&s.buffer===i.u.buffer||(s=new Uint8Array(i.u.buffer)),s}function c(t,n){return r.decode(o().subarray(t,t+n))}let u=null;function a(){return null===u&&(u=i.m()),u}let h=null;function d(){return null!==h&&h.buffer===i.u.buffer||(h=new Uint32Array(i.u.buffer)),h}const l=Object.freeze({Sea:0,Mountain:1,Forest:2,Plain:3,Town:4,Top:5,Highland:6,DeepSea:7,Path:8}),f=new Array(32);f.fill(void 0),f.push(void 0,null,!0,!1);let w=f.length;function p(t){w===f.length&&f.push(f.length+1);const n=w;return w=f[n],f[n]=t,n}function g(t,n){let e=c(t,n);return p(new Function(e))}function v(t){return f[t]}function m(t,n){return p(v(t).call(v(n)))}function b(t){return p(v(t).self)}function _(t){return p(v(t).crypto)}function C(t){return p(v(t).getRandomValues)}function x(t,n){return o().subarray(t/1,t/1+n)}function y(t,n,e){let i=x(n,e);v(t).getRandomValues(i)}function R(t,n){let i=c(t,n);return p(e(44)(i))}function B(t,n,e){let i=x(n,e);v(t).randomFillSync(i)}function k(t){var n;(n=t)<36||(f[n]=w,w=n)}function E(t){return void 0===v(t)?1:0}function I(t,n){return v(t)===v(n)?1:0}class M{static __wrap(t){const n=Object.create(M.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){i.b(t)}(t)}get kind(){return i.g(this.ptr)}set kind(t){return i.k(this.ptr,t)}get altitude(){return i.f(this.ptr)}set altitude(t){return i.j(this.ptr,t)}}class N{static __wrap(t){const n=Object.create(N.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){i.c(t)}(t)}static new(){return N.__wrap(i.t())}gen_auto(t,n){return P.__wrap(i.s(this.ptr,t,n))}gen(t,n,e){return P.__wrap(i.r(this.ptr,t,n,e))}}class P{static __wrap(t){const n=Object.create(P.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){i.a(t)}(t)}get width(){return i.e(this.ptr)}set width(t){return i.i(this.ptr,t)}get height(){return i.d(this.ptr)}set height(t){return i.h(this.ptr,t)}at(t,n){return M.__wrap(i.n(this.ptr,t,n))}land_color_code(t){const n=a();i.o(n,this.ptr,t);const e=d(),r=e[n/4],s=e[n/4+1],o=c(r,s).slice();return i.l(r,1*s),o}land_rgb_color(t){const n=a();i.q(n,this.ptr,t);const e=d()[n/4],r=d()[n/4+1];return 0===e?void 0:r}land_legend(t){const n=a();i.p(n,this.ptr,t);const e=d(),r=e[n/4],s=e[n/4+1],o=c(r,s).slice();return i.l(r,1*s),o}}function z(t,n){throw new Error(c(t,n))}},43:function(t,n,e){"use strict";var i=e.w[t.i];t.exports=i;e(2);i.v()},44:function(t,n){function e(t){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}e.keys=function(){return[]},e.resolve=e,t.exports=e,e.id=44}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,