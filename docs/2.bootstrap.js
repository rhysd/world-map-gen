(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1:function(t,n,e){"use strict";e.r(n);var r=e(2),i=e(30);class o{constructor(t){this.canvas=t,this.ctx=this.canvas.getContext("2d")}render(t){const n=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.canvas.width=e.width*n,this.canvas.height=e.height*n,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.beginPath();const r=t.width(),i=t.height(),o=this.canvas.width/r,s=this.canvas.height/i,c=o>s?s:o,u=new Map,d=new Map;for(let n=0;n<r;n++)for(let e=0;e<i;e++){const r=t.at(n,e),i=r.kind;let o=u.get(i);if(void 0===o&&void 0!==(o=r.color_code())&&u.set(i,o),this.ctx.fillStyle=o,this.ctx.fillRect(n*c,e*c,c,c),!d.has(i)){const t=r.legend();d.set(i,{text:t,color:o})}}return this.ctx.stroke(),{legends:d}}}var s=e(32);class c{constructor(t){this.canvas=t}render(t){const n=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.canvas.width=e.width*n,this.canvas.height=e.height*n;const i=t.width(),o=t.height(),c=this.determineCellSize(i,o),u=new s.Point(this.canvas.width/2,c+198),d=new s.PixelView(this.canvas,u),a=new Map,h=new Map,l=new Map;let f=null;function w(t,n,e){const r=function(t,n){const e=h.get(t);if(void 0!==e)return e;let r=n.rgb_color();void 0===r&&(r=16777215);const i=(new s.CubeColor).getByHorizontalColor(r);return h.set(t,i),l.set(t,{text:n.legend(),color:n.color_code()}),i}(t,e),i=c+2*n,o=new s.CubeDimension(c,c,i);return new s.Cube(o,r,!1)}function g(t){const n=t.kind,e=t.altitude;if(l.has(n)||l.set(n,{text:t.legend(),color:t.color_code()}),n===r.b.Top)return null===f&&(f=w(n,e,t)),f;if(n===r.b.Town||n===r.b.Path)return w(n,e,t);const i=a.get(e);if(void 0!==i)return i;const o=w(n,e,t);return a.set(e,o),o}for(let n=0;n<i;n++)for(let e=0;e<o;e++){const r=g(t.at(n,e)),i=new s.Point3D(n*c,e*c,0);d.renderObject(r,i)}return{legends:l}}determineCellSize(t,n){const e=n+t,r=(this.canvas.height-200)/e*2,i=this.canvas.width/e*2/Math.sqrt(3);let o=Math.floor(r>i?i:r);return o%2==1&&o--,o>6?o:6}}(new class{constructor(){this.generator=r.a.new(),this.currentBoard=null,this.screen=null;const t=document.getElementById("dimension-selector"),n=t[t.selectedIndex];this.dim=n.value,t.addEventListener("change",this.onVisualizationChange.bind(this)),this.widthInput=document.getElementById("width-input"),this.heightInput=document.getElementById("height-input"),this.screenRoot=document.getElementById("screen-root"),this.initRenderer(),this.paintButton=document.getElementById("paint-button"),this.paintButton.addEventListener("click",()=>{this.render()}),this.legends=document.getElementById("legends"),this.downloadJSONButton=document.getElementById("download-json-button"),this.downloadJSONButton.addEventListener("click",this.onDownloadJSON.bind(this)),this.downloadPNGButton=document.getElementById("download-png-button"),this.downloadPNGButton.addEventListener("click",this.onDownloadPNG.bind(this))}render(){this.paintButton.textContent="Painting...";for(const t of[this.paintButton,this.downloadJSONButton,this.downloadPNGButton])t.classList.add("disabled");window.setTimeout(()=>{const t=Date.now(),[n,e]=this.getSize(),r=this.generator.gen_auto(n,e),i=this.renderer.render(r);this.legends.innerHTML="";const o=Array.from(i.legends.keys());o.sort();for(const t of o){const n=i.legends.get(t),e=document.createElement("div");e.className="legend";const r=document.createElement("div");r.className="legend-color",r.style.backgroundColor=n.color||"none",e.appendChild(r);const o=document.createElement("div");o.className="legend-name",o.textContent=n.text,e.appendChild(o),this.legends.appendChild(e)}this.currentBoard=r;for(const t of[this.paintButton,this.downloadJSONButton,this.downloadPNGButton])t.classList.remove("disabled");this.paintButton.textContent="Generate",console.log("Consumed:",Date.now()-t)},0)}getSize(){const t=parseInt(this.widthInput.value,10),n=parseInt(this.heightInput.value,10);if(!isNaN(t)&&!isNaN(n))return[t,n];if("3d"===this.dim)return[120,120];const e=this.screenRoot.getBoundingClientRect();if(isNaN(t)){if(isNaN(n)){const t=(e.height>e.width?e.height:e.width)/200;return[Math.floor(e.width/t),Math.floor(e.height/t)]}{const t=e.height/n;return[Math.floor(e.width/t),n]}}{const n=e.width/t;return[t,Math.floor(e.height/n)]}}initRenderer(){const t=this.screenRoot.firstChild;switch(null!==t&&this.screenRoot.removeChild(t),this.currentBoard=null,this.screen=document.createElement("canvas"),this.screen.className="screen",this.screenRoot.appendChild(this.screen),this.dim){case"2d":this.renderer=new o(this.screen);break;case"3d":this.renderer=new c(this.screen);break;default:throw new Error(`Unknown context ${this.dim}`)}}onDownloadJSON(t){if(null===this.currentBoard)return;const n=new Blob([this.currentBoard.as_json()],{type:"text/plain;charset=utf-8"});Object(i.saveAs)(n,"board.json")}onDownloadPNG(t){null!==this.screen&&this.screen.toBlob(t=>Object(i.saveAs)(t,"board.png"))}onVisualizationChange(t){const n=t.target,e=n[n.selectedIndex].value;this.dim!==e&&(this.dim=e,this.initRenderer(),this.render())}}).render()},2:function(t,n,e){"use strict";e.d(n,"b",function(){return l}),e.d(n,"g",function(){return p}),e.d(n,"c",function(){return m}),e.d(n,"j",function(){return b}),e.d(n,"d",function(){return B}),e.d(n,"e",function(){return N}),e.d(n,"f",function(){return y}),e.d(n,"i",function(){return C}),e.d(n,"h",function(){return x}),e.d(n,"k",function(){return E}),e.d(n,"l",function(){return k}),e.d(n,"n",function(){return O}),e.d(n,"a",function(){return P}),e.d(n,"m",function(){return M});var r=e(45);Object.freeze({Low:0,Middle:1,High:2});let i=new TextDecoder("utf-8"),o=null;function s(){return null!==o&&o.buffer===r.t.buffer||(o=new Uint8Array(r.t.buffer)),o}function c(t,n){return i.decode(s().subarray(t,t+n))}let u=null;function d(){return null===u&&(u=r.i()),u}let a=null;function h(){return null!==a&&a.buffer===r.t.buffer||(a=new Uint32Array(r.t.buffer)),a}const l=Object.freeze({Sea:0,Mountain:1,Forest:2,Plain:3,Town:4,Top:5,Highland:6,DeepSea:7,Path:8}),f=new Array(32);f.fill(void 0),f.push(void 0,null,!0,!1);let w=f.length;function g(t){w===f.length&&f.push(f.length+1);const n=w;return w=f[n],f[n]=t,n}function p(t,n){let e=c(t,n);return g(new Function(e))}function v(t){return f[t]}function m(t,n){return g(v(t).call(v(n)))}function b(t){return g(v(t).self)}function B(t){return g(v(t).crypto)}function N(t){return g(v(t).getRandomValues)}function _(t,n){return s().subarray(t/1,t/1+n)}function y(t,n,e){let r=_(n,e);v(t).getRandomValues(r)}function C(t,n){let r=c(t,n);return g(e(46)(r))}function x(t,n,e){let r=_(n,e);v(t).randomFillSync(r)}function E(t){return void 0===v(t)?1:0}function k(t,n){return v(t)===v(n)?1:0}function O(t,n){throw new Error(c(t,n))}class R{static __wrap(t){const n=Object.create(R.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){r.a(t)}(t)}width(){return r.m(this.ptr)>>>0}height(){return r.l(this.ptr)>>>0}at(t,n){return I.__wrap(r.k(this.ptr,t,n))}as_json(){const t=d();r.j(t,this.ptr);const n=h(),e=n[t/4],i=n[t/4+1];if(0===e)return;const o=c(e,i).slice();return r.h(e,1*i),o}}class I{static __wrap(t){const n=Object.create(I.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){r.b(t)}(t)}get kind(){return r.e(this.ptr)}set kind(t){return r.g(this.ptr,t)}get altitude(){return r.d(this.ptr)}set altitude(t){return r.f(this.ptr,t)}color_code(){const t=d();r.n(t,this.ptr);const n=h(),e=n[t/4],i=n[t/4+1];if(0===e)return;const o=c(e,i).slice();return r.h(e,1*i),o}rgb_color(){const t=d();r.p(t,this.ptr);const n=h()[t/4],e=h()[t/4+1];return 0===n?void 0:e}legend(){const t=d();r.o(t,this.ptr);const n=h(),e=n[t/4],i=n[t/4+1],o=c(e,i).slice();return r.h(e,1*i),o}}class P{static __wrap(t){const n=Object.create(P.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){r.c(t)}(t)}static new(){return P.__wrap(r.s())}gen_auto(t,n){return R.__wrap(r.r(this.ptr,t,n))}gen(t,n,e){return R.__wrap(r.q(this.ptr,t,n,e))}}function M(t){var n;(n=t)<36||(f[n]=w,w=n)}},45:function(t,n,e){"use strict";var r=e.w[t.i];t.exports=r;e(2);r.u()},46:function(t,n){function e(t){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}e.keys=function(){return[]},e.resolve=e,t.exports=e,e.id=46}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8yZC50cyIsIndlYnBhY2s6Ly8vLi8zZC50cyIsIndlYnBhY2s6Ly8vLi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi4vcGtnL3dvcmxkX21hcF9nZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL3BrZyBzeW5jIl0sIm5hbWVzIjpbIlJlbmRlcmVyMkQiLCJbb2JqZWN0IE9iamVjdF0iLCJjYW52YXMiLCJ0aGlzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImJvYXJkIiwiZHByIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImNsZWFyUmVjdCIsImJlZ2luUGF0aCIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJjZWxsU2l6ZSIsImNvbG9ycyIsIk1hcCIsImxlZ2VuZHMiLCJ4IiwieSIsImNlbGwiLCJhdCIsImtpbmQiLCJjb2xvciIsImdldCIsInVuZGVmaW5lZCIsImNvbG9yX2NvZGUiLCJzZXQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImhhcyIsInRleHQiLCJsZWdlbmQiLCJzdHJva2UiLCJfM2RfUmVuZGVyZXIzRCIsImRldGVybWluZUNlbGxTaXplIiwicG9pbnQiLCJvYmVsaXNrIiwicGl4ZWxWaWV3IiwiY2FjaGUiLCJ0b3BDdWJlIiwiY2FsY0N1YmUiLCJhbHQiLCJjYWNoZWQiLCJyZ2IiLCJyZ2JfY29sb3IiLCJnZXRCeUhvcml6b250YWxDb2xvciIsImtpbmRDb2xvciIsInoiLCJkaW0iLCJjdWJlQXQiLCJhbHRpdHVkZSIsIndvcmxkX21hcF9nZW4iLCJUb3AiLCJUb3duIiwiUGF0aCIsImN1YmUiLCJwdCIsInJlbmRlck9iamVjdCIsImJvdGgiLCJmcm9tSGVpZ2h0IiwiZnJvbVdpZHRoIiwiTWF0aCIsInNxcnQiLCJmbG9vciIsImdlbmVyYXRvciIsIm5ldyIsImN1cnJlbnRCb2FyZCIsInNjcmVlbiIsInNlbGVjdG9yIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJ2YWx1ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblZpc3VhbGl6YXRpb25DaGFuZ2UiLCJiaW5kIiwid2lkdGhJbnB1dCIsImhlaWdodElucHV0Iiwic2NyZWVuUm9vdCIsImluaXRSZW5kZXJlciIsInBhaW50QnV0dG9uIiwicmVuZGVyIiwiZG93bmxvYWRKU09OQnV0dG9uIiwib25Eb3dubG9hZEpTT04iLCJkb3dubG9hZFBOR0J1dHRvbiIsIm9uRG93bmxvYWRQTkciLCJ0ZXh0Q29udGVudCIsImJ0biIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJnZXRTaXplIiwiZ2VuX2F1dG8iLCJyZW5kZXJlZCIsInJlbmRlcmVyIiwiaW5uZXJIVE1MIiwibmFtZXMiLCJBcnJheSIsImZyb20iLCJrZXlzIiwic29ydCIsIm5hbWUiLCJpdGVtIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiYXBwZW5kQ2hpbGQiLCJsYWJlbCIsInJlbW92ZSIsImNvbnNvbGUiLCJsb2ciLCJwYXJzZUludCIsImlzTmFOIiwiY2VsbFBpeCIsInByZXYiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJFcnJvciIsIl8iLCJibG9iIiwiQmxvYiIsImFzX2pzb24iLCJ0eXBlIiwiT2JqZWN0IiwiRmlsZVNhdmVyX21pbiIsInRvQmxvYiIsImIiLCJldmVudCIsInRhcmdldCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJkIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIkxhbmRLaW5kIiwiX193YmdfbmV3XzNhNzQ2ZjI2MTk3MDVhZGQiLCJfX3diZ19jYWxsX2Y1NGQzYTZkYWRiMTk5Y2EiLCJfX3diZ19zZWxmX2FjMzc5ZTc4MGEwZDhiOTQiLCJfX3diZ19jcnlwdG9fMWU0MzAyYjg1ZDRmNjRhMiIsIl9fd2JnX2dldFJhbmRvbVZhbHVlc18xYjRiYTE0NDE2MmE1YzllIiwiX193YmdfZ2V0UmFuZG9tVmFsdWVzXzFlZjExZTg4OGU1MjI4ZTkiLCJfX3diZ19yZXF1aXJlXzY0NjFiMWU5YTBkN2MzNGEiLCJfX3diZ19yYW5kb21GaWxsU3luY18xYjUyYzg0ODIzNzRjNTViIiwiX193YmluZGdlbl9pc191bmRlZmluZWQiLCJfX3diaW5kZ2VuX2pzdmFsX2VxIiwiX193YmluZGdlbl90aHJvdyIsIkdlbmVyYXRvciIsIl9fd2JpbmRnZW5fb2JqZWN0X2Ryb3BfcmVmIiwiX3dvcmxkX21hcF9nZW5fYmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImZyZWV6ZSIsIkxvdyIsIk1pZGRsZSIsIkhpZ2giLCJjYWNoZWRUZXh0RGVjb2RlciIsIlRleHREZWNvZGVyIiwiY2FjaGVnZXRVaW50OE1lbW9yeSIsImdldFVpbnQ4TWVtb3J5IiwiYnVmZmVyIiwiVWludDhBcnJheSIsImdldFN0cmluZ0Zyb21XYXNtIiwicHRyIiwibGVuIiwiZGVjb2RlIiwic3ViYXJyYXkiLCJjYWNoZWRHbG9iYWxBcmd1bWVudFB0ciIsImdsb2JhbEFyZ3VtZW50UHRyIiwiY2FjaGVnZXRVaW50MzJNZW1vcnkiLCJnZXRVaW50MzJNZW1vcnkiLCJVaW50MzJBcnJheSIsIlNlYSIsIk1vdW50YWluIiwiRm9yZXN0IiwiUGxhaW4iLCJIaWdobGFuZCIsIkRlZXBTZWEiLCJoZWFwIiwiZmlsbCIsInB1c2giLCJoZWFwX25leHQiLCJsZW5ndGgiLCJhZGRIZWFwT2JqZWN0Iiwib2JqIiwiaWR4IiwiYXJnMCIsImFyZzEiLCJ2YXJnMCIsIkZ1bmN0aW9uIiwiZ2V0T2JqZWN0IiwiY2FsbCIsInNlbGYiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJnZXRBcnJheVU4RnJvbVdhc20iLCJhcmcyIiwidmFyZzEiLCJyYW5kb21GaWxsU3luYyIsImkiLCJhIiwiQm9hcmQiLCJjcmVhdGUiLCJwcm90b3R5cGUiLCJmcmVlQm9hcmQiLCJDZWxsIiwiX193cmFwIiwicmV0cHRyIiwibWVtIiwicnVzdHB0ciIsInJ1c3RsZW4iLCJyZWFsUmV0Iiwic2xpY2UiLCJmcmVlQ2VsbCIsInByZXNlbnQiLCJmcmVlR2VuZXJhdG9yIiwicmVzIiwid2VicGFja0VtcHR5Q29udGV4dCIsInJlcSIsImUiLCJjb2RlIiwicmVzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpZCJdLCJtYXBwaW5ncyI6ImtIQUdlLE1BQU1BLEVBSWpCQyxZQUFZQyxHQUNSQyxLQUFLRCxPQUFTQSxFQUNkQyxLQUFLQyxJQUFNRCxLQUFLRCxPQUFPRyxXQUFXLE1BRy9CSixPQUFPSyxHQUNWLE1BQU1DLEVBQU1DLE9BQU9DLGtCQUFvQixFQUNqQ0MsRUFBT1AsS0FBS0QsT0FBT1Msd0JBQ3pCUixLQUFLRCxPQUFPVSxNQUFRRixFQUFLRSxNQUFRTCxFQUNqQ0osS0FBS0QsT0FBT1csT0FBU0gsRUFBS0csT0FBU04sRUFHbkNKLEtBQUtDLElBQUlVLFVBQVUsRUFBRyxFQUFHWCxLQUFLRCxPQUFPVSxNQUFPVCxLQUFLRCxPQUFPVyxRQUV4RFYsS0FBS0MsSUFBSVcsWUFFVCxNQUFNSCxFQUFRTixFQUFNTSxRQUNkQyxFQUFTUCxFQUFNTyxTQUNmRyxFQUFZYixLQUFLRCxPQUFPVSxNQUFRQSxFQUNoQ0ssRUFBYWQsS0FBS0QsT0FBT1csT0FBU0EsRUFDbENLLEVBQVdGLEVBQVlDLEVBQWFBLEVBQWFELEVBRWpERyxFQUFTLElBQUlDLElBQ2JDLEVBQVUsSUFBSUQsSUFDcEIsSUFBSyxJQUFJRSxFQUFJLEVBQUdBLEVBQUlWLEVBQU9VLElBQ3ZCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJVixFQUFRVSxJQUFLLENBQzdCLE1BQU1DLEVBQU9sQixFQUFNbUIsR0FBR0gsRUFBR0MsR0FDbkJHLEVBQU9GLEVBQUtFLEtBQ2xCLElBQUlDLEVBQVFSLEVBQU9TLElBQUlGLEdBU3ZCLFFBUmNHLElBQVZGLFFBRWNFLEtBRGRGLEVBQVFILEVBQUtNLGVBRVRYLEVBQU9ZLElBQUlMLEVBQU1DLEdBR3pCeEIsS0FB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QWdHLEVBQUEsS0FFQSxNQURBQyxFQUFBQyxLQUFBLG1CQUNBRCxFQUVBRixFQUFBbEgsS0FBQSxXQUF1QyxVQUN2Q2tILEVBQUFJLFFBQUFKLEVBQ0FLLEVBQUFDLFFBQUFOLEVBQ0FBLEVBQUFPLEdBQUEiLCJmaWxlIjoiMi5ib290c3RyYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2FyZCB9IGZyb20gJ3dvcmxkLW1hcC1nZW4nO1xuaW1wb3J0IHsgUmVuZGVyZXIsIFJlbmRlcmVkLCBMZWdlbmQgfSBmcm9tICcuL3JlbmRlcmVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyZXIyRCBpbXBsZW1lbnRzIFJlbmRlcmVyIHtcbiAgICBwcml2YXRlIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblxuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKSE7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcihib2FyZDogQm9hcmQpOiBSZW5kZXJlZCB7XG4gICAgICAgIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSByZWN0LndpZHRoICogZHByO1xuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSByZWN0LmhlaWdodCAqIGRwcjtcblxuICAgICAgICAvLyBDbGVhciBhdCBmaXJzdFxuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgY29uc3Qgd2lkdGggPSBib2FyZC53aWR0aCgpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBib2FyZC5oZWlnaHQoKTtcbiAgICAgICAgY29uc3QgY2VsbFdpZHRoID0gdGhpcy5jYW52YXMud2lkdGggLyB3aWR0aDtcbiAgICAgICAgY29uc3QgY2VsbEhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodCAvIGhlaWdodDtcbiAgICAgICAgY29uc3QgY2VsbFNpemUgPSBjZWxsV2lkdGggPiBjZWxsSGVpZ2h0ID8gY2VsbEhlaWdodCA6IGNlbGxXaWR0aDtcblxuICAgICAgICBjb25zdCBjb2xvcnMgPSBuZXcgTWFwPG51bWJlciwgc3RyaW5nPigpO1xuICAgICAgICBjb25zdCBsZWdlbmRzID0gbmV3IE1hcDxudW1iZXIsIExlZ2VuZD4oKTtcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGJvYXJkLmF0KHgsIHkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtpbmQgPSBjZWxsLmtpbmQ7XG4gICAgICAgICAgICAgICAgbGV0IGNvbG9yID0gY29sb3JzLmdldChraW5kKTtcbiAgICAgICAgICAgICAgICBpZiAoY29sb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNlbGwuY29sb3JfY29kZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzLnNldChraW5kLCBjb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoeCAqIGNlbGxTaXplLCB5ICogY2VsbFNpemUsIGNlbGxTaXplLCBjZWxsU2l6ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFsZWdlbmRzLmhhcyhraW5kKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gY2VsbC5sZWdlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kcy5zZXQoa2luZCwgeyB0ZXh0LCBjb2xvciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcblxuICAgICAgICByZXR1cm4geyBsZWdlbmRzIH07XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUG9pbnQzRCwgUG9pbnQsIEN1YmVEaW1lbnNpb24sIEN1YmVDb2xvciwgQ3ViZSwgUGl4ZWxWaWV3IH0gZnJvbSAnb2JlbGlzay5qcyc7XG5pbXBvcnQgeyBMYW5kS2luZCwgQm9hcmQsIENlbGwgfSBmcm9tICd3b3JsZC1tYXAtZ2VuJztcbmltcG9ydCB7IFJlbmRlcmVyLCBSZW5kZXJlZCwgTGVnZW5kIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyM0QgaW1wbGVtZW50cyBSZW5kZXJlciB7XG4gICAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKGJvYXJkOiBCb2FyZCk6IFJlbmRlcmVkIHtcbiAgICAgICAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHJlY3Qud2lkdGggKiBkcHI7XG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHJlY3QuaGVpZ2h0ICogZHByO1xuXG4gICAgICAgIGNvbnN0IHdpZHRoID0gYm9hcmQud2lkdGgoKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gYm9hcmQuaGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IGNlbGxTaXplID0gdGhpcy5kZXRlcm1pbmVDZWxsU2l6ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludCh0aGlzLmNhbnZhcy53aWR0aCAvIDIsIGNlbGxTaXplICsgOTkgKiAyKTtcbiAgICAgICAgY29uc3QgcGl4ZWxWaWV3ID0gbmV3IFBpeGVsVmlldyh0aGlzLmNhbnZhcywgcG9pbnQpO1xuXG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcDxudW1iZXIsIEN1YmU+KCk7IC8vIEFsdGl0dWRlIC0+IEN1YmVcbiAgICAgICAgY29uc3QgY29sb3JzID0gbmV3IE1hcDxudW1iZXIsIEN1YmVDb2xvcj4oKTsgLy8ga2luZCAtPiBDdWJlQ29sb3JcbiAgICAgICAgY29uc3QgbGVnZW5kcyA9IG5ldyBNYXA8bnVtYmVyLCBMZWdlbmQ+KCk7IC8vIGtpbmQgLT4gTGVnZW5kXG4gICAgICAgIGxldCB0b3BDdWJlOiBDdWJlIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgICAgZnVuY3Rpb24ga2luZENvbG9yKGtpbmQ6IExhbmRLaW5kLCBjZWxsOiBDZWxsKTogQ3ViZUNvbG9yIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZCA9IGNvbG9ycy5nZXQoa2luZCk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJnYiA9IGNlbGwucmdiX2NvbG9yKCk7XG4gICAgICAgICAgICBpZiAocmdiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZ2IgPSAweGZmZmZmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gbmV3IEN1YmVDb2xvcigpLmdldEJ5SG9yaXpvbnRhbENvbG9yKHJnYik7XG4gICAgICAgICAgICBjb2xvcnMuc2V0KGtpbmQsIGNvbG9yKTtcblxuICAgICAgICAgICAgLy8gUmVtZW1iZXIgbGVnZW5kIG9mIHRoZSBraW5kIGFsc29cbiAgICAgICAgICAgIGxlZ2VuZHMuc2V0KGtpbmQsIHsgdGV4dDogY2VsbC5sZWdlbmQoKSwgY29sb3I6IGNlbGwuY29sb3JfY29kZSgpIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjYWxjQ3ViZShraW5kOiBMYW5kS2luZCwgYWx0OiBudW1iZXIsIGNlbGw6IENlbGwpOiBDdWJlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0ga2luZENvbG9yKGtpbmQsIGNlbGwpO1xuICAgICAgICAgICAgY29uc3QgeiA9IGNlbGxTaXplICsgYWx0ICogMjtcbiAgICAgICAgICAgIGNvbnN0IGRpbSA9IG5ldyBDdWJlRGltZW5zaW9uKGNlbGxTaXplLCBjZWxsU2l6ZSwgeik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1YmUoZGltLCBjb2xvciwgLypib3JkZXI6Ki8gZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY3ViZUF0KGNlbGw6IENlbGwpOiBDdWJlIHtcbiAgICAgICAgICAgIGNvbnN0IGtpbmQgPSBjZWxsLmtpbmQ7XG4gICAgICAgICAgICBjb25zdCBhbHQgPSBjZWxsLmFsdGl0dWRlO1xuXG4gICAgICAgICAgICBpZiAoIWxlZ2VuZHMuaGFzKGtpbmQpKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgbGVnZW5kIG9mIHRoZSBraW5kIGFsc29cbiAgICAgICAgICAgICAgICBsZWdlbmRzLnNldChraW5kLCB7IHRleHQ6IGNlbGwubGVnZW5kKCksIGNvbG9yOiBjZWxsLmNvbG9yX2NvZGUoKSB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGtpbmQgPT09IExhbmRLaW5kLlRvcCkge1xuICAgICAgICAgICAgICAgIGlmICh0b3BDdWJlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcEN1YmUgPSBjYWxjQ3ViZShraW5kLCBhbHQsIGNlbGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9wQ3ViZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGtpbmQgPT09IExhbmRLaW5kLlRvd24gfHwga2luZCA9PT0gTGFuZEtpbmQuUGF0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxjQ3ViZShraW5kLCBhbHQsIGNlbGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoYWx0KTtcbiAgICAgICAgICAgIGlmIChjYWNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGN1YmUgPSBjYWxjQ3ViZShraW5kLCBhbHQsIGNlbGwpO1xuICAgICAgICAgICAgY2FjaGUuc2V0KGFsdCwgY3ViZSk7XG4gICAgICAgICAgICByZXR1cm4gY3ViZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1YmUgPSBjdWJlQXQoYm9hcmQuYXQoeCwgeSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHB0ID0gbmV3IFBvaW50M0QoeCAqIGNlbGxTaXplLCB5ICogY2VsbFNpemUsIDApO1xuICAgICAgICAgICAgICAgIHBpeGVsVmlldy5yZW5kZXJPYmplY3QoY3ViZSwgcHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZ2VuZHMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZXRlcm1pbmVDZWxsU2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBib3RoID0gaGVpZ2h0ICsgd2lkdGg7XG4gICAgICAgIGNvbnN0IGZyb21IZWlnaHQgPSAoKHRoaXMuY2FudmFzLmhlaWdodCAtIDIwMCkgLyBib3RoKSAqIDI7XG4gICAgICAgIGNvbnN0IGZyb21XaWR0aCA9ICgodGhpcy5jYW52YXMud2lkdGggLyBib3RoKSAqIDIpIC8gTWF0aC5zcXJ0KDMpO1xuICAgICAgICBsZXQgY2VsbFNpemUgPSBNYXRoLmZsb29yKGZyb21IZWlnaHQgPiBmcm9tV2lkdGggPyBmcm9tV2lkdGggOiBmcm9tSGVpZ2h0KTtcbiAgICAgICAgaWYgKGNlbGxTaXplICUgMiA9PT0gMSkge1xuICAgICAgICAgICAgY2VsbFNpemUtLTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2VsbFNpemUgPiA2ID8gY2VsbFNpemUgOiA2O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdlbmVyYXRvciwgQm9hcmQgfSBmcm9tICd3b3JsZC1tYXAtZ2VuJztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IFJlbmRlcmVyMkQgZnJvbSAnLi8yZCc7XG5pbXBvcnQgUmVuZGVyZXIzRCBmcm9tICcuLzNkJztcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjbGFzcyB7XG4gICAgcHJpdmF0ZSBnZW5lcmF0b3I6IEdlbmVyYXRvcjtcbiAgICBwcml2YXRlIGRpbTogc3RyaW5nO1xuICAgIHByaXZhdGUgY3VycmVudEJvYXJkOiBCb2FyZCB8IG51bGw7XG4gICAgcHJpdmF0ZSB3aWR0aElucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHByaXZhdGUgaGVpZ2h0SW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzY3JlZW5Sb290OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHBhaW50QnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIGxlZ2VuZHM6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyO1xuICAgIHByaXZhdGUgZG93bmxvYWRKU09OQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIGRvd25sb2FkUE5HQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIHNjcmVlbjogSFRNTENhbnZhc0VsZW1lbnQgfCBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZ2VuZXJhdG9yID0gR2VuZXJhdG9yLm5ldygpO1xuICAgICAgICB0aGlzLmN1cnJlbnRCb2FyZCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2NyZWVuID0gbnVsbDtcblxuICAgICAgICBjb25zdCBzZWxlY3RvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaW1lbnNpb24tc2VsZWN0b3InKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0b3Jbc2VsZWN0b3Iuc2VsZWN0ZWRJbmRleF0gYXMgSFRNTE9wdGlvbkVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZGltID0gb3B0aW9uLnZhbHVlO1xuICAgICAgICBzZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLm9uVmlzdWFsaXphdGlvbkNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLndpZHRoSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2lkdGgtaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICB0aGlzLmhlaWdodElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hlaWdodC1pbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc2NyZWVuUm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY3JlZW4tcm9vdCcpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgIHRoaXMuaW5pdFJlbmRlcmVyKCk7XG5cbiAgICAgICAgdGhpcy5wYWludEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWludC1idXR0b24nKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICAgICAgdGhpcy5wYWludEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubGVnZW5kcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsZWdlbmRzJykgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5kb3dubG9hZEpTT05CdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtanNvbi1idXR0b24nKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICAgICAgdGhpcy5kb3dubG9hZEpTT05CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uRG93bmxvYWRKU09OLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuZG93bmxvYWRQTkdCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtcG5nLWJ1dHRvbicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgICB0aGlzLmRvd25sb2FkUE5HQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkRvd25sb2FkUE5HLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIC8vIFRPRE86IExvYWRpbmcgaW5kaWNhdG9yIGNhbm5vdCBiZSBkaXNwbGF5ZWQgc2luY2UgbWFwIGdlbmVyYXRpb24gaXMgcnVuIGluIG1haW4gdGhyZWFkLlxuICAgICAgICAvLyBXaGVuIG1hcCBzaXplIGlzIHZlcnkgbGFyZ2UgYW5kIGl0IGNvbnN1bWVzIHRpbWUsIENQVSBjb3JlIGlzIGFsc28gY29uc3VtZWQgZm9yIG1haW4gdGhyZWFkLlxuICAgICAgICAvLyBJbiB0aGUgY2FzZSwgbm8gYW5pbWF0aW9uIGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICAgICAgICAvLyBUbyBwcmV2ZW50IHRoaXMsIG1hcCBnZW5lcmF0aW9uIG11c3QgYmUgcnVuIGluIGFub3RoZXIgdGhyZWFkIGFuZCBSdXN0IGNhbiBkbyBpdC5cblxuICAgICAgICAvLyB0aGlzLnBhaW50QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2lzLWxvYWRpbmcnKTtcbiAgICAgICAgdGhpcy5wYWludEJ1dHRvbi50ZXh0Q29udGVudCA9ICdQYWludGluZy4uLic7XG4gICAgICAgIGZvciAoY29uc3QgYnRuIG9mIFt0aGlzLnBhaW50QnV0dG9uLCB0aGlzLmRvd25sb2FkSlNPTkJ1dHRvbiwgdGhpcy5kb3dubG9hZFBOR0J1dHRvbl0pIHtcbiAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2FpdCBuZXh0IHRpY2sgdG8gY2hhbmdlIHRleHRcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gdGhpcy5nZXRTaXplKCk7XG4gICAgICAgICAgICBjb25zdCBib2FyZCA9IHRoaXMuZ2VuZXJhdG9yLmdlbl9hdXRvKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyZWQgPSB0aGlzLnJlbmRlcmVyLnJlbmRlcihib2FyZCk7XG5cbiAgICAgICAgICAgIHRoaXMubGVnZW5kcy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gQXJyYXkuZnJvbShyZW5kZXJlZC5sZWdlbmRzLmtleXMoKSk7XG4gICAgICAgICAgICBuYW1lcy5zb3J0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZWdlbmQgPSByZW5kZXJlZC5sZWdlbmRzLmdldChuYW1lKSE7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NOYW1lID0gJ2xlZ2VuZCc7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGNvbG9yLmNsYXNzTmFtZSA9ICdsZWdlbmQtY29sb3InO1xuICAgICAgICAgICAgICAgIGNvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGxlZ2VuZC5jb2xvciB8fCAnbm9uZSc7XG4gICAgICAgICAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChjb2xvcik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGxhYmVsLmNsYXNzTmFtZSA9ICdsZWdlbmQtbmFtZSc7XG4gICAgICAgICAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBsZWdlbmQudGV4dDtcbiAgICAgICAgICAgICAgICBpdGVtLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgICAgICAgICAgICAgIHRoaXMubGVnZW5kcy5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJvYXJkID0gYm9hcmQ7XG5cbiAgICAgICAgICAgIC8vIHRoaXMucGFpbnRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaXMtbG9hZGluZycpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBidG4gb2YgW3RoaXMucGFpbnRCdXR0b24sIHRoaXMuZG93bmxvYWRKU09OQnV0dG9uLCB0aGlzLmRvd25sb2FkUE5HQnV0dG9uXSkge1xuICAgICAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYWludEJ1dHRvbi50ZXh0Q29udGVudCA9ICdHZW5lcmF0ZSc7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQ29uc3VtZWQ6JywgRGF0ZS5ub3coKSAtIHN0YXJ0KTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTaXplKCkge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KHRoaXMud2lkdGhJbnB1dC52YWx1ZSwgMTApO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUludCh0aGlzLmhlaWdodElucHV0LnZhbHVlLCAxMCk7XG4gICAgICAgIGlmICghaXNOYU4od2lkdGgpICYmICFpc05hTihoZWlnaHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW3dpZHRoLCBoZWlnaHRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGltID09PSAnM2QnKSB7XG4gICAgICAgICAgICByZXR1cm4gWzEyMCwgMTIwXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLnNjcmVlblJvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKCFpc05hTih3aWR0aCkpIHtcbiAgICAgICAgICAgIC8vIE5vdGU6IGhlaWdodCBpcyBOYU5cbiAgICAgICAgICAgIGNvbnN0IGNlbGxQaXggPSByZWN0LndpZHRoIC8gd2lkdGg7XG4gICAgICAgICAgICByZXR1cm4gW3dpZHRoLCBNYXRoLmZsb29yKHJlY3QuaGVpZ2h0IC8gY2VsbFBpeCldO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc05hTihoZWlnaHQpKSB7XG4gICAgICAgICAgICAvLyBOb3RlOiB3aWR0aCBpcyBOYU5cbiAgICAgICAgICAgIGNvbnN0IGNlbGxQaXggPSByZWN0LmhlaWdodCAvIGhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiBbTWF0aC5mbG9vcihyZWN0LndpZHRoIC8gY2VsbFBpeCksIGhlaWdodF07XG4gICAgICAgIH0gLyogbG9uZ2VyIHNpZGUgbGVuZ3RoIGlzIDIwMCBjZWxscyBieSBkZWZhdWx0ICovIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gcmVjdC5oZWlnaHQgPiByZWN0LndpZHRoID8gcmVjdC5oZWlnaHQgOiByZWN0LndpZHRoO1xuICAgICAgICAgICAgY29uc3QgY2VsbFBpeCA9IG1heCAvIDIwMDtcbiAgICAgICAgICAgIHJldHVybiBbTWF0aC5mbG9vcihyZWN0LndpZHRoIC8gY2VsbFBpeCksIE1hdGguZmxvb3IocmVjdC5oZWlnaHQgLyBjZWxsUGl4KV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRSZW5kZXJlcigpIHtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuc2NyZWVuUm9vdC5maXJzdENoaWxkO1xuICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5Sb290LnJlbW92ZUNoaWxkKHByZXYpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudEJvYXJkID0gbnVsbDtcbiAgICAgICAgdGhpcy5zY3JlZW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgdGhpcy5zY3JlZW4uY2xhc3NOYW1lID0gJ3NjcmVlbic7XG4gICAgICAgIHRoaXMuc2NyZWVuUm9vdC5hcHBlbmRDaGlsZCh0aGlzLnNjcmVlbik7XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLmRpbSkge1xuICAgICAgICAgICAgY2FzZSAnMmQnOlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIyRCh0aGlzLnNjcmVlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICczZCc6XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcjNEKHRoaXMuc2NyZWVuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGNvbnRleHQgJHt0aGlzLmRpbX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb25Eb3dubG9hZEpTT04oXzogRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEJvYXJkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFt0aGlzLmN1cnJlbnRCb2FyZC5hc19qc29uKCldLCB7IHR5cGU6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgnIH0pO1xuICAgICAgICBzYXZlQXMoYmxvYiwgJ2JvYXJkLmpzb24nKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRG93bmxvYWRQTkcoXzogRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2NyZWVuID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY3JlZW4udG9CbG9iKChiOiBCbG9iKSA9PiBzYXZlQXMoYiwgJ2JvYXJkLnBuZycpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uVmlzdWFsaXphdGlvbkNoYW5nZShldmVudDogRXZlbnQpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBldmVudC50YXJnZXQgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdG9yW3NlbGVjdG9yLnNlbGVjdGVkSW5kZXhdIGFzIEhUTUxPcHRpb25FbGVtZW50O1xuICAgICAgICBjb25zdCBkaW0gPSBvcHRpb24udmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmRpbSA9PT0gZGltKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaW0gPSBkaW07XG4gICAgICAgIHRoaXMuaW5pdFJlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxufSgpO1xuXG5hcHAucmVuZGVyKCk7XG4iLCJpbXBvcnQgKiBhcyB3YXNtIGZyb20gJy4vd29ybGRfbWFwX2dlbl9iZyc7XG5cbi8qKlxuKiBSZXNvbHV0aW9uIG9mIHRoZSBib2FyZC5cbiovXG5leHBvcnQgY29uc3QgUmVzb2x1dGlvbiA9IE9iamVjdC5mcmVlemUoeyBMb3c6MCxNaWRkbGU6MSxIaWdoOjIsIH0pO1xuXG5sZXQgY2FjaGVkVGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi04Jyk7XG5cbmxldCBjYWNoZWdldFVpbnQ4TWVtb3J5ID0gbnVsbDtcbmZ1bmN0aW9uIGdldFVpbnQ4TWVtb3J5KCkge1xuICAgIGlmIChjYWNoZWdldFVpbnQ4TWVtb3J5ID09PSBudWxsIHx8IGNhY2hlZ2V0VWludDhNZW1vcnkuYnVmZmVyICE9PSB3YXNtLm1lbW9yeS5idWZmZXIpIHtcbiAgICAgICAgY2FjaGVnZXRVaW50OE1lbW9yeSA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlcik7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWdldFVpbnQ4TWVtb3J5O1xufVxuXG5mdW5jdGlvbiBnZXRTdHJpbmdGcm9tV2FzbShwdHIsIGxlbikge1xuICAgIHJldHVybiBjYWNoZWRUZXh0RGVjb2Rlci5kZWNvZGUoZ2V0VWludDhNZW1vcnkoKS5zdWJhcnJheShwdHIsIHB0ciArIGxlbikpO1xufVxuXG5sZXQgY2FjaGVkR2xvYmFsQXJndW1lbnRQdHIgPSBudWxsO1xuZnVuY3Rpb24gZ2xvYmFsQXJndW1lbnRQdHIoKSB7XG4gICAgaWYgKGNhY2hlZEdsb2JhbEFyZ3VtZW50UHRyID09PSBudWxsKSB7XG4gICAgICAgIGNhY2hlZEdsb2JhbEFyZ3VtZW50UHRyID0gd2FzbS5fX3diaW5kZ2VuX2dsb2JhbF9hcmd1bWVudF9wdHIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZEdsb2JhbEFyZ3VtZW50UHRyO1xufVxuXG5sZXQgY2FjaGVnZXRVaW50MzJNZW1vcnkgPSBudWxsO1xuZnVuY3Rpb24gZ2V0VWludDMyTWVtb3J5KCkge1xuICAgIGlmIChjYWNoZWdldFVpbnQzMk1lbW9yeSA9PT0gbnVsbCB8fCBjYWNoZWdldFVpbnQzMk1lbW9yeS5idWZmZXIgIT09IHdhc20ubWVtb3J5LmJ1ZmZlcikge1xuICAgICAgICBjYWNoZWdldFVpbnQzMk1lbW9yeSA9IG5ldyBVaW50MzJBcnJheSh3YXNtLm1lbW9yeS5idWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVnZXRVaW50MzJNZW1vcnk7XG59XG4vKipcbiogUmVwcmVzZW50cyB0aGUga2luZCBvZiBjZWxsLiBgcHJlc2V0KClgIG1ldGhvZCByZXR1cm5zIGEgcHJlc2V0IGNlbGwgY29uc3RhbnRzIGZvclxuKiB0aGUga2luZC5cbiovXG5leHBvcnQgY29uc3QgTGFuZEtpbmQgPSBPYmplY3QuZnJlZXplKHsgU2VhOjAsTW91bnRhaW46MSxGb3Jlc3Q6MixQbGFpbjozLFRvd246NCxUb3A6NSxIaWdobGFuZDo2LERlZXBTZWE6NyxQYXRoOjgsIH0pO1xuXG5jb25zdCBoZWFwID0gbmV3IEFycmF5KDMyKTtcblxuaGVhcC5maWxsKHVuZGVmaW5lZCk7XG5cbmhlYXAucHVzaCh1bmRlZmluZWQsIG51bGwsIHRydWUsIGZhbHNlKTtcblxubGV0IGhlYXBfbmV4dCA9IGhlYXAubGVuZ3RoO1xuXG5mdW5jdGlvbiBhZGRIZWFwT2JqZWN0KG9iaikge1xuICAgIGlmIChoZWFwX25leHQgPT09IGhlYXAubGVuZ3RoKSBoZWFwLnB1c2goaGVhcC5sZW5ndGggKyAxKTtcbiAgICBjb25zdCBpZHggPSBoZWFwX25leHQ7XG4gICAgaGVhcF9uZXh0ID0gaGVhcFtpZHhdO1xuXG4gICAgaGVhcFtpZHhdID0gb2JqO1xuICAgIHJldHVybiBpZHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3diZ19uZXdfM2E3NDZmMjYxOTcwNWFkZChhcmcwLCBhcmcxKSB7XG4gICAgbGV0IHZhcmcwID0gZ2V0U3RyaW5nRnJvbVdhc20oYXJnMCwgYXJnMSk7XG4gICAgcmV0dXJuIGFkZEhlYXBPYmplY3QobmV3IEZ1bmN0aW9uKHZhcmcwKSk7XG59XG5cbmZ1bmN0aW9uIGdldE9iamVjdChpZHgpIHsgcmV0dXJuIGhlYXBbaWR4XTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gX193YmdfY2FsbF9mNTRkM2E2ZGFkYjE5OWNhKGFyZzAsIGFyZzEpIHtcbiAgICByZXR1cm4gYWRkSGVhcE9iamVjdChnZXRPYmplY3QoYXJnMCkuY2FsbChnZXRPYmplY3QoYXJnMSkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fd2JnX3NlbGZfYWMzNzllNzgwYTBkOGI5NChhcmcwKSB7XG4gICAgcmV0dXJuIGFkZEhlYXBPYmplY3QoZ2V0T2JqZWN0KGFyZzApLnNlbGYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX193YmdfY3J5cHRvXzFlNDMwMmI4NWQ0ZjY0YTIoYXJnMCkge1xuICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KGdldE9iamVjdChhcmcwKS5jcnlwdG8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX193YmdfZ2V0UmFuZG9tVmFsdWVzXzFiNGJhMTQ0MTYyYTVjOWUoYXJnMCkge1xuICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KGdldE9iamVjdChhcmcwKS5nZXRSYW5kb21WYWx1ZXMpO1xufVxuXG5mdW5jdGlvbiBnZXRBcnJheVU4RnJvbVdhc20ocHRyLCBsZW4pIHtcbiAgICByZXR1cm4gZ2V0VWludDhNZW1vcnkoKS5zdWJhcnJheShwdHIgLyAxLCBwdHIgLyAxICsgbGVuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fd2JnX2dldFJhbmRvbVZhbHVlc18xZWYxMWU4ODhlNTIyOGU5KGFyZzAsIGFyZzEsIGFyZzIpIHtcbiAgICBsZXQgdmFyZzEgPSBnZXRBcnJheVU4RnJvbVdhc20oYXJnMSwgYXJnMik7XG4gICAgZ2V0T2JqZWN0KGFyZzApLmdldFJhbmRvbVZhbHVlcyh2YXJnMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3diZ19yZXF1aXJlXzY0NjFiMWU5YTBkN2MzNGEoYXJnMCwgYXJnMSkge1xuICAgIGxldCB2YXJnMCA9IGdldFN0cmluZ0Zyb21XYXNtKGFyZzAsIGFyZzEpO1xuICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJlcXVpcmUodmFyZzApKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fd2JnX3JhbmRvbUZpbGxTeW5jXzFiNTJjODQ4MjM3NGM1NWIoYXJnMCwgYXJnMSwgYXJnMikge1xuICAgIGxldCB2YXJnMSA9IGdldEFycmF5VThGcm9tV2FzbShhcmcxLCBhcmcyKTtcbiAgICBnZXRPYmplY3QoYXJnMCkucmFuZG9tRmlsbFN5bmModmFyZzEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX193YmluZGdlbl9pc191bmRlZmluZWQoaSkgeyByZXR1cm4gZ2V0T2JqZWN0KGkpID09PSB1bmRlZmluZWQgPyAxIDogMDsgfVxuXG5leHBvcnQgZnVuY3Rpb24gX193YmluZGdlbl9qc3ZhbF9lcShhLCBiKSB7IHJldHVybiBnZXRPYmplY3QoYSkgPT09IGdldE9iamVjdChiKSA/IDEgOiAwOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3diaW5kZ2VuX3Rocm93KHB0ciwgbGVuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGdldFN0cmluZ0Zyb21XYXNtKHB0ciwgbGVuKSk7XG59XG5cbmZ1bmN0aW9uIGZyZWVCb2FyZChwdHIpIHtcblxuICAgIHdhc20uX193YmdfYm9hcmRfZnJlZShwdHIpO1xufVxuLyoqXG4qIFJlcHJlc2VudHMgb25lIGJvYXJkIGdlbmVyYXRlZCBieSByYW5kb20gbWFwIGdlbmVyYXRvci5cbiovXG5leHBvcnQgY2xhc3MgQm9hcmQge1xuXG4gICAgc3RhdGljIF9fd3JhcChwdHIpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShCb2FyZC5wcm90b3R5cGUpO1xuICAgICAgICBvYmoucHRyID0gcHRyO1xuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgZnJlZSgpIHtcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5wdHI7XG4gICAgICAgIHRoaXMucHRyID0gMDtcbiAgICAgICAgZnJlZUJvYXJkKHB0cik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHdpZHRoIGFzIG51bWJlciBvZiBjZWxscyBpbiBudW1iZXJcbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgKi9cbiAgICB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHdhc20uYm9hcmRfd2lkdGgodGhpcy5wdHIpID4+PiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgaGVpZ2h0IGFzIG51bWJlciBvZiBjZWxscyBpbiBudW1iZXJcbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgKi9cbiAgICBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB3YXNtLmJvYXJkX2hlaWdodCh0aGlzLnB0cikgPj4+IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyBjZWxsIGF0IHBvc2l0aW9uICh4LCB5KS5cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICogQHJldHVybnMge0NlbGx9XG4gICAgKi9cbiAgICBhdCh4LCB5KSB7XG4gICAgICAgIHJldHVybiBDZWxsLl9fd3JhcCh3YXNtLmJvYXJkX2F0KHRoaXMucHRyLCB4LCB5KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyBhIGJvYXJkIGJ5IHNlcmlhbGl6aW5nIGFzIEpTT04uIE9uIGZhaWx1cmUsIGl0IHJldHVybnMgYE5vbmVgIChgdW5kZWZpbmVkYCBpblxuICAgICogSmF2YVNjcmlwdClcbiAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgKi9cbiAgICBhc19qc29uKCkge1xuICAgICAgICBjb25zdCByZXRwdHIgPSBnbG9iYWxBcmd1bWVudFB0cigpO1xuICAgICAgICB3YXNtLmJvYXJkX2FzX2pzb24ocmV0cHRyLCB0aGlzLnB0cik7XG4gICAgICAgIGNvbnN0IG1lbSA9IGdldFVpbnQzMk1lbW9yeSgpO1xuICAgICAgICBjb25zdCBydXN0cHRyID0gbWVtW3JldHB0ciAvIDRdO1xuICAgICAgICBjb25zdCBydXN0bGVuID0gbWVtW3JldHB0ciAvIDQgKyAxXTtcbiAgICAgICAgaWYgKHJ1c3RwdHIgPT09IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgcmVhbFJldCA9IGdldFN0cmluZ0Zyb21XYXNtKHJ1c3RwdHIsIHJ1c3RsZW4pLnNsaWNlKCk7XG4gICAgICAgIHdhc20uX193YmluZGdlbl9mcmVlKHJ1c3RwdHIsIHJ1c3RsZW4gKiAxKTtcbiAgICAgICAgcmV0dXJuIHJlYWxSZXQ7XG5cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZyZWVDZWxsKHB0cikge1xuXG4gICAgd2FzbS5fX3diZ19jZWxsX2ZyZWUocHRyKTtcbn1cbi8qKlxuKiBSZXByZXNlbnRzIG9uZSBjZWxsIGluIGJvYXJkLiBJbiBjb250cmFzdCB0byBgbGFuZDo6TGFuZGAsIGl0IG9ubHkgY29udGFpbnMgaXRzIGxhbmQga2luZCBhbmRcbiogYWx0aXR1ZGUgaW4gb3JkZXIgdG8gcmVkdWNlIHRvdGFsIG1lbW9yeSBzaXplLlxuKi9cbmV4cG9ydCBjbGFzcyBDZWxsIHtcblxuICAgIHN0YXRpYyBfX3dyYXAocHRyKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUoQ2VsbC5wcm90b3R5cGUpO1xuICAgICAgICBvYmoucHRyID0gcHRyO1xuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgZnJlZSgpIHtcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5wdHI7XG4gICAgICAgIHRoaXMucHRyID0gMDtcbiAgICAgICAgZnJlZUNlbGwocHRyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEtpbmQgZm9yIHRoZSBjZWxsIChTZWEsIEZvcmVzdCwgTW91bnRhaW4sIC4uLilcbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgKi9cbiAgICBnZXQga2luZCgpIHtcbiAgICAgICAgcmV0dXJuIHdhc20uX193YmdfZ2V0X2NlbGxfa2luZCh0aGlzLnB0cik7XG4gICAgfVxuICAgIHNldCBraW5kKGFyZzApIHtcbiAgICAgICAgcmV0dXJuIHdhc20uX193Ymdfc2V0X2NlbGxfa2luZCh0aGlzLnB0ciwgYXJnMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogQWx0aXR1ZGUgb2YgdGhlIGNlbGwgaW4gMC4uOTlcbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgKi9cbiAgICBnZXQgYWx0aXR1ZGUoKSB7XG4gICAgICAgIHJldHVybiB3YXNtLl9fd2JnX2dldF9jZWxsX2FsdGl0dWRlKHRoaXMucHRyKTtcbiAgICB9XG4gICAgc2V0IGFsdGl0dWRlKGFyZzApIHtcbiAgICAgICAgcmV0dXJuIHdhc20uX193Ymdfc2V0X2NlbGxfYWx0aXR1ZGUodGhpcy5wdHIsIGFyZzApO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgY29sb3IgY29kZSBvZiBsYW5kIGFzIGAjcnJnZ2JiYCBmb3JtYXQgc3RyaW5nIGZyb20gbGFuZCBraW5kLlxuICAgICogV2hlbiBubyBjb2xvciBpcyBzZXQsIHJldHVybnMgYE5vbmVgLiBJdCBtZWFucyBgdW5kZWZpbmVkYCBpbiBKYXZhU2NyaXB0IHNpZGUuXG4gICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICovXG4gICAgY29sb3JfY29kZSgpIHtcbiAgICAgICAgY29uc3QgcmV0cHRyID0gZ2xvYmFsQXJndW1lbnRQdHIoKTtcbiAgICAgICAgd2FzbS5jZWxsX2NvbG9yX2NvZGUocmV0cHRyLCB0aGlzLnB0cik7XG4gICAgICAgIGNvbnN0IG1lbSA9IGdldFVpbnQzMk1lbW9yeSgpO1xuICAgICAgICBjb25zdCBydXN0cHRyID0gbWVtW3JldHB0ciAvIDRdO1xuICAgICAgICBjb25zdCBydXN0bGVuID0gbWVtW3JldHB0ciAvIDQgKyAxXTtcbiAgICAgICAgaWYgKHJ1c3RwdHIgPT09IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgcmVhbFJldCA9IGdldFN0cmluZ0Zyb21XYXNtKHJ1c3RwdHIsIHJ1c3RsZW4pLnNsaWNlKCk7XG4gICAgICAgIHdhc20uX193YmluZGdlbl9mcmVlKHJ1c3RwdHIsIHJ1c3RsZW4gKiAxKTtcbiAgICAgICAgcmV0dXJuIHJlYWxSZXQ7XG5cbiAgICB9XG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIFJHQiBjb2xvciBhcyB1MzIuIDB+OCBiaXRzIGZvciBCLCA5fjE2IGJpdHMgZm9yIEcsIDE3fjI0IGJpdHMgZm9yIFIuXG4gICAgKiBXaGVuIG5vIGNvbG9yIGlzIHNldCwgcmV0dXJucyBgTm9uZWAuIEl0IG1lYW5zIGB1bmRlZmluZWRgIGluIEphdmFTY3JpcHQgc2lkZS5cbiAgICAqIEByZXR1cm5zIHtudW1iZXIgfCB1bmRlZmluZWR9XG4gICAgKi9cbiAgICByZ2JfY29sb3IoKSB7XG4gICAgICAgIGNvbnN0IHJldHB0ciA9IGdsb2JhbEFyZ3VtZW50UHRyKCk7XG5cbiAgICAgICAgd2FzbS5jZWxsX3JnYl9jb2xvcihyZXRwdHIsIHRoaXMucHRyKTtcbiAgICAgICAgY29uc3QgcHJlc2VudCA9IGdldFVpbnQzMk1lbW9yeSgpW3JldHB0ciAvIDRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGdldFVpbnQzMk1lbW9yeSgpW3JldHB0ciAvIDQgKyAxXTtcbiAgICAgICAgcmV0dXJuIHByZXNlbnQgPT09IDAgPyB1bmRlZmluZWQgOiB2YWx1ZTtcblxuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgbGVnZW5kIG9mIGxhbmQgYXMgc3RyaW5nIGZyb20gbGFuZCBraW5kLlxuICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAqL1xuICAgIGxlZ2VuZCgpIHtcbiAgICAgICAgY29uc3QgcmV0cHRyID0gZ2xvYmFsQXJndW1lbnRQdHIoKTtcbiAgICAgICAgd2FzbS5jZWxsX2xlZ2VuZChyZXRwdHIsIHRoaXMucHRyKTtcbiAgICAgICAgY29uc3QgbWVtID0gZ2V0VWludDMyTWVtb3J5KCk7XG4gICAgICAgIGNvbnN0IHJ1c3RwdHIgPSBtZW1bcmV0cHRyIC8gNF07XG4gICAgICAgIGNvbnN0IHJ1c3RsZW4gPSBtZW1bcmV0cHRyIC8gNCArIDFdO1xuXG4gICAgICAgIGNvbnN0IHJlYWxSZXQgPSBnZXRTdHJpbmdGcm9tV2FzbShydXN0cHRyLCBydXN0bGVuKS5zbGljZSgpO1xuICAgICAgICB3YXNtLl9fd2JpbmRnZW5fZnJlZShydXN0cHRyLCBydXN0bGVuICogMSk7XG4gICAgICAgIHJldHVybiByZWFsUmV0O1xuXG4gICAgfVxufVxuXG5mdW5jdGlvbiBmcmVlR2VuZXJhdG9yKHB0cikge1xuXG4gICAgd2FzbS5fX3diZ19nZW5lcmF0b3JfZnJlZShwdHIpO1xufVxuLyoqXG4qIFJlcHJlc2VudHMgcmFuZG9tIG1hcCBnZW5lcmF0b3IuIEluIGNvbnRyYXN0IHRvIGBnZW46OlJhbmRvbUJvYXJkR2VuYCwgaXQgb25seSBwcm92aWRlcyBsaW1pdGVkXG4qIGZ1bmN0aW9uYWxpdHkuIEl0IGNhbm5vdCBiZSBpbml0aWFsaXplZCB3aXRoIHNwZWNpZmljIHNlZWQuIEFuZCBtYXAgcmVzb2x1dGlvbiBpcyBhbHdheXMgZGV0ZWN0ZWRcbiogZnJvbSBpdHMgc2l6ZS5cbiovXG5leHBvcnQgY2xhc3MgR2VuZXJhdG9yIHtcblxuICAgIHN0YXRpYyBfX3dyYXAocHRyKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUoR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgICAgIG9iai5wdHIgPSBwdHI7XG5cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBmcmVlKCkge1xuICAgICAgICBjb25zdCBwdHIgPSB0aGlzLnB0cjtcbiAgICAgICAgdGhpcy5wdHIgPSAwO1xuICAgICAgICBmcmVlR2VuZXJhdG9yKHB0cik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDcmVhdGUgYSBuZXcgZ2VuZXJhdG9yIGluc3RhbmNlIGluaXRpYWxpemVkIHdpdGggdGhyZWFkLWRlZmF1bHQgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuXG4gICAgKiBObyBzZWVkYWJsZSBSTkcgaXMgcHJvdmlkZWQgZm9yIFdhc20gaW50ZXJmYWNlIGZvciBub3cuXG4gICAgKiBAcmV0dXJucyB7R2VuZXJhdG9yfVxuICAgICovXG4gICAgc3RhdGljIG5ldygpIHtcbiAgICAgICAgcmV0dXJuIEdlbmVyYXRvci5fX3dyYXAod2FzbS5nZW5lcmF0b3JfbmV3KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEdlbmVyYXRlcyByYW5kb20gbWFwIGJvYXJkIHdpdGggZ2l2ZW4gd2lkdGggYW5kIGhlaWdodC4gUGFyYW1ldGVycyBhcmUgaW4gbnVtYmVyIG9mIGNlbGxzLlxuICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgKiBAcmV0dXJucyB7Qm9hcmR9XG4gICAgKi9cbiAgICBnZW5fYXV0byh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiBCb2FyZC5fX3dyYXAod2FzbS5nZW5lcmF0b3JfZ2VuX2F1dG8odGhpcy5wdHIsIHdpZHRoLCBoZWlnaHQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZW5lcmF0ZXMgcmFuZG9tIG1hcCBib2FyZCB3aXRoIGdpdmVuIHJlc29sdXRpb24sIHdpZHRoIGFuZCBoZWlnaHQuIFdpZHRoIGFuZCBoZWlnaHQgYXJlXG4gICAgKiBpbiBudW1iZXIgb2YgY2VsbHMuXG4gICAgKiBAcGFyYW0ge251bWJlcn0gcmVzXG4gICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAqIEByZXR1cm5zIHtCb2FyZH1cbiAgICAqL1xuICAgIGdlbihyZXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIEJvYXJkLl9fd3JhcCh3YXNtLmdlbmVyYXRvcl9nZW4odGhpcy5wdHIsIHJlcywgd2lkdGgsIGhlaWdodCkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJvcE9iamVjdChpZHgpIHtcbiAgICBpZiAoaWR4IDwgMzYpIHJldHVybjtcbiAgICBoZWFwW2lkeF0gPSBoZWFwX25leHQ7XG4gICAgaGVhcF9uZXh0ID0gaWR4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX193YmluZGdlbl9vYmplY3RfZHJvcF9yZWYoaSkgeyBkcm9wT2JqZWN0KGkpOyB9XG5cbiIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfTtcbndlYnBhY2tFbXB0eUNvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG53ZWJwYWNrRW1wdHlDb250ZXh0LmlkID0gNDY7Il0sInNvdXJjZVJvb3QiOiIifQ==