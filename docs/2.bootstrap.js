(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1:function(t,e,n){"use strict";n.r(e);var r=n(2),i=n(30);class o{constructor(t){this.canvas=document.createElement("canvas"),this.canvas.className="screen",t.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d")}render(t){const e=window.devicePixelRatio||1,n=this.canvas.getBoundingClientRect();this.canvas.width=n.width*e,this.canvas.height=n.height*e,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.beginPath();const r=t.width(),i=t.height(),o=this.canvas.width/r,s=this.canvas.height/i,c=new Map,a=new Map;for(let e=0;e<r;e++)for(let n=0;n<i;n++){const r=t.at(e,n),i=r.kind;let u=c.get(i);if(void 0===u&&void 0!==(u=r.color_code())&&c.set(i,u),this.ctx.fillStyle=u,this.ctx.fillRect(e*o,n*s,o,s),!a.has(i)){const t=r.legend();a.set(i,{text:t,color:u})}}return this.ctx.stroke(),{legends:a}}}var s=n(32);class c{constructor(t){this.canvas=document.createElement("canvas"),this.canvas.className="screen",t.appendChild(this.canvas)}determineCellSize(t,e){const n=e+t,r=(this.canvas.height-200)/n*2,i=this.canvas.width/n*2/Math.sqrt(3);let o=Math.floor(r>i?i:r);return o%2==1&&o--,o>6?o:6}render(t){const e=window.devicePixelRatio||1,n=this.canvas.getBoundingClientRect();this.canvas.width=n.width*e,this.canvas.height=n.height*e;const i=t.width(),o=t.height(),c=this.determineCellSize(i,o),a=new s.Point(this.canvas.width/2,c+198),u=new s.PixelView(this.canvas,a),d=new Map,h=new Map,l=new Map;function f(t,e,n){const r=function(t,e){const n=h.get(t);if(void 0!==n)return n;let r=e.rgb_color();void 0===r&&(r=16777215);const i=(new s.CubeColor).getByHorizontalColor(r);return h.set(t,i),l.set(t,{text:e.legend(),color:e.color_code()}),i}(t,n),i=c+2*e,o=new s.CubeDimension(c,c,i);return new s.Cube(o,r,!1)}function w(t){const e=t.kind,n=t.altitude;if(l.has(e)||l.set(e,{text:t.legend(),color:t.color_code()}),e===r.b.Town||e===r.b.Path)return f(e,n,t);const i=d.get(n);if(void 0!==i)return i;const o=f(e,n,t);return d.set(n,o),o}for(let e=0;e<i;e++)for(let n=0;n<o;n++){const r=w(t.at(e,n)),i=new s.Point3D(e*c,n*c,0);u.renderObject(r,i)}return{legends:l}}}(new class{constructor(){this.generator=r.a.new(),this.currentBoard=null;const t=document.getElementById("dimension-selector"),e=t[t.selectedIndex];this.dim=e.value,t.addEventListener("change",this.onVisualizationChange.bind(this)),this.widthInput=document.getElementById("width-input"),this.heightInput=document.getElementById("height-input"),this.screenRoot=document.getElementById("screen-root"),this.initRenderer(),this.paintButton=document.getElementById("paint-button"),this.paintButton.addEventListener("click",()=>{this.render()}),this.legends=document.getElementById("legends"),this.downloadJSONButton=document.getElementById("download-json-button"),this.downloadJSONButton.addEventListener("click",this.onDownloadJSON.bind(this))}getSize(){const t=parseInt(this.widthInput.value,10),e=parseInt(this.heightInput.value,10);if(!isNaN(t)&&!isNaN(e))return[t,e];if("3d"===this.dim)return[120,120];const n=this.screenRoot.getBoundingClientRect();if(isNaN(t)){if(isNaN(e)){const t=(n.height>n.width?n.height:n.width)/200;return[Math.floor(n.width/t),Math.floor(n.height/t)]}{const t=n.height/e;return[Math.floor(n.width/t),e]}}{const e=n.width/t;return[t,Math.floor(n.height/e)]}}initRenderer(){const t=this.screenRoot.firstChild;switch(null!==t&&this.screenRoot.removeChild(t),this.currentBoard=null,this.dim){case"2d":this.renderer=new o(this.screenRoot);break;case"3d":this.renderer=new c(this.screenRoot);break;default:throw new Error(`Unknown context ${this.dim}`)}}onDownloadJSON(t){if(null===this.currentBoard)return;const e=new Blob([this.currentBoard.as_json()],{type:"text/plain;charset=utf-8"});Object(i.saveAs)(e,"board.json")}onVisualizationChange(t){const e=t.target,n=e[e.selectedIndex].value;this.dim!==n&&(this.dim=n,this.initRenderer(),this.render())}render(){this.paintButton.textContent="Painting...",this.paintButton.classList.add("disabled"),this.downloadJSONButton.classList.add("disabled"),window.setTimeout(()=>{const t=Date.now(),[e,n]=this.getSize(),r=this.generator.gen_auto(e,n),i=this.renderer.render(r);this.legends.innerHTML="";for(const t of i.legends.values()){const e=document.createElement("div");e.className="legend";const n=document.createElement("div");n.className="legend-color",n.style.backgroundColor=t.color||"none",e.appendChild(n);const r=document.createElement("div");r.className="legend-name",r.textContent=t.text,e.appendChild(r),this.legends.appendChild(e)}this.currentBoard=r,this.paintButton.classList.remove("disabled"),this.paintButton.textContent="Generate",this.downloadJSONButton.classList.remove("disabled"),console.log("Consumed:",Date.now()-t)},0)}}).render()},2:function(t,e,n){"use strict";n.d(e,"b",function(){return l}),n.d(e,"g",function(){return g}),n.d(e,"c",function(){return m}),n.d(e,"j",function(){return b}),n.d(e,"d",function(){return B}),n.d(e,"e",function(){return C}),n.d(e,"f",function(){return x}),n.d(e,"i",function(){return y}),n.d(e,"h",function(){return N}),n.d(e,"m",function(){return E}),n.d(e,"k",function(){return R}),n.d(e,"l",function(){return k}),n.d(e,"a",function(){return O}),n.d(e,"n",function(){return S});var r=n(45);let i=new TextDecoder("utf-8"),o=null;function s(){return null!==o&&o.buffer===r.t.buffer||(o=new Uint8Array(r.t.buffer)),o}function c(t,e){return i.decode(s().subarray(t,t+e))}let a=null;function u(){return null===a&&(a=r.i()),a}let d=null;function h(){return null!==d&&d.buffer===r.t.buffer||(d=new Uint32Array(r.t.buffer)),d}Object.freeze({Low:0,Middle:1,High:2});const l=Object.freeze({Sea:0,Mountain:1,Forest:2,Plain:3,Town:4,Top:5,Highland:6,DeepSea:7,Path:8}),f=new Array(32);f.fill(void 0),f.push(void 0,null,!0,!1);let w=f.length;function p(t){w===f.length&&f.push(f.length+1);const e=w;return w=f[e],f[e]=t,e}function g(t,e){let n=c(t,e);return p(new Function(n))}function v(t){return f[t]}function m(t,e){return p(v(t).call(v(e)))}function b(t){return p(v(t).self)}function B(t){return p(v(t).crypto)}function C(t){return p(v(t).getRandomValues)}function _(t,e){return s().subarray(t/1,t/1+e)}function x(t,e,n){let r=_(e,n);v(t).getRandomValues(r)}function y(t,e){let r=c(t,e);return p(n(46)(r))}function N(t,e,n){let r=_(e,n);v(t).randomFillSync(r)}function E(t){var e;(e=t)<36||(f[e]=w,w=e)}function R(t){return void 0===v(t)?1:0}function k(t,e){return v(t)===v(e)?1:0}class O{static __wrap(t){const e=Object.create(O.prototype);return e.ptr=t,e}free(){const t=this.ptr;this.ptr=0,function(t){r.c(t)}(t)}static new(){return O.__wrap(r.s())}gen_auto(t,e){return I.__wrap(r.r(this.ptr,t,e))}gen(t,e,n){return I.__wrap(r.q(this.ptr,t,e,n))}}class I{static __wrap(t){const e=Object.create(I.prototype);return e.ptr=t,e}free(){const t=this.ptr;this.ptr=0,function(t){r.a(t)}(t)}width(){return r.m(this.ptr)}height(){return r.l(this.ptr)}at(t,e){return M.__wrap(r.k(this.ptr,t,e))}as_json(){const t=u();r.j(t,this.ptr);const e=h(),n=e[t/4],i=e[t/4+1];if(0===n)return;const o=c(n,i).slice();return r.h(n,1*i),o}}class M{static __wrap(t){const e=Object.create(M.prototype);return e.ptr=t,e}free(){const t=this.ptr;this.ptr=0,function(t){r.b(t)}(t)}get kind(){return r.e(this.ptr)}set kind(t){return r.g(this.ptr,t)}get altitude(){return r.d(this.ptr)}set altitude(t){return r.f(this.ptr,t)}color_code(){const t=u();r.n(t,this.ptr);const e=h(),n=e[t/4],i=e[t/4+1];if(0===n)return;const o=c(n,i).slice();return r.h(n,1*i),o}rgb_color(){const t=u();r.p(t,this.ptr);const e=h()[t/4],n=h()[t/4+1];return 0===e?void 0:n}legend(){const t=u();r.o(t,this.ptr);const e=h(),n=e[t/4],i=e[t/4+1],o=c(n,i).slice();return r.h(n,1*i),o}}function S(t,e){throw new Error(c(t,e))}},45:function(t,e,n){"use strict";var r=n.w[t.i];t.exports=r;n(2);r.u()},46:function(t,e){function n(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}n.keys=function(){return[]},n.resolve=n,t.exports=n,n.id=46}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,