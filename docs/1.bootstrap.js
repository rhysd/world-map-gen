(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,,,function(i,t,n){"use strict";var s,e;(e=(s=function(i,t,n,s,e,o){this.initialize(i,t,n,s,e,o)}).prototype).a=1,e.b=0,e.c=0,e.d=1,e.tx=0,e.ty=0,e.initialize=function(i,t,n,s,e,o){return this.a=void 0===i?1:i,this.b=t||0,this.c=n||0,this.d=void 0===s?1:s,this.tx=e||0,this.ty=o||0,this},e.toString=function(){return"[Matrix]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(23);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype).imageData=null,e.canvas=null,e.context=null,e.initialize=function(i,t,n){if(void 0===i||void 0===t)throw new Error("BitmapData width or height is missing");return this.canvas=n?o.getDefaultCanvas():o.getNewCanvas(),this.canvas.setAttribute("width",i),this.canvas.setAttribute("height",t),this.context=this.canvas.getContext("2d"),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.mozImageSmoothingEnabled=!1,this.context.msImageSmoothingEnabled=!1,this.context.imageSmoothingEnabled=!1,this.imageData=this.context.createImageData(i,t),this},e.setPixel=function(i,t,n){var s=4*(t*this.imageData.width+i);this.setPixelByIndex(s,n)},e.setPixelByIndex=function(i,t){var n=this.imageData.data;n[i]=t>>>16&255,n[i+1]=t>>>8&255,n[i+2]=t>>>0&255,n[i+3]=t>>>24&255},e.checkPixelAvailable=function(i,t){var n=4*(t*this.imageData.width+i);return 0===this.imageData.data[n+3]},e.floodFill=function(i,t,n){if(0!=(n>>>24&255)){var s,e,o,a,h,r=i,l=t,c=[],u=[],x=[],d=this.imageData.width,m=this.imageData.height;if(!(r<0||l<0||r>=d||l>=m)){if(!this.checkPixelAvailable(r,l))throw new Error("Start point for flood fill is already filled");for(s=r;s>=0;s-=1){for(e=l;e>=0;e-=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s+1,e-1))for(e=this.checkPixelAvailable(s,e-1)?e-1:this.checkPixelAvailable(s+1,e-2)?e-2:-1;e>=0&&this.checkPixelAvailable(s,e);e-=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(e=l;e<m;e+=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s+1,e+1))for(e=this.checkPixelAvailable(s,e+1)?e+1:this.checkPixelAvailable(s+1,e+2)?e+2:m;e<m&&this.checkPixelAvailable(s,e);e+=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(s===r&&(x=u.concat()),o=!1,a=0;a<x.length;a+=1){for(h=0;h<x.length;h+=1)if(u[h]===x[a]){o=!0,l=x[a];break}if(o)break}if(!o)break;x=u.concat(),u=[]}for(l=t,x=[],u=[],s=r=i;s<d;s+=1){for(e=l;e>=0;e-=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s-1,e-1))for(e=this.checkPixelAvailable(s,e-1)?e-1:this.checkPixelAvailable(s-1,e-2)?e-2:-1;e>=0&&this.checkPixelAvailable(s,e);e-=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(e=l;e<m;e+=1){if(!this.checkPixelAvailable(s,e)){if(e===l&&this.checkPixelAvailable(s-1,e+1))for(e=this.checkPixelAvailable(s,e+1)?e+1:this.checkPixelAvailable(s-1,e+2)?e+2:m;e<m&&this.checkPixelAvailable(s,e);e+=1)c.push(4*(e*d+s)),u.push(e);break}c.push(4*(e*d+s)),u.push(e)}for(s===r&&(x=u.concat()),o=!1,a=0;a<x.length;a+=1){for(h=0;h<x.length;h+=1)if(u[h]===x[a]){o=!0,l=x[a];break}if(o)break}if(!o)break;x=u.concat(),u=[]}for(a=0;a<c.length;a+=1)this.setPixelByIndex(c[a],n)}}},e.toString=function(){return"[BitmapData]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=(s=function(){this.initialize()}).prototype).canvas=null,e.w=null,e.h=null,e.dimension=null,e.color=null,e.border=null,e.bitmapData=null,e.useDefaultCanvas=null,e.matrix=null,e.initialize=function(){return this},e.toString=function(){return"[AbstractPrimitive]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=(s=function(){this.initialize()}).prototype).xAxis=null,e.yAxis=null,e.zAxis=null,e.tall=!1,e.initialize=function(){return this},e.toString=function(){return"[AbstractDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t){return this.border=a.get32(void 0===i?8882055:i),this.inner=a.get32(void 0===t?15658734:t),this},e.getByInnerColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[SideColor]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("ColorGeom is a static Class, cannot be instanced.")}).get32=function(i){return i<4278190080?i+4278190080:i},e.applyBrightness=function(i,t,n){var s,e,o,a,h,r,l;return s=i>>>24&255,h=(313524*(e=i>>>16&255)>>20)+(615514*(o=i>>>8&255)>>20)+(119538*(a=255&i)>>20),l=-(155189*e>>20)-(303038*o>>20)+(458227*a>>20),r=(644874*e>>20)-(540016*o>>20)-(104857*a>>20),n?h=60+Math.pow(h,1.2):h+=t,e=h+(1195376*r>>20),o=h-(408944*l>>20)-(608174*r>>20),a=h+(2128609*l>>20),s<<24|(e=Math.max(0,Math.min(e,255)))<<16|(o=Math.max(0,Math.min(o,255)))<<8|(a=Math.max(0,Math.min(a,255)))},e.toString=function(){return"[ColorGeom]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=(s=function(){this.initialize()}).prototype).inner=null,e.border=null,e.borderHighlight=null,e.left=null,e.right=null,e.horizontal=null,e.leftSlope=null,e.rightSlope=null,e.initialize=function(){return this},e.toString=function(){return"[AbstractColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(22);(e=(s=function(i,t){this.initialize(i,t)}).prototype).x=null,e.y=null,e.canvas=null,e.initialize=function(i,t){if(!i)throw new Error("Primitive is not defined");var n=t||new o;return this.canvas=i.canvas,this.x=i.matrix.tx+n.x-n.y,this.y=i.matrix.ty+Math.floor(n.x/2+n.y/2)-n.z,this},e.toString=function(){return"[PixelObject]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=t||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("xAxis and yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[SlopeDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t,n,s,e,o){this.initialize(i,t,n,s,e,o)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,n,s,e,o){return this.border=a.get32(void 0===i?9737880:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===n?13225936:n),this.right=a.get32(void 0===s?15132905:s),this.leftSlope=a.get32(void 0===e?14408667:e),this.rightSlope=a.get32(void 0===o?14408667:o),this},e.getByHorizontalColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,2*this.BRIGHTNESS_GAIN),a.applyBrightness(i,this.BRIGHTNESS_GAIN),a.applyBrightness(i,1.5*this.BRIGHTNESS_GAIN),a.applyBrightness(i,.5*this.BRIGHTNESS_GAIN))},e.toString=function(){return"[SlopeColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.zAxis=t||30,this.xAxis%2==1)throw new Error("xAxis must be even number");if(this.xAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[SideXDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.yAxis=i||30,this.zAxis=t||30,this.yAxis%2==1)throw new Error("yAxis must be even number");if(this.yAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[SideYDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i){return this.border=a.get32(void 0===i?8882055:i),this},e.toString=function(){return"[LineColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=t||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("x,yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[BrickDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=(s=function(i,t){this.initialize(i,t)}).prototype).x=0,e.y=0,e.initialize=function(i,t){return this.x=void 0===i?0:i,this.y=void 0===t?0:t,this},e.toString=function(){return"[Point x : "+this.x+", y : "+this.y+"]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(13),a=n(7),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis,this.h=this.dimension.zAxis+this.dimension.xAxis/2,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o;for(0,i=this.dimension.zAxis,t=this.dimension.xAxis-1,n=this.h-this.dimension.zAxis-1,o=this.border?this.color.border:this.color.inner,s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(0+s,i+Math.floor(s/2),o),this.bitmapData.setPixel(t-s,n-Math.floor(s/2),o);for(e=0;e<this.dimension.zAxis;e+=1)this.bitmapData.setPixel(0,i-e,o),this.bitmapData.setPixel(t,n+e,o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[SideX]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(14),a=n(7),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.yAxis,this.h=this.dimension.zAxis+this.dimension.yAxis/2,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o;for(0,i=this.h-this.dimension.zAxis-1,t=this.dimension.yAxis-1,n=this.dimension.zAxis,o=this.border?this.color.border:this.color.inner,s=0;s<this.dimension.yAxis;s+=1)this.bitmapData.setPixel(0+s,i-Math.floor(s/2),o),this.bitmapData.setPixel(t-s,n+Math.floor(s/2),o);for(e=0;e<this.dimension.zAxis;e+=1)this.bitmapData.setPixel(0,i+e,o),this.bitmapData.setPixel(t,n-e,o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[SideY]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new o).initialize=function(i,t,n){if(this.xAxis=i||30,this.yAxis=t||30,this.zAxis=n||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("x,yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[CubeDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t,n,s,e){this.initialize(i,t,n,s,e)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,n,s,e){return this.border=a.get32(void 0===i?8882055:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===n?13225936:n),this.right=a.get32(void 0===s?14935011:s),this.horizontal=a.get32(void 0===e?15658992:e),this},e.getByHorizontalColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,2*this.BRIGHTNESS_GAIN),a.applyBrightness(i,this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[CubeColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(17);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype).x=0,e.y=0,e.z=0,e.initialize=function(i,t,n){return this.x=void 0===i?0:i,this.y=void 0===t?0:t,this.z=void 0===n?0:n,this},e.toGlobalCoordinates=function(i){var t=new o(this.x-this.y,Math.floor(this.x/2+this.y/2)-this.z);return void 0!==i&&(t.x=t.x+i.x,t.y=t.y+i.y),t},e.toString=function(){return"[Point3D x : "+this.x+", y : "+this.y+", z: "+this.z+"]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("CanvasManager is a static Class, cannot be instanced.")}).defaultCanvas=null,e.getDefaultCanvas=function(){return e.defaultCanvas=e.defaultCanvas||document.createElement("canvas"),e.defaultCanvas},e.getNewCanvas=function(){return document.createElement("canvas")},e.toString=function(){return"[CanvasManager]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(16),a=n(7),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=(this.dimension.xAxis+this.dimension.yAxis)/2,this.w-=2,this.h-=1,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o;for(i=this.dimension.yAxis-2,0,t=this.dimension.xAxis-1,n=this.h-1,o=this.border?this.color.border:this.color.inner,s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(i+s,0+Math.floor(s/2),o),this.bitmapData.setPixel(t-s,n-Math.floor(s/2),o);for(e=0;e<this.dimension.yAxis;e+=1)this.bitmapData.setPixel(i+1-e,0+Math.floor(e/2),o),this.bitmapData.setPixel(t-1+e,n-Math.floor(e/2),o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[Brick]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=i||30,this.tall=t||!1,this.xAxis%2==1)throw new Error("axis must be even number");if(this.xAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[PyramidDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(9),a=n(8);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,n,s){return this.border=a.get32(void 0===i?9737880:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===n?15132905:n),this.right=a.get32(void 0===s?15658992:s),this},e.getByRightColor=function(i){return new s(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[PyramidColor]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.xAxis=i||30,this.xAxis%2==1)throw new Error("xAxis must be even number");if(this.xAxis<2)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineXDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.yAxis=i||30,this.yAxis%2==1)throw new Error("yAxis must be even number");if(this.yAxis<2)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineYDimension]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(6);(e=(s=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.zAxis=i||30,this.zAxis<=0)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineZDimension]"},i.exports=s},function(i,t,n){(function(n){var s,e,o;e=[],void 0===(o="function"==typeof(s=function(){"use strict";function t(i,t,n){var s=new XMLHttpRequest;s.open("GET",i),s.responseType="blob",s.onload=function(){a(s.response,t,n)},s.onerror=function(){console.error("could not download file")},s.send()}function s(i){var t=new XMLHttpRequest;t.open("HEAD",i,!1);try{t.send()}catch(i){}return 200<=t.status&&299>=t.status}function e(i){try{i.dispatchEvent(new MouseEvent("click"))}catch(n){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),i.dispatchEvent(t)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n&&n.global===n?n:void 0,a=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype?function(i,n,a){var h=o.URL||o.webkitURL,r=document.createElement("a");n=n||i.name||"download",r.download=n,r.rel="noopener","string"==typeof i?(r.href=i,r.origin===location.origin?e(r):s(r.href)?t(i,n,a):e(r,r.target="_blank")):(r.href=h.createObjectURL(i),setTimeout(function(){h.revokeObjectURL(r.href)},4e4),setTimeout(function(){e(r)},0))}:"msSaveOrOpenBlob"in navigator?function(i,n,o){if(n=n||i.name||"download","string"!=typeof i)navigator.msSaveOrOpenBlob(function(i,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(i.type)?new Blob(["\ufeff",i],{type:i.type}):i}(i,o),n);else if(s(i))t(i,n,o);else{var a=document.createElement("a");a.href=i,a.target="_blank",setTimeout(function(){e(a)})}}:function(i,n,s,e){if((e=e||open("","_blank"))&&(e.document.title=e.document.body.innerText="downloading..."),"string"==typeof i)return t(i,n,s);var a="application/octet-stream"===i.type,h=/constructor/i.test(o.HTMLElement)||o.safari,r=/CriOS\/[\d]+/.test(navigator.userAgent);if((r||a&&h)&&"object"==typeof FileReader){var l=new FileReader;l.onloadend=function(){var i=l.result;i=r?i:i.replace(/^data:[^;]*;/,"data:attachment/file;"),e?e.location.href=i:location=i,e=null},l.readAsDataURL(i)}else{var c=o.URL||o.webkitURL,u=c.createObjectURL(i);e?e.location=u:location.href=u,e=null,setTimeout(function(){c.revokeObjectURL(u)},4e4)}});o.saveAs=a.saveAs=a,i.exports=a})?s.apply(t,e):s)||(i.exports=o)}).call(this,n(31))},function(i,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(i){"object"==typeof window&&(n=window)}i.exports=n},function(i,t,n){"use strict";var s={};s.Cube=n(33),s.Brick=n(24),s.Pyramid=n(34),s.LineX=n(35),s.LineY=n(36),s.LineZ=n(37),s.SideX=n(18),s.SideY=n(19),s.SlopeEast=n(38),s.SlopeNorth=n(39),s.SlopeSouth=n(40),s.SlopeWest=n(41),s.ColorPattern=n(42),s.ColorGeom=n(8),s.CanvasManager=n(23),s.CanvasTool=n(43),s.Matrix=n(3),s.Point=n(17),s.Point3D=n(22),s.PixelView=n(44),s.PixelObject=n(10),s.BitmapData=n(4),s.BrickDimension=n(16),s.CubeDimension=n(20),s.PyramidDimension=n(25),s.LineXDimension=n(27),s.LineYDimension=n(28),s.LineZDimension=n(29),s.SideXDimension=n(13),s.SideYDimension=n(14),s.SlopeDimension=n(11),s.LineColor=n(15),s.CubeColor=n(21),s.PyramidColor=n(26),s.SideColor=n(7),s.SlopeColor=n(12),window.obelisk=s,i.exports=s},function(i,t,n){"use strict";var s,e,o=n(20),a=n(16),h=n(13),r=n(14),l=n(21),c=n(7),u=n(3),x=n(10),d=n(4),m=n(5),f=n(24),p=n(18),v=n(19);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new m).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new l:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.dimension.zAxis+(this.dimension.xAxis+this.dimension.yAxis)/2,this.w-=2,this.h-=1,this.matrix=new u,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new d(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,l,u,m,b,A,w,g;if(i=new f(new a(this.dimension.xAxis,this.dimension.yAxis),new c(this.color.border,this.color.horizontal),this.border),t=new p(new h(this.dimension.xAxis,this.dimension.zAxis),new c(this.color.border,this.color.left),this.border),n=new v(new r(this.dimension.yAxis,this.dimension.zAxis),new c(this.color.border,this.color.right),this.border),s=new x(i),e=new x(t),o=new x(n),(l=this.bitmapData.context).drawImage(s.canvas,s.x+this.dimension.yAxis-2,s.y),l.drawImage(e.canvas,e.x,e.y+this.dimension.zAxis+this.dimension.yAxis/2-1),l.drawImage(o.canvas,o.x+this.w-2,e.y+this.dimension.zAxis+this.dimension.xAxis/2-1),u=new d(this.w,this.h),this.border){for(m=this.dimension.xAxis-2,b=(this.dimension.xAxis+this.dimension.yAxis)/2-2,A=0;A<this.dimension.xAxis-2;A+=1)u.setPixel(m+1-A,b-Math.floor(A/2),this.color.borderHighlight);for(w=0;w<this.dimension.yAxis-2;w+=1)u.setPixel(m+w,b-Math.floor(w/2),this.color.borderHighlight);for(g=0;g<this.dimension.zAxis;g+=1)u.setPixel(m,b+g,this.color.borderHighlight)}else for(A=0;A<this.dimension.zAxis;A+=1)u.setPixel(this.dimension.xAxis-2,(this.dimension.xAxis+this.dimension.yAxis)/2-1+A,this.color.left);u.context.putImageData(u.imageData,0,0),l.drawImage(u.canvas,0,0)},e.toString=function(){return"[Cube]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(25),a=n(26),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).hSize=null,e.hOffset=null,e.initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t,this.hSize=this.dimension.tall?2*this.dimension.xAxis:this.dimension.xAxis,this.hOffset=this.dimension.tall?-3:-2},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.hSize+this.dimension.xAxis/2,this.w-=2,this.h+=this.hOffset,this.matrix=new h,this.matrix.tx=2-this.dimension.xAxis,this.matrix.ty=-this.hSize/2+2-(this.dimension.tall?this.dimension.xAxis/2:1)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a,h,r,l;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,n=this.border?this.color.borderHighlight:i,o=0;o<this.hSize+this.dimension.xAxis/2-4;o+=1)this.bitmapData.setPixel(this.dimension.xAxis-2,o+3+this.hOffset,n);for(s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(s,this.hSize+Math.floor(s/2)+this.hOffset,i);for(e=0;e<this.dimension.xAxis;e+=1)this.bitmapData.setPixel(e+this.dimension.xAxis-2,this.hSize+this.dimension.xAxis/2-Math.floor(e/2)-1+this.hOffset,t);if(this.dimension.tall){for(r=0;r<this.hSize-2;r+=1)this.bitmapData.setPixel(Math.floor(r/2),this.hSize-r+this.hOffset,i);for(l=2;l<this.hSize;l+=1)this.bitmapData.setPixel(Math.floor(l/2)+this.dimension.xAxis-2,l+1+this.hOffset,t)}else{for(a=0;a<this.hSize;a+=1)this.bitmapData.setPixel(a,this.hSize-a+this.hOffset,i);for(h=0;h<this.hSize;h+=1)this.bitmapData.setPixel(h+this.hSize-2,h+1+this.hOffset,t)}this.border||this.bitmapData.setPixel(this.dimension.xAxis-2,this.hSize+this.dimension.xAxis/2-1+this.hOffset,i),this.bitmapData.floodFill(this.dimension.xAxis-1,this.hSize+Math.floor((this.dimension.xAxis-1)/2)+this.hOffset-1,this.color.right),this.bitmapData.floodFill(this.dimension.xAxis-3,this.hSize+Math.floor((this.dimension.xAxis-1)/2)+this.hOffset-2,this.color.left)},e.toString=function(){return"[Pyramid]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(27),a=n(15),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new l).initialize=function(i,t,n){return this.initRender(i,t,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n){this.useDefaultCanvas=n||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis,this.h=this.dimension.xAxis/2,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t;for(0,0,t=this.color.border,i=0;i<this.dimension.xAxis;i+=1)this.bitmapData.setPixel(0+i,0+Math.floor(i/2),t)},e.toString=function(){return"[LineX]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(28),a=n(15),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new l).initialize=function(i,t,n){return this.initRender(i,t,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n){this.useDefaultCanvas=n||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.yAxis,this.h=this.dimension.yAxis/2,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n;for(i=this.dimension.yAxis-1,0,n=this.color.border,t=0;t<this.dimension.yAxis;t+=1)console.log(t),this.bitmapData.setPixel(i-t,0+Math.floor(t/2),n)},e.toString=function(){return"[LineY]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(29),a=n(15),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n){this.initialize(i,t,n)}).prototype=new l).initialize=function(i,t,n){return this.initRender(i,t,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n){this.useDefaultCanvas=n||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=1,this.h=this.dimension.zAxis,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=1-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t;for(0,0,t=this.color.border,i=0;i<this.dimension.zAxis;i+=1)this.bitmapData.setPixel(0,0+i,t)},e.toString=function(){return"[LineZ]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=2*this.dimension.xAxis+this.dimension.yAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(3*this.dimension.xAxis/2-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.rightSlope,s=0;s<this.dimension.yAxis;s+=1)this.bitmapData.setPixel(s,this.dimension.yAxis/2-Math.floor(s/2)-1,t),this.bitmapData.setPixel(s+this.dimension.xAxis-2,this.h-Math.floor(s/2)-1,t);for(n=0;n<this.dimension.xAxis;n+=1)this.bitmapData.setPixel(n,this.h-this.dimension.xAxis/2+Math.floor(n/2),i);for(e=this.dimension.yAxis/2-1;e<this.h-this.dimension.xAxis/2;e+=1)this.bitmapData.setPixel(0,e,i);for(o=0;o<2*this.dimension.xAxis-2;o+=1)this.bitmapData.setPixel(this.dimension.yAxis-1+Math.floor(o/2),o,t),this.bitmapData.setPixel(1+Math.floor(o/2),this.dimension.yAxis/2+o-1,t);if(this.bitmapData.floodFill(this.dimension.yAxis-2,1,this.color.rightSlope),this.bitmapData.floodFill(this.dimension.xAxis-3,this.h-3,this.color.left),this.bitmapData.setPixel(this.dimension.xAxis-2,this.h-2,this.color.left),this.border)for(a=1;a<2*this.dimension.xAxis-3;a+=1)this.bitmapData.setPixel(1+Math.floor(a/2),this.dimension.yAxis/2+a-1,this.color.borderHighlight)},e.toString=function(){return"[SlopeEast]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(3),r=n(4),l=n(5),c=n(18),u=n(13),x=n(7),d=n(10);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=3*this.dimension.yAxis/2+this.dimension.xAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(this.dimension.yAxis-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a,h,l,m;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,n=this.border?this.color.borderHighlight:this.color.left,s=new c(new u(this.dimension.xAxis,this.h-this.dimension.xAxis/2),new x(i,this.color.left)),e=new d(s),(o=this.bitmapData.context).drawImage(e.canvas,e.x,e.y+this.h-this.dimension.xAxis/2),a=new r(this.w,this.h),h=this.h-3*this.dimension.yAxis/2+2;h<this.h;h+=1)a.setPixel(this.dimension.xAxis-1,h,t);for(l=1;l<this.dimension.yAxis;l+=1)a.setPixel(this.dimension.xAxis+l-2,this.h-Math.floor(l/2)-1,t),a.setPixel(this.dimension.xAxis+l-2,this.dimension.xAxis/2-2+l,t);for(a.floodFill(this.dimension.xAxis+1,this.h-3,this.color.right),m=this.dimension.xAxis/2;m<this.h-1;m+=1)a.setPixel(this.dimension.xAxis-1,m,this.color.right),a.setPixel(this.dimension.xAxis-2,m,n);a.context.putImageData(a.imageData,0,0),o.drawImage(a.canvas,0,0)},e.toString=function(){return"[SlopeNorth]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(3),r=n(4),l=n(5);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.dimension.xAxis/2+2*this.dimension.yAxis,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(3*this.dimension.yAxis/2-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a;for(i=this.border?this.color.border:this.color.leftSlope,t=this.border?this.color.border:this.color.right,s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(s,2*this.dimension.yAxis+Math.floor(s/2)-3,i),this.bitmapData.setPixel(s+this.dimension.yAxis-2,Math.floor(s/2),i);for(n=0;n<this.dimension.yAxis;n+=1)this.bitmapData.setPixel(this.dimension.xAxis-2+n,this.h-Math.floor(n/2)-1,t);for(e=this.dimension.xAxis/2-1;e<this.h-this.dimension.yAxis/2;e+=1)this.bitmapData.setPixel(this.w-1,e,t);for(o=0;o<2*this.dimension.yAxis-2;o+=1)this.bitmapData.setPixel(Math.floor(o/2),2*this.dimension.yAxis-o-3,i),this.bitmapData.setPixel(this.dimension.xAxis-2+Math.floor(o/2),this.h-o-1,i);if(this.bitmapData.floodFill(this.dimension.yAxis-1,1,this.color.leftSlope),this.bitmapData.floodFill(this.dimension.xAxis,this.h-3,this.color.right),this.bitmapData.setPixel(this.dimension.xAxis-1,this.h-2,this.color.right),this.border)for(a=1;a<2*this.dimension.yAxis-3;a+=1)this.bitmapData.setPixel(this.dimension.xAxis-2+Math.floor(a/2),this.h-a-1,this.color.borderHighlight)},e.toString=function(){return"[SlopeSouth]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(11),a=n(12),h=n(3),r=n(4),l=n(5),c=n(19),u=n(14),x=n(7),d=n(10);(e=(s=function(i,t,n,s){this.initialize(i,t,n,s)}).prototype=new l).initialize=function(i,t,n,s){return this.initRender(i,t,n,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,n,s){this.useDefaultCanvas=s||!1,this.border=n||void 0===n,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=3*this.dimension.xAxis/2+this.dimension.yAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(this.dimension.xAxis-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,n,s,e,o,a,h,l,m;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,n=this.border?this.color.borderHighlight:this.color.left,s=new c(new u(this.dimension.yAxis,this.h-this.dimension.yAxis/2),new x(t,this.color.right)),e=new d(s),(o=this.bitmapData.context).drawImage(e.canvas,e.x+this.w-2,e.y+this.h-this.dimension.yAxis/2),a=new r(this.w,this.h),h=this.h-3*this.dimension.xAxis/2+2;h<this.h;h+=1)a.setPixel(this.dimension.xAxis-2,h,i);for(l=0;l<this.dimension.xAxis-1;l+=1)a.setPixel(l,this.dimension.xAxis+this.dimension.yAxis/2-3+Math.floor(l/2),i),a.setPixel(l,this.dimension.xAxis+this.dimension.yAxis/2-3-l,i);for(a.floodFill(this.dimension.xAxis-3,this.h-3,this.color.left),m=this.dimension.yAxis/2;m<this.h-1;m+=1)a.setPixel(this.dimension.xAxis-2,m,n);a.context.putImageData(a.imageData,0,0),o.drawImage(a.canvas,0,0)},e.toString=function(){return"[SlopeWest]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("ColorPattern is a static Class, cannot be instanced.")}).GRASS_GREEN=13434624,e.YELLOW=16776960,e.WINE_RED=16711833,e.PINK=16743615,e.PURPLE=13369599,e.BLUE=52479,e.GRAY=15658734,e.BLACK=6710886,e.FINE_COLORS=[e.GRASS_GREEN,e.YELLOW,e.WINE_RED,e.PINK,e.PURPLE,e.BLUE,e.GRAY,e.BLACK],e.getRandomComfortableColor=function(){return e.FINE_COLORS[Math.floor(Math.random()*e.FINE_COLORS.length)]},e.toString=function(){return"[ColorPattern]"},i.exports=s},function(i,t,n){"use strict";var s,e;(e=s=function(){throw new Error("CanvasTool is a static Class, cannot be instanced.")}).getPixel=function(i,t,n){var s,e;return(s=i.data)[e=4*(n*i.width+t)]<<16|s[e+1]<<8|s[e+2]},e.toString=function(){return"[CanvasTool]"},i.exports=s},function(i,t,n){"use strict";var s,e,o=n(17),a=n(10);(e=(s=function(i,t){this.initialize(i,t)}).prototype).canvas=null,e.context=null,e.point=null,e.initialize=function(i,t){if(!i)throw new Error("Canvas is not defined");try{i instanceof jQuery&&(i=i.get(0))}catch(i){}return this.canvas=i,this.context=this.canvas.getContext("2d"),this.context.mozImageSmoothingEnabled=!1,this.context.msImageSmoothingEnabled=!1,this.context.imageSmoothingEnabled=!1,this.point=t||new o(0,0),this},e.renderObject=function(i,t){var n=new a(i,t);this.context.drawImage(n.canvas,this.point.x+n.x,this.point.y+n.y)},e.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.toString=function(){return"[PixelView]"},i.exports=s}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,