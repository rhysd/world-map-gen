!function(e){function n(n){for(var t,o,i=n[0],u=n[1],a=0,c=[];a<i.length;a++)o=i[a],r[o]&&c.push(r[o][0]),r[o]=0;for(t in u)Object.prototype.hasOwnProperty.call(u,t)&&(e[t]=u[t]);for(s&&s(n);c.length;)c.shift()()}var t={},r={0:0};var o={};var i={45:function(){return{"./world_map_gen":{__wbindgen_object_drop_ref:function(e){return t[2].exports.m(e)},__wbg_getRandomValues_a3a3c2dd5494fd39:function(e,n,r){return t[2].exports.f(e,n,r)},__wbg_randomFillSync_f9cb7531d9c0b144:function(e,n,r){return t[2].exports.h(e,n,r)},__wbg_new_bc890df3e5e6a91d:function(e,n){return t[2].exports.g(e,n)},__wbg_call_e15b6aa0c6d3c93f:function(e,n){return t[2].exports.c(e,n)},__wbindgen_jsval_eq:function(e,n){return t[2].exports.l(e,n)},__wbg_self_95ad3f1cddd5accc:function(e){return t[2].exports.j(e)},__wbg_require_36a895f0a4ea0529:function(e,n){return t[2].exports.i(e,n)},__wbg_crypto_c93cc5a147e35422:function(e){return t[2].exports.d(e)},__wbindgen_is_undefined:function(e){return t[2].exports.k(e)},__wbg_getRandomValues_58b46416ea7a33a2:function(e){return t[2].exports.e(e)},__wbindgen_throw:function(e,n){return t[2].exports.n(e,n)}}}}};function u(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,u),r.l=!0,r.exports}u.e=function(e){var n=[],t=r[e];if(0!==t)if(t)n.push(t[2]);else{var a=new Promise(function(n,o){t=r[e]=[n,o]});n.push(t[2]=a);var c,f=document.createElement("script");f.charset="utf-8",f.timeout=120,u.nc&&f.setAttribute("nonce",u.nc),f.src=function(e){return u.p+""+e+".bootstrap.js"}(e),c=function(n){f.onerror=f.onload=null,clearTimeout(s);var t=r[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src,u=new Error("Loading chunk "+e+" failed.\n("+o+": "+i+")");u.type=o,u.request=i,t[1](u)}r[e]=void 0}};var s=setTimeout(function(){c({type:"timeout",target:f})},12e4);f.onerror=f.onload=c,document.head.appendChild(f)}return({2:[45]}[e]||[]).forEach(function(e){var t=o[e];if(t)n.push(t);else{var r,a=i[e](),c=fetch(u.p+""+{45:"dd9ca7243297f451474c"}[e]+".module.wasm");if(a instanceof Promise&&"function"==typeof WebAssembly.compileStreaming)r=Promise.all([WebAssembly.compileStreaming(c),a]).then(function(e){return WebAssembly.instantiate(e[0],e[1])});else if("function"==typeof WebAssembly.instantiateStreaming)r=WebAssembly.instantiateStreaming(c,a);else{r=c.then(function(e){return e.arrayBuffer()}).then(function(e){return WebAssembly.instantiate(e,a)})}n.push(o[e]=r.then(function(n){return u.w[e]=(n.instance||n).exports}))}}),Promise.all(n)},u.m=e,u.c=t,u.d=function(e,n,t){u.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},u.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.t=function(e,n){if(1&n&&(e=u(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(u.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)u.d(t,r,function(n){return e[n]}.bind(null,r));return t},u.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(n,"a",n),n},u.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},u.p="",u.oe=function(e){throw console.error(e),e},u.w={};var a=window.webpackJsonp=window.webpackJsonp||[],c=a.push.bind(a);a.push=n,a=a.slice();for(var f=0;f<a.length;f++)n(a[f]);var s=c;u(u.s=0)}([function(e,n,t){Promise.all([t.e(1),t.e(2)]).then(t.bind(null,1)).catch(e=>console.error("Error importing `index.js`:",e))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,