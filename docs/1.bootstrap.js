(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,,,function(i,t,s){"use strict";var n,e;(e=(n=function(i,t,s,n,e,o){this.initialize(i,t,s,n,e,o)}).prototype).a=1,e.b=0,e.c=0,e.d=1,e.tx=0,e.ty=0,e.initialize=function(i,t,s,n,e,o){return this.a=void 0===i?1:i,this.b=t||0,this.c=s||0,this.d=void 0===n?1:n,this.tx=e||0,this.ty=o||0,this},e.toString=function(){return"[Matrix]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(23);(e=(n=function(i,t,s){this.initialize(i,t,s)}).prototype).imageData=null,e.canvas=null,e.context=null,e.initialize=function(i,t,s){if(void 0===i||void 0===t)throw new Error("BitmapData width or height is missing");return this.canvas=s?o.getDefaultCanvas():o.getNewCanvas(),this.canvas.setAttribute("width",i),this.canvas.setAttribute("height",t),this.context=this.canvas.getContext("2d"),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.mozImageSmoothingEnabled=!1,this.context.msImageSmoothingEnabled=!1,this.context.imageSmoothingEnabled=!1,this.imageData=this.context.createImageData(i,t),this},e.setPixel=function(i,t,s){var n=4*(t*this.imageData.width+i);this.setPixelByIndex(n,s)},e.setPixelByIndex=function(i,t){var s=this.imageData.data;s[i]=t>>>16&255,s[i+1]=t>>>8&255,s[i+2]=t>>>0&255,s[i+3]=t>>>24&255},e.checkPixelAvailable=function(i,t){var s=4*(t*this.imageData.width+i);return 0===this.imageData.data[s+3]},e.floodFill=function(i,t,s){if(0!=(s>>>24&255)){var n,e,o,a,h,r=i,l=t,x=[],c=[],u=[],m=this.imageData.width,d=this.imageData.height;if(!(r<0||l<0||r>=m||l>=d)){if(!this.checkPixelAvailable(r,l))throw new Error("Start point for flood fill is already filled");for(n=r;n>=0;n-=1){for(e=l;e>=0;e-=1){if(!this.checkPixelAvailable(n,e)){if(e===l&&this.checkPixelAvailable(n+1,e-1))for(e=this.checkPixelAvailable(n,e-1)?e-1:this.checkPixelAvailable(n+1,e-2)?e-2:-1;e>=0&&this.checkPixelAvailable(n,e);e-=1)x.push(4*(e*m+n)),c.push(e);break}x.push(4*(e*m+n)),c.push(e)}for(e=l;e<d;e+=1){if(!this.checkPixelAvailable(n,e)){if(e===l&&this.checkPixelAvailable(n+1,e+1))for(e=this.checkPixelAvailable(n,e+1)?e+1:this.checkPixelAvailable(n+1,e+2)?e+2:d;e<d&&this.checkPixelAvailable(n,e);e+=1)x.push(4*(e*m+n)),c.push(e);break}x.push(4*(e*m+n)),c.push(e)}for(n===r&&(u=c.concat()),o=!1,a=0;a<u.length;a+=1){for(h=0;h<u.length;h+=1)if(c[h]===u[a]){o=!0,l=u[a];break}if(o)break}if(!o)break;u=c.concat(),c=[]}for(l=t,u=[],c=[],n=r=i;n<m;n+=1){for(e=l;e>=0;e-=1){if(!this.checkPixelAvailable(n,e)){if(e===l&&this.checkPixelAvailable(n-1,e-1))for(e=this.checkPixelAvailable(n,e-1)?e-1:this.checkPixelAvailable(n-1,e-2)?e-2:-1;e>=0&&this.checkPixelAvailable(n,e);e-=1)x.push(4*(e*m+n)),c.push(e);break}x.push(4*(e*m+n)),c.push(e)}for(e=l;e<d;e+=1){if(!this.checkPixelAvailable(n,e)){if(e===l&&this.checkPixelAvailable(n-1,e+1))for(e=this.checkPixelAvailable(n,e+1)?e+1:this.checkPixelAvailable(n-1,e+2)?e+2:d;e<d&&this.checkPixelAvailable(n,e);e+=1)x.push(4*(e*m+n)),c.push(e);break}x.push(4*(e*m+n)),c.push(e)}for(n===r&&(u=c.concat()),o=!1,a=0;a<u.length;a+=1){for(h=0;h<u.length;h+=1)if(c[h]===u[a]){o=!0,l=u[a];break}if(o)break}if(!o)break;u=c.concat(),c=[]}for(a=0;a<x.length;a+=1)this.setPixelByIndex(x[a],s)}}},e.toString=function(){return"[BitmapData]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=(n=function(){this.initialize()}).prototype).canvas=null,e.w=null,e.h=null,e.dimension=null,e.color=null,e.border=null,e.bitmapData=null,e.useDefaultCanvas=null,e.matrix=null,e.initialize=function(){return this},e.toString=function(){return"[AbstractPrimitive]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=(n=function(){this.initialize()}).prototype).xAxis=null,e.yAxis=null,e.zAxis=null,e.tall=!1,e.initialize=function(){return this},e.toString=function(){return"[AbstractDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(9),a=s(8);(e=(n=function(i,t){this.initialize(i,t)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t){return this.border=a.get32(void 0===i?8882055:i),this.inner=a.get32(void 0===t?15658734:t),this},e.getByInnerColor=function(i){return new n(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[SideColor]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=n=function(){throw new Error("ColorGeom is a static Class, cannot be instanced.")}).get32=function(i){return i<4278190080?i+4278190080:i},e.applyBrightness=function(i,t,s){var n,e,o,a,h,r,l;return n=i>>>24&255,h=(313524*(e=i>>>16&255)>>20)+(615514*(o=i>>>8&255)>>20)+(119538*(a=255&i)>>20),l=-(155189*e>>20)-(303038*o>>20)+(458227*a>>20),r=(644874*e>>20)-(540016*o>>20)-(104857*a>>20),s?h=60+Math.pow(h,1.2):h+=t,e=h+(1195376*r>>20),o=h-(408944*l>>20)-(608174*r>>20),a=h+(2128609*l>>20),n<<24|(e=Math.max(0,Math.min(e,255)))<<16|(o=Math.max(0,Math.min(o,255)))<<8|(a=Math.max(0,Math.min(a,255)))},e.toString=function(){return"[ColorGeom]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=(n=function(){this.initialize()}).prototype).inner=null,e.border=null,e.borderHighlight=null,e.left=null,e.right=null,e.horizontal=null,e.leftSlope=null,e.rightSlope=null,e.initialize=function(){return this},e.toString=function(){return"[AbstractColor]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(22);(e=(n=function(i,t){this.initialize(i,t)}).prototype).x=null,e.y=null,e.canvas=null,e.initialize=function(i,t){if(!i)throw new Error("Primitive is not defined");var s=t||new o;return this.canvas=i.canvas,this.x=i.matrix.tx+s.x-s.y,this.y=i.matrix.ty+Math.floor(s.x/2+s.y/2)-s.z,this},e.toString=function(){return"[PixelObject]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=t||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("xAxis and yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[SlopeDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(9),a=s(8);(e=(n=function(i,t,s,n,e,o){this.initialize(i,t,s,n,e,o)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,s,n,e,o){return this.border=a.get32(void 0===i?9737880:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===s?13225936:s),this.right=a.get32(void 0===n?15132905:n),this.leftSlope=a.get32(void 0===e?14408667:e),this.rightSlope=a.get32(void 0===o?14408667:o),this},e.getByHorizontalColor=function(i){return new n(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,2*this.BRIGHTNESS_GAIN),a.applyBrightness(i,this.BRIGHTNESS_GAIN),a.applyBrightness(i,1.5*this.BRIGHTNESS_GAIN),a.applyBrightness(i,.5*this.BRIGHTNESS_GAIN))},e.toString=function(){return"[SlopeColor]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.zAxis=t||30,this.xAxis%2==1)throw new Error("xAxis must be even number");if(this.xAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[SideXDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.yAxis=i||30,this.zAxis=t||30,this.yAxis%2==1)throw new Error("yAxis must be even number");if(this.yAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[SideYDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(9),a=s(8);(e=(n=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i){return this.border=a.get32(void 0===i?8882055:i),this},e.toString=function(){return"[LineColor]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=t||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("x,yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[BrickDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=(n=function(i,t){this.initialize(i,t)}).prototype).x=0,e.y=0,e.initialize=function(i,t){return this.x=void 0===i?0:i,this.y=void 0===t?0:t,this},e.toString=function(){return"[Point x : "+this.x+", y : "+this.y+"]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(13),a=s(7),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis,this.h=this.dimension.zAxis+this.dimension.xAxis/2,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o;for(0,i=this.dimension.zAxis,t=this.dimension.xAxis-1,s=this.h-this.dimension.zAxis-1,o=this.border?this.color.border:this.color.inner,n=0;n<this.dimension.xAxis;n+=1)this.bitmapData.setPixel(0+n,i+Math.floor(n/2),o),this.bitmapData.setPixel(t-n,s-Math.floor(n/2),o);for(e=0;e<this.dimension.zAxis;e+=1)this.bitmapData.setPixel(0,i-e,o),this.bitmapData.setPixel(t,s+e,o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[SideX]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(14),a=s(7),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.yAxis,this.h=this.dimension.zAxis+this.dimension.yAxis/2,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o;for(0,i=this.h-this.dimension.zAxis-1,t=this.dimension.yAxis-1,s=this.dimension.zAxis,o=this.border?this.color.border:this.color.inner,n=0;n<this.dimension.yAxis;n+=1)this.bitmapData.setPixel(0+n,i-Math.floor(n/2),o),this.bitmapData.setPixel(t-n,s+Math.floor(n/2),o);for(e=0;e<this.dimension.zAxis;e+=1)this.bitmapData.setPixel(0,i+e,o),this.bitmapData.setPixel(t,s-e,o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[SideY]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i,t,s){this.initialize(i,t,s)}).prototype=new o).initialize=function(i,t,s){if(this.xAxis=i||30,this.yAxis=t||30,this.zAxis=s||30,this.xAxis%2==1||this.yAxis%2==1)throw new Error("x,yAxis must be even number");if(this.xAxis<=4||this.yAxis<=4||this.zAxis<=2)throw new Error("dimension is too small");return this},e.toString=function(){return"[CubeDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(9),a=s(8);(e=(n=function(i,t,s,n,e){this.initialize(i,t,s,n,e)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,s,n,e){return this.border=a.get32(void 0===i?8882055:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===s?13225936:s),this.right=a.get32(void 0===n?14935011:n),this.horizontal=a.get32(void 0===e?15658992:e),this},e.getByHorizontalColor=function(i){return new n(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,2*this.BRIGHTNESS_GAIN),a.applyBrightness(i,this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[CubeColor]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(17);(e=(n=function(i,t,s){this.initialize(i,t,s)}).prototype).x=0,e.y=0,e.z=0,e.initialize=function(i,t,s){return this.x=void 0===i?0:i,this.y=void 0===t?0:t,this.z=void 0===s?0:s,this},e.toGlobalCoordinates=function(i){var t=new o(this.x-this.y,Math.floor(this.x/2+this.y/2)-this.z);return void 0!==i&&(t.x=t.x+i.x,t.y=t.y+i.y),t},e.toString=function(){return"[Point3D x : "+this.x+", y : "+this.y+", z: "+this.z+"]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=n=function(){throw new Error("CanvasManager is a static Class, cannot be instanced.")}).defaultCanvas=null,e.getDefaultCanvas=function(){return e.defaultCanvas=e.defaultCanvas||document.createElement("canvas"),e.defaultCanvas},e.getNewCanvas=function(){return document.createElement("canvas")},e.toString=function(){return"[CanvasManager]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(16),a=s(7),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=(this.dimension.xAxis+this.dimension.yAxis)/2,this.w-=2,this.h-=1,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o;for(i=this.dimension.yAxis-2,0,t=this.dimension.xAxis-1,s=this.h-1,o=this.border?this.color.border:this.color.inner,n=0;n<this.dimension.xAxis;n+=1)this.bitmapData.setPixel(i+n,0+Math.floor(n/2),o),this.bitmapData.setPixel(t-n,s-Math.floor(n/2),o);for(e=0;e<this.dimension.yAxis;e+=1)this.bitmapData.setPixel(i+1-e,0+Math.floor(e/2),o),this.bitmapData.setPixel(t-1+e,s-Math.floor(e/2),o);this.bitmapData.floodFill(Math.floor(this.w/2),Math.floor(this.h/2),this.color.inner)},e.toString=function(){return"[Brick]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i,t){this.initialize(i,t)}).prototype=new o).initialize=function(i,t){if(this.xAxis=i||30,this.yAxis=i||30,this.tall=t||!1,this.xAxis%2==1)throw new Error("axis must be even number");if(this.xAxis<=4)throw new Error("dimension is too small");return this},e.toString=function(){return"[PyramidDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(9),a=s(8);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new o).BRIGHTNESS_GAIN=-20,e.initialize=function(i,t,s,n){return this.border=a.get32(void 0===i?9737880:i),this.borderHighlight=a.get32(void 0===t?16777215:t),this.left=a.get32(void 0===s?15132905:s),this.right=a.get32(void 0===n?15658992:n),this},e.getByRightColor=function(i){return new n(a.applyBrightness(i,4*this.BRIGHTNESS_GAIN),a.applyBrightness(i,0,!0),a.applyBrightness(i,this.BRIGHTNESS_GAIN),i)},e.toString=function(){return"[PyramidColor]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.xAxis=i||30,this.xAxis%2==1)throw new Error("xAxis must be even number");if(this.xAxis<2)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineXDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.yAxis=i||30,this.yAxis%2==1)throw new Error("yAxis must be even number");if(this.yAxis<2)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineYDimension]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(6);(e=(n=function(i){this.initialize(i)}).prototype=new o).initialize=function(i){if(this.zAxis=i||30,this.zAxis<=0)throw new Error("dimension is too small");return this},e.toString=function(){return"[LineZDimension]"},i.exports=n},function(i,t,s){"use strict";var n={};n.Cube=s(31),n.Brick=s(24),n.Pyramid=s(32),n.LineX=s(33),n.LineY=s(34),n.LineZ=s(35),n.SideX=s(18),n.SideY=s(19),n.SlopeEast=s(36),n.SlopeNorth=s(37),n.SlopeSouth=s(38),n.SlopeWest=s(39),n.ColorPattern=s(40),n.ColorGeom=s(8),n.CanvasManager=s(23),n.CanvasTool=s(41),n.Matrix=s(3),n.Point=s(17),n.Point3D=s(22),n.PixelView=s(42),n.PixelObject=s(10),n.BitmapData=s(4),n.BrickDimension=s(16),n.CubeDimension=s(20),n.PyramidDimension=s(25),n.LineXDimension=s(27),n.LineYDimension=s(28),n.LineZDimension=s(29),n.SideXDimension=s(13),n.SideYDimension=s(14),n.SlopeDimension=s(11),n.LineColor=s(15),n.CubeColor=s(21),n.PyramidColor=s(26),n.SideColor=s(7),n.SlopeColor=s(12),window.obelisk=n,i.exports=n},function(i,t,s){"use strict";var n,e,o=s(20),a=s(16),h=s(13),r=s(14),l=s(21),x=s(7),c=s(3),u=s(10),m=s(4),d=s(5),f=s(24),p=s(18),v=s(19);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new d).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new l:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.dimension.zAxis+(this.dimension.xAxis+this.dimension.yAxis)/2,this.w-=2,this.h-=1,this.matrix=new c,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new m(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o,l,c,d,A,b,D,w;if(i=new f(new a(this.dimension.xAxis,this.dimension.yAxis),new x(this.color.border,this.color.horizontal),this.border),t=new p(new h(this.dimension.xAxis,this.dimension.zAxis),new x(this.color.border,this.color.left),this.border),s=new v(new r(this.dimension.yAxis,this.dimension.zAxis),new x(this.color.border,this.color.right),this.border),n=new u(i),e=new u(t),o=new u(s),(l=this.bitmapData.context).drawImage(n.canvas,n.x+this.dimension.yAxis-2,n.y),l.drawImage(e.canvas,e.x,e.y+this.dimension.zAxis+this.dimension.yAxis/2-1),l.drawImage(o.canvas,o.x+this.w-2,e.y+this.dimension.zAxis+this.dimension.xAxis/2-1),c=new m(this.w,this.h),this.border){for(d=this.dimension.xAxis-2,A=(this.dimension.xAxis+this.dimension.yAxis)/2-2,b=0;b<this.dimension.xAxis-2;b+=1)c.setPixel(d+1-b,A-Math.floor(b/2),this.color.borderHighlight);for(D=0;D<this.dimension.yAxis-2;D+=1)c.setPixel(d+D,A-Math.floor(D/2),this.color.borderHighlight);for(w=0;w<this.dimension.zAxis;w+=1)c.setPixel(d,A+w,this.color.borderHighlight)}else for(b=0;b<this.dimension.zAxis;b+=1)c.setPixel(this.dimension.xAxis-2,(this.dimension.xAxis+this.dimension.yAxis)/2-1+b,this.color.left);c.context.putImageData(c.imageData,0,0),l.drawImage(c.canvas,0,0)},e.toString=function(){return"[Cube]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(25),a=s(26),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).hSize=null,e.hOffset=null,e.initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t,this.hSize=this.dimension.tall?2*this.dimension.xAxis:this.dimension.xAxis,this.hOffset=this.dimension.tall?-3:-2},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.hSize+this.dimension.xAxis/2,this.w-=2,this.h+=this.hOffset,this.matrix=new h,this.matrix.tx=2-this.dimension.xAxis,this.matrix.ty=-this.hSize/2+2-(this.dimension.tall?this.dimension.xAxis/2:1)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o,a,h,r,l;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,s=this.border?this.color.borderHighlight:i,o=0;o<this.hSize+this.dimension.xAxis/2-4;o+=1)this.bitmapData.setPixel(this.dimension.xAxis-2,o+3+this.hOffset,s);for(n=0;n<this.dimension.xAxis;n+=1)this.bitmapData.setPixel(n,this.hSize+Math.floor(n/2)+this.hOffset,i);for(e=0;e<this.dimension.xAxis;e+=1)this.bitmapData.setPixel(e+this.dimension.xAxis-2,this.hSize+this.dimension.xAxis/2-Math.floor(e/2)-1+this.hOffset,t);if(this.dimension.tall){for(r=0;r<this.hSize-2;r+=1)this.bitmapData.setPixel(Math.floor(r/2),this.hSize-r+this.hOffset,i);for(l=2;l<this.hSize;l+=1)this.bitmapData.setPixel(Math.floor(l/2)+this.dimension.xAxis-2,l+1+this.hOffset,t)}else{for(a=0;a<this.hSize;a+=1)this.bitmapData.setPixel(a,this.hSize-a+this.hOffset,i);for(h=0;h<this.hSize;h+=1)this.bitmapData.setPixel(h+this.hSize-2,h+1+this.hOffset,t)}this.border||this.bitmapData.setPixel(this.dimension.xAxis-2,this.hSize+this.dimension.xAxis/2-1+this.hOffset,i),this.bitmapData.floodFill(this.dimension.xAxis-1,this.hSize+Math.floor((this.dimension.xAxis-1)/2)+this.hOffset-1,this.color.right),this.bitmapData.floodFill(this.dimension.xAxis-3,this.hSize+Math.floor((this.dimension.xAxis-1)/2)+this.hOffset-2,this.color.left)},e.toString=function(){return"[Pyramid]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(27),a=s(15),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s){this.initialize(i,t,s)}).prototype=new l).initialize=function(i,t,s){return this.initRender(i,t,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s){this.useDefaultCanvas=s||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis,this.h=this.dimension.xAxis/2,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t;for(0,0,t=this.color.border,i=0;i<this.dimension.xAxis;i+=1)this.bitmapData.setPixel(0+i,0+Math.floor(i/2),t)},e.toString=function(){return"[LineX]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(28),a=s(15),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s){this.initialize(i,t,s)}).prototype=new l).initialize=function(i,t,s){return this.initRender(i,t,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s){this.useDefaultCanvas=s||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.yAxis,this.h=this.dimension.yAxis/2,this.matrix=new h,this.matrix.tx=2-this.dimension.yAxis,this.matrix.ty=0},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s;for(i=this.dimension.yAxis-1,0,s=this.color.border,t=0;t<this.dimension.yAxis;t+=1)console.log(t),this.bitmapData.setPixel(i-t,0+Math.floor(t/2),s)},e.toString=function(){return"[LineY]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(29),a=s(15),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s){this.initialize(i,t,s)}).prototype=new l).initialize=function(i,t,s){return this.initRender(i,t,s),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s){this.useDefaultCanvas=s||!1,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=1,this.h=this.dimension.zAxis,this.matrix=new h,this.matrix.tx=0,this.matrix.ty=1-this.dimension.zAxis},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t;for(0,0,t=this.color.border,i=0;i<this.dimension.zAxis;i+=1)this.bitmapData.setPixel(0,0+i,t)},e.toString=function(){return"[LineZ]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(11),a=s(12),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=2*this.dimension.xAxis+this.dimension.yAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(3*this.dimension.xAxis/2-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o,a;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.rightSlope,n=0;n<this.dimension.yAxis;n+=1)this.bitmapData.setPixel(n,this.dimension.yAxis/2-Math.floor(n/2)-1,t),this.bitmapData.setPixel(n+this.dimension.xAxis-2,this.h-Math.floor(n/2)-1,t);for(s=0;s<this.dimension.xAxis;s+=1)this.bitmapData.setPixel(s,this.h-this.dimension.xAxis/2+Math.floor(s/2),i);for(e=this.dimension.yAxis/2-1;e<this.h-this.dimension.xAxis/2;e+=1)this.bitmapData.setPixel(0,e,i);for(o=0;o<2*this.dimension.xAxis-2;o+=1)this.bitmapData.setPixel(this.dimension.yAxis-1+Math.floor(o/2),o,t),this.bitmapData.setPixel(1+Math.floor(o/2),this.dimension.yAxis/2+o-1,t);if(this.bitmapData.floodFill(this.dimension.yAxis-2,1,this.color.rightSlope),this.bitmapData.floodFill(this.dimension.xAxis-3,this.h-3,this.color.left),this.bitmapData.setPixel(this.dimension.xAxis-2,this.h-2,this.color.left),this.border)for(a=1;a<2*this.dimension.xAxis-3;a+=1)this.bitmapData.setPixel(1+Math.floor(a/2),this.dimension.yAxis/2+a-1,this.color.borderHighlight)},e.toString=function(){return"[SlopeEast]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(11),a=s(12),h=s(3),r=s(4),l=s(5),x=s(18),c=s(13),u=s(7),m=s(10);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=3*this.dimension.yAxis/2+this.dimension.xAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(this.dimension.yAxis-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o,a,h,l,d;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,s=this.border?this.color.borderHighlight:this.color.left,n=new x(new c(this.dimension.xAxis,this.h-this.dimension.xAxis/2),new u(i,this.color.left)),e=new m(n),(o=this.bitmapData.context).drawImage(e.canvas,e.x,e.y+this.h-this.dimension.xAxis/2),a=new r(this.w,this.h),h=this.h-3*this.dimension.yAxis/2+2;h<this.h;h+=1)a.setPixel(this.dimension.xAxis-1,h,t);for(l=1;l<this.dimension.yAxis;l+=1)a.setPixel(this.dimension.xAxis+l-2,this.h-Math.floor(l/2)-1,t),a.setPixel(this.dimension.xAxis+l-2,this.dimension.xAxis/2-2+l,t);for(a.floodFill(this.dimension.xAxis+1,this.h-3,this.color.right),d=this.dimension.xAxis/2;d<this.h-1;d+=1)a.setPixel(this.dimension.xAxis-1,d,this.color.right),a.setPixel(this.dimension.xAxis-2,d,s);a.context.putImageData(a.imageData,0,0),o.drawImage(a.canvas,0,0)},e.toString=function(){return"[SlopeNorth]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(11),a=s(12),h=s(3),r=s(4),l=s(5);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=this.dimension.xAxis/2+2*this.dimension.yAxis,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(3*this.dimension.yAxis/2-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.bitmapData.context.putImageData(this.bitmapData.imageData,0,0),this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o,a;for(i=this.border?this.color.border:this.color.leftSlope,t=this.border?this.color.border:this.color.right,n=0;n<this.dimension.xAxis;n+=1)this.bitmapData.setPixel(n,2*this.dimension.yAxis+Math.floor(n/2)-3,i),this.bitmapData.setPixel(n+this.dimension.yAxis-2,Math.floor(n/2),i);for(s=0;s<this.dimension.yAxis;s+=1)this.bitmapData.setPixel(this.dimension.xAxis-2+s,this.h-Math.floor(s/2)-1,t);for(e=this.dimension.xAxis/2-1;e<this.h-this.dimension.yAxis/2;e+=1)this.bitmapData.setPixel(this.w-1,e,t);for(o=0;o<2*this.dimension.yAxis-2;o+=1)this.bitmapData.setPixel(Math.floor(o/2),2*this.dimension.yAxis-o-3,i),this.bitmapData.setPixel(this.dimension.xAxis-2+Math.floor(o/2),this.h-o-1,i);if(this.bitmapData.floodFill(this.dimension.yAxis-1,1,this.color.leftSlope),this.bitmapData.floodFill(this.dimension.xAxis,this.h-3,this.color.right),this.bitmapData.setPixel(this.dimension.xAxis-1,this.h-2,this.color.right),this.border)for(a=1;a<2*this.dimension.yAxis-3;a+=1)this.bitmapData.setPixel(this.dimension.xAxis-2+Math.floor(a/2),this.h-a-1,this.color.borderHighlight)},e.toString=function(){return"[SlopeSouth]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(11),a=s(12),h=s(3),r=s(4),l=s(5),x=s(19),c=s(14),u=s(7),m=s(10);(e=(n=function(i,t,s,n){this.initialize(i,t,s,n)}).prototype=new l).initialize=function(i,t,s,n){return this.initRender(i,t,s,n),this.initRectangle(),this.initBitmapData(),this.build(),this.renderBitmapDataForCanvas(),this},e.initRender=function(i,t,s,n){this.useDefaultCanvas=n||!1,this.border=s||void 0===s,this.dimension=void 0===i?new o:i,this.color=void 0===t?new a:t},e.initRectangle=function(){this.w=this.dimension.xAxis+this.dimension.yAxis,this.h=3*this.dimension.xAxis/2+this.dimension.yAxis/2,this.w-=2,this.h-=3,this.matrix=new h,this.matrix.tx=-(this.dimension.yAxis-2),this.matrix.ty=-(this.dimension.xAxis-2)},e.initBitmapData=function(){this.bitmapData=new r(this.w,this.h,this.useDefaultCanvas)},e.renderBitmapDataForCanvas=function(){this.canvas=this.bitmapData.canvas},e.build=function(){var i,t,s,n,e,o,a,h,l,d;for(i=this.border?this.color.border:this.color.left,t=this.border?this.color.border:this.color.right,s=this.border?this.color.borderHighlight:this.color.left,n=new x(new c(this.dimension.yAxis,this.h-this.dimension.yAxis/2),new u(t,this.color.right)),e=new m(n),(o=this.bitmapData.context).drawImage(e.canvas,e.x+this.w-2,e.y+this.h-this.dimension.yAxis/2),a=new r(this.w,this.h),h=this.h-3*this.dimension.xAxis/2+2;h<this.h;h+=1)a.setPixel(this.dimension.xAxis-2,h,i);for(l=0;l<this.dimension.xAxis-1;l+=1)a.setPixel(l,this.dimension.xAxis+this.dimension.yAxis/2-3+Math.floor(l/2),i),a.setPixel(l,this.dimension.xAxis+this.dimension.yAxis/2-3-l,i);for(a.floodFill(this.dimension.xAxis-3,this.h-3,this.color.left),d=this.dimension.yAxis/2;d<this.h-1;d+=1)a.setPixel(this.dimension.xAxis-2,d,s);a.context.putImageData(a.imageData,0,0),o.drawImage(a.canvas,0,0)},e.toString=function(){return"[SlopeWest]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=n=function(){throw new Error("ColorPattern is a static Class, cannot be instanced.")}).GRASS_GREEN=13434624,e.YELLOW=16776960,e.WINE_RED=16711833,e.PINK=16743615,e.PURPLE=13369599,e.BLUE=52479,e.GRAY=15658734,e.BLACK=6710886,e.FINE_COLORS=[e.GRASS_GREEN,e.YELLOW,e.WINE_RED,e.PINK,e.PURPLE,e.BLUE,e.GRAY,e.BLACK],e.getRandomComfortableColor=function(){return e.FINE_COLORS[Math.floor(Math.random()*e.FINE_COLORS.length)]},e.toString=function(){return"[ColorPattern]"},i.exports=n},function(i,t,s){"use strict";var n,e;(e=n=function(){throw new Error("CanvasTool is a static Class, cannot be instanced.")}).getPixel=function(i,t,s){var n,e;return(n=i.data)[e=4*(s*i.width+t)]<<16|n[e+1]<<8|n[e+2]},e.toString=function(){return"[CanvasTool]"},i.exports=n},function(i,t,s){"use strict";var n,e,o=s(17),a=s(10);(e=(n=function(i,t){this.initialize(i,t)}).prototype).canvas=null,e.context=null,e.point=null,e.initialize=function(i,t){if(!i)throw new Error("Canvas is not defined");try{i instanceof jQuery&&(i=i.get(0))}catch(i){}return this.canvas=i,this.context=this.canvas.getContext("2d"),this.context.mozImageSmoothingEnabled=!1,this.context.msImageSmoothingEnabled=!1,this.context.imageSmoothingEnabled=!1,this.point=t||new o(0,0),this},e.renderObject=function(i,t){var s=new a(i,t);this.context.drawImage(s.canvas,this.point.x+s.x,this.point.y+s.y)},e.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.toString=function(){return"[PixelView]"},i.exports=n}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZ2VvbS9NYXRyaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2Rpc3BsYXkvQml0bWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvcHJpbWl0aXZlcy9BYnN0cmFjdFByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZGltZW5zaW9ucy9BYnN0cmFjdERpbWVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvY29sb3JzL1NpZGVDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvdXRpbHMvQ29sb3JHZW9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9jb2xvcnMvQWJzdHJhY3RDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZGlzcGxheS9QaXhlbE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZGltZW5zaW9ucy9TbG9wZURpbWVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvY29sb3JzL1Nsb3BlQ29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvU2lkZVhEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvU2lkZVlEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2NvbG9ycy9MaW5lQ29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvQnJpY2tEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2dlb20vUG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvU2lkZVguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvU2lkZVkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvQ3ViZURpbWVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvY29sb3JzL0N1YmVDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvZ2VvbS9Qb2ludDNELmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy91dGlscy9DYW52YXNNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0JyaWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9kaW1lbnNpb25zL1B5cmFtaWREaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2NvbG9ycy9QeXJhbWlkQ29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvTGluZVhEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvTGluZVlEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2RpbWVuc2lvbnMvTGluZVpEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL29iZWxpc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvQ3ViZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvcHJpbWl0aXZlcy9QeXJhbWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0xpbmVYLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0xpbmVZLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL0xpbmVaLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL1Nsb3BlRWFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JlbGlzay5qcy9zcmMvcHJpbWl0aXZlcy9TbG9wZU5vcnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy9wcmltaXRpdmVzL1Nsb3BlU291dGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3ByaW1pdGl2ZXMvU2xvcGVXZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmVsaXNrLmpzL3NyYy91dGlscy9Db2xvclBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL3V0aWxzL0NhbnZhc1Rvb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iZWxpc2suanMvc3JjL2Rpc3BsYXkvUGl4ZWxWaWV3LmpzIl0sIm5hbWVzIjpbIk1hdHJpeCIsInAiLCJhIiwiYiIsImMiLCJkIiwidHgiLCJ0eSIsInRoaXMiLCJpbml0aWFsaXplIiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiQml0bWFwRGF0YSIsIkNhbnZhc01hbmFnZXIiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwidyIsImgiLCJ1c2VEZWZhdWx0Q2FudmFzIiwiaW1hZ2VEYXRhIiwiY2FudmFzIiwiY29udGV4dCIsIkVycm9yIiwiZ2V0RGVmYXVsdENhbnZhcyIsImdldE5ld0NhbnZhcyIsInNldEF0dHJpYnV0ZSIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsIm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiY3JlYXRlSW1hZ2VEYXRhIiwic2V0UGl4ZWwiLCJwb3NYIiwicG9zWSIsImNvbG9yIiwiaW5kZXgiLCJzZXRQaXhlbEJ5SW5kZXgiLCJwaXhlbHMiLCJkYXRhIiwiY2hlY2tQaXhlbEF2YWlsYWJsZSIsIngiLCJ5IiwiZmxvb2RGaWxsIiwiY29sIiwicm93IiwibWF0Y2hGbGFnIiwiaSIsImoiLCJzdGFjayIsIm5vd0NvbCIsInByZXZDb2wiLCJwdXNoIiwiY29uY2F0IiwibGVuZ3RoIiwiQWJzdHJhY3RQcmltaXRpdmUiLCJkaW1lbnNpb24iLCJib3JkZXIiLCJiaXRtYXBEYXRhIiwibWF0cml4IiwiQWJzdHJhY3REaW1lbnNpb24iLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJ0YWxsIiwiU2lkZUNvbG9yIiwiQWJzdHJhY3RDb2xvciIsIkNvbG9yR2VvbSIsImlubmVyIiwiQlJJR0hUTkVTU19HQUlOIiwiZ2V0MzIiLCJnZXRCeUlubmVyQ29sb3IiLCJhcHBseUJyaWdodG5lc3MiLCJicmlnaHRuZXNzIiwiaGlnaGxpZ2h0IiwiciIsImciLCJ2IiwidSIsIk1hdGgiLCJwb3ciLCJtYXgiLCJtaW4iLCJib3JkZXJIaWdobGlnaHQiLCJsZWZ0IiwicmlnaHQiLCJob3Jpem9udGFsIiwibGVmdFNsb3BlIiwicmlnaHRTbG9wZSIsIlBpeGVsT2JqZWN0IiwiUG9pbnQzRCIsInByaW1pdGl2ZSIsInBvaW50M0QiLCJwM0QiLCJmbG9vciIsInoiLCJTbG9wZURpbWVuc2lvbiIsIlNsb3BlQ29sb3IiLCJnZXRCeUhvcml6b250YWxDb2xvciIsIlNpZGVYRGltZW5zaW9uIiwiU2lkZVlEaW1lbnNpb24iLCJMaW5lQ29sb3IiLCJCcmlja0RpbWVuc2lvbiIsIlBvaW50IiwiU2lkZVgiLCJpbml0UmVuZGVyIiwiaW5pdFJlY3RhbmdsZSIsImluaXRCaXRtYXBEYXRhIiwiYnVpbGQiLCJyZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzIiwicHV0SW1hZ2VEYXRhIiwieU9mZnNldElubmVyIiwieE9mZnNldE91dCIsInlPZmZzZXRPdXQiLCJib3JkZXJDb2xvciIsIlNpZGVZIiwiQ3ViZURpbWVuc2lvbiIsIkN1YmVDb2xvciIsInRvR2xvYmFsQ29vcmRpbmF0ZXMiLCJvZmZzZXQiLCJwMkQiLCJkZWZhdWx0Q2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiQnJpY2siLCJ4T2Zmc2V0SW5uZXIiLCJQeXJhbWlkRGltZW5zaW9uIiwiYXhpcyIsIlB5cmFtaWRDb2xvciIsImdldEJ5UmlnaHRDb2xvciIsIkxpbmVYRGltZW5zaW9uIiwiTGluZVlEaW1lbnNpb24iLCJMaW5lWkRpbWVuc2lvbiIsIm9iZWxpc2siLCJDdWJlIiwiUHlyYW1pZCIsIkxpbmVYIiwiTGluZVkiLCJMaW5lWiIsIlNsb3BlRWFzdCIsIlNsb3BlTm9ydGgiLCJTbG9wZVNvdXRoIiwiU2xvcGVXZXN0IiwiQ29sb3JQYXR0ZXJuIiwiQ2FudmFzVG9vbCIsIlBpeGVsVmlldyIsIndpbmRvdyIsImJyaWNrIiwic2lkZVgiLCJzaWRlWSIsInBvQnJpY2siLCJwb1giLCJwb1kiLCJjdHgiLCJibWQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImsiLCJkcmF3SW1hZ2UiLCJoU2l6ZSIsImhPZmZzZXQiLCJjb2xvckJvcmRlckxlZnQiLCJjb2xvckJvcmRlclJpZ2h0IiwiY29sb3JCb3JkZXJIaWdobGlnaHQiLCJsMSIsIm0xIiwibDIiLCJtMiIsInhPZmZzZXRCb3JkZXIiLCJjb25zb2xlIiwibG9nIiwibSIsIm4iLCJHUkFTU19HUkVFTiIsIllFTExPVyIsIldJTkVfUkVEIiwiUElOSyIsIlBVUlBMRSIsIkJMVUUiLCJHUkFZIiwiQkxBQ0siLCJGSU5FX0NPTE9SUyIsImdldFJhbmRvbUNvbWZvcnRhYmxlQ29sb3IiLCJyYW5kb20iLCJnZXRQaXhlbCIsInBvaW50IiwialF1ZXJ5IiwiZ2V0IiwiaWdub3JlIiwicmVuZGVyT2JqZWN0IiwicG8iLCJjbGVhciJdLCJtYXBwaW5ncyI6InlGQUlBLElBQUFBLEVBQUFDLEdBSUFBLEdBSEFELEVBQUEsU0FBQUUsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUMsS0FBQUMsV0FBQVAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsS0FFQUcsV0FRQVIsRUFBQSxFQU9BRCxFQUFBRSxFQUFBLEVBT0FGLEVBQUFHLEVBQUEsRUFPQUgsRUFBQUksRUFBQSxFQU9BSixFQUFBSyxHQUFBLEVBT0FMLEVBQUFNLEdBQUEsRUFHQU4sRUFBQVEsV0FBQSxTQUFBUCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQVFBLE9BUEFDLEtBQUFOLE9BQUFTLElBQUFULEVBQUEsRUFBQUEsRUFDQU0sS0FBQUwsS0FBQSxFQUNBSyxLQUFBSixLQUFBLEVBQ0FJLEtBQUFILE9BQUFNLElBQUFOLEVBQUEsRUFBQUEsRUFDQUcsS0FBQUYsTUFBQSxFQUNBRSxLQUFBRCxNQUFBLEVBRUFDLE1BSUFQLEVBQUFXLFNBQUEsV0FDQSxrQkFHQUMsRUFBQUMsUUFBQWQsZ0NDbEVBLElBRUFlLEVBQUFkLEVBRkFlLEVBQW9CQyxFQUFRLEtBTTVCaEIsR0FIQWMsRUFBQSxTQUFBRyxFQUFBQyxFQUFBQyxHQUNBWixLQUFBQyxXQUFBUyxFQUFBQyxF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QUFDLFdBQUFhLEVBQUF1SyxLQUVBbkwsV0FHQVksT0FBQSxLQUNBckIsRUFBQXNCLFFBQUEsS0FDQXRCLEVBQUE0TCxNQUFBLEtBR0E1TCxFQUFBUSxXQUFBLFNBQUFhLEVBQUF1SyxHQUNBLElBQUF2SyxFQUNBLFVBQUFFLE1BQUEseUJBR0EsSUFDQUYsYUFBQXdLLFNBQ0F4SyxJQUFBeUssSUFBQSxJQUVLLE1BQUFDLElBWUwsT0FUQXhMLEtBQUFjLFNBRUFkLEtBQUFlLFFBQUFmLEtBQUFjLE9BQUFNLFdBQUEsTUFDQXBCLEtBQUFlLFFBQUFTLDBCQUFBLEVBQ0F4QixLQUFBZSxRQUFBVSx5QkFBQSxFQUNBekIsS0FBQWUsUUFBQVcsdUJBQUEsRUFFQTFCLEtBQUFxTCxTQUFBLElBQUFsRixFQUFBLEtBRUFuRyxNQUlBUCxFQUFBZ00sYUFBQSxTQUFBbEcsRUFBQUMsR0FDQSxJQUFBa0csRUFBQSxJQUFBckcsRUFBQUUsRUFBQUMsR0FDQXhGLEtBQUFlLFFBQUEySSxVQUFBZ0MsRUFBQTVLLE9BQUFkLEtBQUFxTCxNQUFBaEosRUFBQXFKLEVBQUFySixFQUFBckMsS0FBQXFMLE1BQUEvSSxFQUFBb0osRUFBQXBKLElBR0E3QyxFQUFBa00sTUFBQSxXQUNBM0wsS0FBQWUsUUFBQU0sVUFBQSxJQUFBckIsS0FBQWMsT0FBQVEsTUFBQXRCLEtBQUFjLE9BQUFTLFNBR0E5QixFQUFBVyxTQUFBLFdBQ0EscUJBR0FDLEVBQUFDLFFBQUF1SSIsImZpbGUiOiIxLmJvb3RzdHJhcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBNYXRyaXgsIHA7XG5NYXRyaXggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgdHgsIHR5KSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGEsIGIsIGMsIGQsIHR4LCB0eSk7XG59O1xucCA9IE1hdHJpeC5wcm90b3R5cGU7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzOlxuLyoqXG4gKiBQb3NpdGlvbiAoMCwgMCkgaW4gYSAzeDMgbWF0cml4LlxuICogQHByb3BlcnR5IGFcbiAqIEB0eXBlIE51bWJlclxuICoqL1xucC5hID0gMTtcblxuLyoqXG4gKiBQb3NpdGlvbiAoMCwgMSkgaW4gYSAzeDMgbWF0cml4LlxuICogQHByb3BlcnR5IGJcbiAqIEB0eXBlIE51bWJlclxuICoqL1xucC5iID0gMDtcblxuLyoqXG4gKiBQb3NpdGlvbiAoMSwgMCkgaW4gYSAzeDMgbWF0cml4LlxuICogQHByb3BlcnR5IGNcbiAqIEB0eXBlIE51bWJlclxuICoqL1xucC5jID0gMDtcblxuLyoqXG4gKiBQb3NpdGlvbiAoMSwgMSkgaW4gYSAzeDMgbWF0cml4LlxuICogQHByb3BlcnR5IGRcbiAqIEB0eXBlIE51bWJlclxuICoqL1xucC5kID0gMTtcblxuLyoqXG4gKiBQb3NpdGlvbiAoMiwgMCkgaW4gYSAzeDMgbWF0cml4LlxuICogQHByb3BlcnR5IHR4XG4gKiBAdHlwZSBOdW1iZXJcbiAqKi9cbnAudHggPSAwO1xuXG4vKipcbiAqIFBvc2l0aW9uICgyLCAxKSBpbiBhIDN4MyBtYXRyaXguXG4gKiBAcHJvcGVydHkgdHlcbiAqIEB0eXBlIE51bWJlclxuICoqL1xucC50eSA9IDA7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgdHgsIHR5KSB7XG4gICAgdGhpcy5hID0gKGEgPT09IHVuZGVmaW5lZCkgPyAxIDogYTtcbiAgICB0aGlzLmIgPSBiIHx8IDA7XG4gICAgdGhpcy5jID0gYyB8fCAwO1xuICAgIHRoaXMuZCA9IChkID09PSB1bmRlZmluZWQpID8gMSA6IGQ7XG4gICAgdGhpcy50eCA9IHR4IHx8IDA7XG4gICAgdGhpcy50eSA9IHR5IHx8IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW01hdHJpeF0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRyaXg7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FudmFzTWFuYWdlciA9IHJlcXVpcmUoJy4uL3V0aWxzL0NhbnZhc01hbmFnZXInKTtcblxudmFyIEJpdG1hcERhdGEsIHA7XG5CaXRtYXBEYXRhID0gZnVuY3Rpb24odywgaCwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSh3LCBoLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gQml0bWFwRGF0YS5wcm90b3R5cGU7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0eVxucC5pbWFnZURhdGEgPSBudWxsO1xucC5jYW52YXMgPSBudWxsO1xucC5jb250ZXh0ID0gbnVsbDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKHcsIGgsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICBpZiAodyA9PT0gdW5kZWZpbmVkIHx8IGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JpdG1hcERhdGEgd2lkdGggb3IgaGVpZ2h0IGlzIG1pc3NpbmcnKTtcbiAgICB9XG5cbiAgICBpZiAodXNlRGVmYXVsdENhbnZhcykge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IENhbnZhc01hbmFnZXIuZ2V0RGVmYXVsdENhbnZhcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FudmFzID0gQ2FudmFzTWFuYWdlci5nZXROZXdDYW52YXMoKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdyk7XG4gICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoKTtcblxuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuICAgIHRoaXMuY29udGV4dC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRleHQubXNJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmltYWdlRGF0YSA9IHRoaXMuY29udGV4dC5jcmVhdGVJbWFnZURhdGEodywgaCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbnAuc2V0UGl4ZWwgPSBmdW5jdGlvbihwb3NYLCBwb3NZLCBjb2xvcikge1xuICAgIHZhciBpbmRleCA9IChwb3NZICogdGhpcy5pbWFnZURhdGEud2lkdGggKyBwb3NYKSAqIDQ7XG4gICAgdGhpcy5zZXRQaXhlbEJ5SW5kZXgoaW5kZXgsIGNvbG9yKTtcbn07XG5cbnAuc2V0UGl4ZWxCeUluZGV4ID0gZnVuY3Rpb24oaW5kZXgsIGNvbG9yKSB7XG4gICAgdmFyIHBpeGVscyA9IHRoaXMuaW1hZ2VEYXRhLmRhdGE7XG5cbiAgICBwaXhlbHNbaW5kZXhdID0gKGNvbG9yID4+PiAxNikgJiAweGZmO1xuICAgIHBpeGVsc1tpbmRleCArIDFdID0gKGNvbG9yID4+PiA4KSAmIDB4ZmY7XG4gICAgcGl4ZWxzW2luZGV4ICsgMl0gPSAoY29sb3IgPj4+IDApICYgMHhmZjtcbiAgICBwaXhlbHNbaW5kZXggKyAzXSA9IChjb2xvciA+Pj4gMjQpICYgMHhmZjtcbn07XG5cbnAuY2hlY2tQaXhlbEF2YWlsYWJsZSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgaW5kZXggPSAoeSAqIHRoaXMuaW1hZ2VEYXRhLndpZHRoICsgeCkgKiA0O1xuXG4gICAgcmV0dXJuIHRoaXMuaW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAzXSA9PT0gMDtcbn07XG5cbnAuZmxvb2RGaWxsID0gZnVuY3Rpb24ocG9zWCwgcG9zWSwgY29sb3IpIHtcbiAgICBpZiAoKChjb2xvciA+Pj4gMjQpICYgMHhmZikgPT09IDB4MDApIHtcbiAgICAgICAgLy8gdHJhbnNwYXJlbnQgZmxvb2QgZmlsbFxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHggPSBwb3NYLFxuICAgICAgICB5ID0gcG9zWSxcbiAgICAgICAgc3RhY2sgPSBbXSxcbiAgICAgICAgbm93Q29sID0gW10sXG4gICAgICAgIHByZXZDb2wgPSBbXSxcbiAgICAgICAgY29sLFxuICAgICAgICByb3csXG4gICAgICAgIG1hdGNoRmxhZyxcbiAgICAgICAgbmV3U3RhcnQsXG4gICAgICAgIHcgPSB0aGlzLmltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgaCA9IHRoaXMuaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgaSxcbiAgICAgICAgajtcblxuICAgIC8vIGJvdW5kIHJlYWNoXG4gICAgaWYgKHggPCAwIHx8IHkgPCAwIHx8IHggPj0gdyB8fCB5ID49IGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGZpcnN0IHBvaW50IGNoZWNrIGZhaWxcbiAgICBpZiAoIXRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZSh4LCB5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YXJ0IHBvaW50IGZvciBmbG9vZCBmaWxsIGlzIGFscmVhZHkgZmlsbGVkJyk7XG4gICAgfVxuXG4gICAgLy8gbGVmdCBzaWRlIGZsb29kIGZpbGxcbiAgICBmb3IgKGNvbCA9IHg7IGNvbCA+PSAwOyBjb2wgLT0gMSkge1xuICAgICAgICAvLyB0b3Agc2lkZVxuICAgICAgICBmb3IgKHJvdyA9IHk7IHJvdyA+PSAwOyByb3cgLT0gMSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wsIHJvdykpIHtcbiAgICAgICAgICAgICAgICAvLyBhdmFpbGFibGUgcGl4ZWxcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKChyb3cgKiB3ICsgY29sKSAqIDQpO1xuICAgICAgICAgICAgICAgIG5vd0NvbC5wdXNoKHJvdyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGZpcnN0IG9uZSBpcyBpbnZhbGlkIHBpeGVsICYmIG5vdCBhdCBjb2wgdG9wXG4gICAgICAgICAgICAgICAgaWYgKHJvdyA9PT0geSAmJiB0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sICsgMSwgcm93IC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBvbmUgaXMgdmFsaWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wsIHJvdyAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFydCA9IHJvdyAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCArIDEsIHJvdyAtIDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSByb3cgLSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWlsLCBhc3NpZ24gbWF4IHZhbHVlIHRvIGF2b2lkIGxvb3AgYmVsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFydCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSBuZXdTdGFydDsgcm93ID49IDA7IHJvdyAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCwgcm93KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBwaXhlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKHJvdyAqIHcgKyBjb2wpICogNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93Q29sLnB1c2gocm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJvdHRvbSBzaWRlXG4gICAgICAgIGZvciAocm93ID0geTsgcm93IDwgaDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIHBpeGVsXG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaCgocm93ICogdyArIGNvbCkgKiA0KTtcbiAgICAgICAgICAgICAgICBub3dDb2wucHVzaChyb3cpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBmaXJzdCBvbmUgaXMgaW52YWxpZCBwaXhlbCAmJiBub3QgYXQgY29sIGJvdHRvbVxuICAgICAgICAgICAgICAgIGlmIChyb3cgPT09IHkgJiYgdGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCArIDEsIHJvdyArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHQgb25lIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSByb3cgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgKyAxLCByb3cgKyAyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gcm93ICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFpbCwgYXNzaWduIG1heCB2YWx1ZSB0byBhdm9pZCBsb29wIGJlbG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSBoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSBuZXdTdGFydDsgcm93IDwgaDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIHBpeGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgocm93ICogdyArIGNvbCkgKiA0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dDb2wucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGFyZSB3aXRoIHByZXZpb3VzIGNvbHVtblxuICAgICAgICAvLyBmb3IgZmlyc3QgY29sdW1uXG4gICAgICAgIC8vIHRoZSBnaXZlbiBwb2ludCBzaG91bGQgYmUgaW5zaWRlIHRoZSBjb250YWluZXJcbiAgICAgICAgaWYgKGNvbCA9PT0geCkge1xuICAgICAgICAgICAgcHJldkNvbCA9IG5vd0NvbC5jb25jYXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGNoRmxhZyA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmV2Q29sLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcHJldkNvbC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChub3dDb2xbal0gPT09IHByZXZDb2xbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHByZXZDb2xbaV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1hdGNoRmxhZykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoRmxhZykge1xuICAgICAgICAgICAgcHJldkNvbCA9IG5vd0NvbC5jb25jYXQoKTtcbiAgICAgICAgICAgIG5vd0NvbCA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYm91bmQgcmVhY2hcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgc3RhcnQgcG9pbnRcbiAgICB4ID0gcG9zWDtcbiAgICB5ID0gcG9zWTtcbiAgICBwcmV2Q29sID0gW107XG4gICAgbm93Q29sID0gW107XG5cbiAgICAvLyByaWdodCBzaWRlIGZsb29kIGZpbGxcbiAgICBmb3IgKGNvbCA9IHg7IGNvbCA8IHc7IGNvbCArPSAxKSB7XG4gICAgICAgIC8vIHRvcCBzaWRlXG4gICAgICAgIGZvciAocm93ID0geTsgcm93ID49IDA7IHJvdyAtPSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCwgcm93KSkge1xuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBwaXhlbFxuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKHJvdyAqIHcgKyBjb2wpICogNCk7XG4gICAgICAgICAgICAgICAgbm93Q29sLnB1c2gocm93KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZmlyc3Qgb25lIGlzIGludmFsaWQgcGl4ZWwgJiYgbm90IGF0IGNvbCB0b3BcbiAgICAgICAgICAgICAgICBpZiAocm93ID09PSB5ICYmIHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wgLSAxLCByb3cgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IG9uZSBpcyB2YWxpZFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCwgcm93IC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gcm93IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sIC0gMSwgcm93IC0gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFydCA9IHJvdyAtIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZhaWwsIGFzc2lnbiBtYXggdmFsdWUgdG8gYXZvaWQgbG9vcCBiZWxvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHJvdyA9IG5ld1N0YXJ0OyByb3cgPj0gMDsgcm93IC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIHBpeGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgocm93ICogdyArIGNvbCkgKiA0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dDb2wucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYm90dG9tIHNpZGVcbiAgICAgICAgZm9yIChyb3cgPSB5OyByb3cgPCBoOyByb3cgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wsIHJvdykpIHtcbiAgICAgICAgICAgICAgICAvLyBhdmFpbGFibGUgcGl4ZWxcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKChyb3cgKiB3ICsgY29sKSAqIDQpO1xuICAgICAgICAgICAgICAgIG5vd0NvbC5wdXNoKHJvdyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGZpcnN0IG9uZSBpcyBpbnZhbGlkIHBpeGVsICYmIG5vdCBhdCBjb2wgYm90dG9tXG4gICAgICAgICAgICAgICAgaWYgKHJvdyA9PT0geSAmJiB0aGlzLmNoZWNrUGl4ZWxBdmFpbGFibGUoY29sIC0gMSwgcm93ICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBvbmUgaXMgdmFsaWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wsIHJvdyArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFydCA9IHJvdyArIDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja1BpeGVsQXZhaWxhYmxlKGNvbCAtIDEsIHJvdyArIDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnQgPSByb3cgKyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWlsLCBhc3NpZ24gbWF4IHZhbHVlIHRvIGF2b2lkIGxvb3AgYmVsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFydCA9IGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHJvdyA9IG5ld1N0YXJ0OyByb3cgPCBoOyByb3cgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tQaXhlbEF2YWlsYWJsZShjb2wsIHJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdmFpbGFibGUgcGl4ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKChyb3cgKiB3ICsgY29sKSAqIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vd0NvbC5wdXNoKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21wYXJlIHdpdGggcHJldmlvdXMgY29sdW1uXG4gICAgICAgIC8vIGZvciBmaXJzdCBjb2x1bW5cbiAgICAgICAgLy8gdGhlIGdpdmVuIHBvaW50IHNob3VsZCBiZSBpbnNpZGUgdGhlIGNvbnRhaW5lclxuICAgICAgICBpZiAoY29sID09PSB4KSB7XG4gICAgICAgICAgICBwcmV2Q29sID0gbm93Q29sLmNvbmNhdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0Y2hGbGFnID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByZXZDb2wubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBwcmV2Q29sLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vd0NvbFtqXSA9PT0gcHJldkNvbFtpXSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaEZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB5ID0gcHJldkNvbFtpXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWF0Y2hGbGFnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2hGbGFnKSB7XG4gICAgICAgICAgICBwcmV2Q29sID0gbm93Q29sLmNvbmNhdCgpO1xuICAgICAgICAgICAgbm93Q29sID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBib3VuZCByZWFjaFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaWxsIGltYWdlIGRhdGFcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5zZXRQaXhlbEJ5SW5kZXgoc3RhY2tbaV0sIGNvbG9yKTtcbiAgICB9XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdbQml0bWFwRGF0YV0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCaXRtYXBEYXRhO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0UHJpbWl0aXZlLCBwO1xuQWJzdHJhY3RQcmltaXRpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG59O1xucCA9IEFic3RyYWN0UHJpbWl0aXZlLnByb3RvdHlwZTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbi8qKlxuICogdGhlIGNhbnZhcyBmb3IgZHJhd0ltYWdlIHRvIGFueSBjYW52YXNcbiAqL1xucC5jYW52YXMgPSBudWxsO1xuXG4vLyBwcm90ZWN0IHByb3BlcnRpZXNcbi8qKlxuICogdGhlIHdpZHRoIG9mIHRoZSBiaXRtYXAgaW4gMmQgZmxhc2ggY29vcmRpbmF0ZVxuICovXG5wLncgPSBudWxsO1xuXG4vKipcbiAqIHRoZSBoZWlnaHQgb2YgdGhlIGJpdG1hcCBpbiAyZCBmbGFzaCBjb29yZGluYXRlXG4gKi9cbnAuaCA9IG51bGw7XG5cbi8qKlxuICogdGhlIGRpbWVuc2lvbiBvZiBwcmltaXRpdmUgaW4gM2QgcGl4ZWwgY29vcmRpbmF0ZVxuICovXG5wLmRpbWVuc2lvbiA9IG51bGw7XG5cbi8qKlxuICogdGhlIGNvbG9yIG9iaiBvZiB0aGUgcHJpbWl0aXZlXG4gKi9cbnAuY29sb3IgPSBudWxsO1xuXG4vKipcbiAqIHRoZSBib3JkZXIgb3B0aW9uIG9mIHRoZSBwcmltaXRpdmVcbiAqL1xucC5ib3JkZXIgPSBudWxsO1xuXG4vKipcbiAqIHRoZSBzb3VyY2UgYml0bWFwZGF0YSBjb250YWlucyBwaXhlbCBncmFwaGljXG4gKi9cbnAuYml0bWFwRGF0YSA9IG51bGw7XG5cbi8qKlxuICogdGhlIHByZXNlcnZlIGNhbnZhcyBvcHRpb25cbiAqL1xucC51c2VEZWZhdWx0Q2FudmFzID0gbnVsbDtcblxuLyoqXG4gKiB0aGUgbWF0cml4IG9mZnNldCBiZXR3ZWVuIHRoZSBiaXRtYXAgYW5kIHRoZSAzZCBwaXhlbCBjb29yZGluYXRlIFpFUk8gcG9pbnRcbiAqL1xucC5tYXRyaXggPSBudWxsO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbQWJzdHJhY3RQcmltaXRpdmVdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RQcmltaXRpdmU7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3REaW1lbnNpb24sIHA7XG5BYnN0cmFjdERpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbn07XG5wID0gQWJzdHJhY3REaW1lbnNpb24ucHJvdG90eXBlO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xuLyoqXG4gKiBUaGUgeCBBeGlzIGRpbWVuc2lvbnMgaW4gMjIuNiBkZWdyZWVzIGNvb3JkaW5hdGVcbiAqL1xucC54QXhpcyA9IG51bGw7XG5cbi8qKlxuICogVGhlIHkgQXhpcyBkaW1lbnNpb25zIGluIDIyLjYgZGVncmVlcyBjb29yZGluYXRlXG4gKi9cbnAueUF4aXMgPSBudWxsO1xuXG4vKipcbiAqIFRoZSB6IEF4aXMgZGltZW5zaW9ucyBpbiAyMi42IGRlZ3JlZXMgY29vcmRpbmF0ZVxuICovXG5wLnpBeGlzID0gbnVsbDtcblxuLyoqXG4gKiBQeXJhbWlkIHRhbGwgbW9kZVxuICovXG5wLnRhbGwgPSBmYWxzZTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0Fic3RyYWN0RGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFic3RyYWN0RGltZW5zaW9uO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0Q29sb3IgPSByZXF1aXJlKCcuL0Fic3RyYWN0Q29sb3InKTtcbnZhciBDb2xvckdlb20gPSByZXF1aXJlKCcuLi91dGlscy9Db2xvckdlb20nKTtcblxudmFyIFNpZGVDb2xvciwgcDtcblNpZGVDb2xvciA9IGZ1bmN0aW9uIChib3JkZXIsIGlubmVyKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGJvcmRlciwgaW5uZXIpO1xufTtcbnAgPSBTaWRlQ29sb3IucHJvdG90eXBlID0gbmV3IEFic3RyYWN0Q29sb3IoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAuQlJJR0hUTkVTU19HQUlOID0gLTIwO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGJvcmRlciwgaW5uZXIpIHtcbiAgICB0aGlzLmJvcmRlciA9IENvbG9yR2VvbS5nZXQzMihib3JkZXIgPT09IHVuZGVmaW5lZCA/IDB4ODc4Nzg3IDogYm9yZGVyKTtcbiAgICB0aGlzLmlubmVyID0gQ29sb3JHZW9tLmdldDMyKGlubmVyID09PSB1bmRlZmluZWQgPyAweEVFRUVFRSA6IGlubmVyKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAuZ2V0QnlJbm5lckNvbG9yID0gZnVuY3Rpb24gKGlubmVyKSB7XG4gICAgcmV0dXJuIG5ldyBTaWRlQ29sb3IoXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaW5uZXIsIHRoaXMuQlJJR0hUTkVTU19HQUlOICogNCksXG4gICAgICAgIGlubmVyXG4gICAgKTtcbn07XG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbU2lkZUNvbG9yXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZGVDb2xvcjtcbiIsIu+7vy8qanNsaW50IG5vZGU6dHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENvbG9yR2VvbSwgcDtcblxuQ29sb3JHZW9tID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ29sb3JHZW9tIGlzIGEgc3RhdGljIENsYXNzLCBjYW5ub3QgYmUgaW5zdGFuY2VkLicpO1xufTtcbnAgPSBDb2xvckdlb207XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLmdldDMyID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNvbG9yIDwgMHhGRjAwMDAwMCA/IChjb2xvciArIDB4RkYwMDAwMDApIDogY29sb3I7XG59O1xuXG5wLmFwcGx5QnJpZ2h0bmVzcyA9IGZ1bmN0aW9uIChjb2xvciwgYnJpZ2h0bmVzcywgaGlnaGxpZ2h0KSB7XG4gICAgdmFyIGEsIHIsIGcsIGIsIHksIHYsIHU7XG5cbiAgICBhID0gKChjb2xvciA+Pj4gMjQpICYgMHgwMDAwMDBGRik7XG4gICAgciA9ICgoY29sb3IgPj4+IDE2KSAmIDB4MDAwMDAwRkYpO1xuICAgIGcgPSAoKGNvbG9yID4+PiA4KSAmIDB4MDAwMDAwRkYpO1xuICAgIGIgPSAoY29sb3IgJiAweDAwMDAwMEZGKTtcblxuICAgIHkgPSAoKHIgKiAzMTM1MjQpID4+IDIwKSArICgoZyAqIDYxNTUxNCkgPj4gMjApICsgKChiICogMTE5NTM4KSA+PiAyMCk7XG4gICAgdSA9IC0oKDE1NTE4OSAqIHIpID4+IDIwKSAtICgoMzAzMDM4ICogZykgPj4gMjApICsgKCg0NTgyMjcgKiBiKSA+PiAyMCk7XG4gICAgdiA9ICgoNjQ0ODc0ICogcikgPj4gMjApIC0gKCg1NDAwMTYgKiBnKSA+PiAyMCkgLSAoKDEwNDg1NyAqIGIpID4+IDIwKTtcblxuICAgIGlmICghaGlnaGxpZ2h0KSB7XG4gICAgICAgIHkgKz0gYnJpZ2h0bmVzcztcbiAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gNjAgKyBNYXRoLnBvdyh5LCAxLjIpO1xuICAgIH1cblxuICAgIHIgPSB5ICsgKCgxMTk1Mzc2ICogdikgPj4gMjApO1xuICAgIGcgPSB5IC0gKCg0MDg5NDQgKiB1KSA+PiAyMCkgLSAoKDYwODE3NCAqIHYpID4+IDIwKTtcbiAgICBiID0geSArICgoMjEyODYwOSAqIHUpID4+IDIwKTtcblxuICAgIHIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihyLCAyNTUpKTtcbiAgICBnID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZywgMjU1KSk7XG4gICAgYiA9IE1hdGgubWF4KDAsIE1hdGgubWluKGIsIDI1NSkpO1xuXG4gICAgcmV0dXJuIChhIDw8IDI0KSB8IChyIDw8IDE2KSB8IChnIDw8IDgpIHwgYjtcbn07XG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbQ29sb3JHZW9tXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yR2VvbTtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdENvbG9yLCBwO1xuXG5BYnN0cmFjdENvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xufTtcbnAgPSBBYnN0cmFjdENvbG9yLnByb3RvdHlwZTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbi8qKlxuICogVGhlIGlubmVyIGNvbG9ycyBmb3IgZWxlbWVudHMgb2YgY2VydGFpbiBwcmltaXRpdmVcbiAqL1xucC5pbm5lciA9IG51bGw7XG5cbi8qKlxuICogVGhlIGJvcmRlciBjb2xvcnMgZm9yIGVsZW1lbnRzIG9mIGNlcnRhaW4gcHJpbWl0aXZlXG4gKi9cbnAuYm9yZGVyID0gbnVsbDtcblxuLyoqXG4gKiBUaGUgYm9yZGVySGlnaGxpZ2h0IGNvbG9ycyBmb3IgZWxlbWVudHMgb2YgY2VydGFpbiBwcmltaXRpdmVcbiAqL1xucC5ib3JkZXJIaWdobGlnaHQgPSBudWxsO1xuXG4vKipcbiAqIFRoZSBsZWZ0IHNpZGUgY29sb3JzIGZvciBlbGVtZW50cyBvZiBjZXJ0YWluIHByaW1pdGl2ZVxuICovXG5wLmxlZnQgPSBudWxsO1xuXG4vKipcbiAqIFRoZSByaWdodCBzaWRlIGNvbG9ycyBmb3IgZWxlbWVudHMgb2YgY2VydGFpbiBwcmltaXRpdmVcbiAqL1xucC5yaWdodCA9IG51bGw7XG5cbi8qKlxuICogVGhlIGhvcml6b250YWwgY29sb3JzIGZvciBlbGVtZW50cyBvZiBjZXJ0YWluIHByaW1pdGl2ZVxuICovXG5wLmhvcml6b250YWwgPSBudWxsO1xuXG4vKipcbiAqIFRoZSBsZWZ0IHNsb3Qgc2lkZSBjb2xvcnMgZm9yIGVsZW1lbnRzIG9mIGNlcnRhaW4gcHJpbWl0aXZlXG4gKi9cbnAubGVmdFNsb3BlID0gbnVsbDtcblxuLyoqXG4gKiBUaGUgcmlnaHQgc2xvdCBzaWRlIGNvbG9ycyBmb3IgZWxlbWVudHMgb2YgY2VydGFpbiBwcmltaXRpdmVcbiAqL1xucC5yaWdodFNsb3BlID0gbnVsbDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0Fic3RyYWN0Q29sb3JdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RDb2xvcjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb2ludDNEID0gcmVxdWlyZSgnLi4vZ2VvbS9Qb2ludDNEJyk7XG5cbnZhciBQaXhlbE9iamVjdCwgcDtcblBpeGVsT2JqZWN0ID0gZnVuY3Rpb24gKHByaW1pdGl2ZSwgcG9pbnQzRCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShwcmltaXRpdmUsIHBvaW50M0QpO1xufTtcbnAgPSBQaXhlbE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5wLnggPSBudWxsO1xucC55ID0gbnVsbDtcbnAuY2FudmFzID0gbnVsbDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChwcmltaXRpdmUsIHBvaW50M0QpIHtcbiAgICBpZiAoIXByaW1pdGl2ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByaW1pdGl2ZSBpcyBub3QgZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHZhciBwM0QgPSBwb2ludDNEIHx8IG5ldyBQb2ludDNEKCk7XG5cbiAgICB0aGlzLmNhbnZhcyA9IHByaW1pdGl2ZS5jYW52YXM7XG4gICAgdGhpcy54ID0gcHJpbWl0aXZlLm1hdHJpeC50eCArIHAzRC54IC0gcDNELnk7XG4gICAgdGhpcy55ID0gcHJpbWl0aXZlLm1hdHJpeC50eSArIE1hdGguZmxvb3IocDNELnggLyAyICsgcDNELnkgLyAyKSAtIHAzRC56O1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1BpeGVsT2JqZWN0XSc7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZHNcblxubW9kdWxlLmV4cG9ydHMgPSBQaXhlbE9iamVjdDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIFNsb3BlRGltZW5zaW9uLCBwO1xuU2xvcGVEaW1lbnNpb24gPSBmdW5jdGlvbiAoeEF4aXMsIHlBeGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHhBeGlzLCB5QXhpcyk7XG59O1xucCA9IFNsb3BlRGltZW5zaW9uLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdERpbWVuc2lvbigpO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKHhBeGlzLCB5QXhpcykge1xuICAgIHRoaXMueEF4aXMgPSB4QXhpcyB8fCAzMDtcbiAgICB0aGlzLnlBeGlzID0geUF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy54QXhpcyAlIDIgPT09IDEgfHwgdGhpcy55QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd4QXhpcyBhbmQgeUF4aXMgbXVzdCBiZSBldmVuIG51bWJlcicpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnhBeGlzIDw9IDQgfHwgdGhpcy55QXhpcyA8PSA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTbG9wZURpbWVuc2lvbl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbG9wZURpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdENvbG9yID0gcmVxdWlyZSgnLi9BYnN0cmFjdENvbG9yJyk7XG52YXIgQ29sb3JHZW9tID0gcmVxdWlyZSgnLi4vdXRpbHMvQ29sb3JHZW9tJyk7XG5cbnZhciBTbG9wZUNvbG9yLCBwO1xuU2xvcGVDb2xvciA9IGZ1bmN0aW9uIChib3JkZXIsIGJvcmRlckhpZ2hsaWdodCwgbGVmdCwgcmlnaHQsIGxlZnRTbG9wZSwgcmlnaHRTbG9wZSkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShib3JkZXIsIGJvcmRlckhpZ2hsaWdodCwgbGVmdCwgcmlnaHQsIGxlZnRTbG9wZSwgcmlnaHRTbG9wZSk7XG59O1xucCA9IFNsb3BlQ29sb3IucHJvdG90eXBlID0gbmV3IEFic3RyYWN0Q29sb3IoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAuQlJJR0hUTkVTU19HQUlOID0gLTIwO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCwgbGVmdFNsb3BlLCByaWdodFNsb3BlKSB7XG4gICAgdGhpcy5ib3JkZXIgPSBDb2xvckdlb20uZ2V0MzIoYm9yZGVyID09PSB1bmRlZmluZWQgPyAweDk0OTY5OCA6IGJvcmRlcik7XG4gICAgdGhpcy5ib3JkZXJIaWdobGlnaHQgPSBDb2xvckdlb20uZ2V0MzIoYm9yZGVySGlnaGxpZ2h0ID09PSB1bmRlZmluZWQgPyAweEZGRkZGRiA6IGJvcmRlckhpZ2hsaWdodCk7XG4gICAgdGhpcy5sZWZ0ID0gQ29sb3JHZW9tLmdldDMyKGxlZnQgPT09IHVuZGVmaW5lZCA/IDB4QzlDRkQwIDogbGVmdCk7XG4gICAgdGhpcy5yaWdodCA9IENvbG9yR2VvbS5nZXQzMihyaWdodCA9PT0gdW5kZWZpbmVkID8gMHhFNkU4RTkgOiByaWdodCk7XG4gICAgdGhpcy5sZWZ0U2xvcGUgPSBDb2xvckdlb20uZ2V0MzIobGVmdFNsb3BlID09PSB1bmRlZmluZWQgPyAweERCREJEQiA6IGxlZnRTbG9wZSk7XG4gICAgdGhpcy5yaWdodFNsb3BlID0gQ29sb3JHZW9tLmdldDMyKHJpZ2h0U2xvcGUgPT09IHVuZGVmaW5lZCA/IDB4REJEQkRCIDogcmlnaHRTbG9wZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5cbi8qXG4gKiBob3Jpem9udGFsIHNpZGUgZG9lc24ndCBhY3R1YWxseSBleGlzdCBpbiB0aGUgU2xvcGUgcHJpbWl0aXZlXG4gKiB5b3UgY2FuIGFzc2lnbiB0aGUgc2FtZSBob3Jpem9udGFsIGNvbG9yIGFzIGN1YmVcbiAqIHNvIHRoYXQgeW91IHdpbGwgYmUgYWJsZSB0byBhcnJhbmdlIHRoZSBzbG9wZSB3aXRoIGN1YmVcbiAqL1xucC5nZXRCeUhvcml6b250YWxDb2xvciA9IGZ1bmN0aW9uIChob3Jpem9udGFsKSB7XG4gICAgcmV0dXJuIG5ldyBTbG9wZUNvbG9yKFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKGhvcml6b250YWwsIHRoaXMuQlJJR0hUTkVTU19HQUlOICogNCksXG4gICAgICAgIC8vYXBwbHkgaGlnaHRsaWdodFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKGhvcml6b250YWwsIDAsIHRydWUpLFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKGhvcml6b250YWwsIHRoaXMuQlJJR0hUTkVTU19HQUlOICogMiksXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgdGhpcy5CUklHSFRORVNTX0dBSU4pLFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKGhvcml6b250YWwsIHRoaXMuQlJJR0hUTkVTU19HQUlOICogMS41KSxcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhob3Jpem9udGFsLCB0aGlzLkJSSUdIVE5FU1NfR0FJTiAqIDAuNSlcbiAgICApO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTbG9wZUNvbG9yXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3BlQ29sb3I7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3REaW1lbnNpb24gPSByZXF1aXJlKCcuL0Fic3RyYWN0RGltZW5zaW9uJyk7XG5cbnZhciBTaWRlWERpbWVuc2lvbiwgcDtcblNpZGVYRGltZW5zaW9uID0gZnVuY3Rpb24gKHhBeGlzLCB6QXhpcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSh4QXhpcywgekF4aXMpO1xufTtcbnAgPSBTaWRlWERpbWVuc2lvbi5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3REaW1lbnNpb24oKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh4QXhpcywgekF4aXMpIHtcbiAgICB0aGlzLnhBeGlzID0geEF4aXMgfHwgMzA7XG4gICAgdGhpcy56QXhpcyA9IHpBeGlzIHx8IDMwO1xuXG4gICAgaWYgKHRoaXMueEF4aXMgJSAyID09PSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigneEF4aXMgbXVzdCBiZSBldmVuIG51bWJlcicpO1xuICAgIH1cblxuICAgIC8vIHhBeGlzIHx8IHpBeGlzID0gNCBmbG9vZEZpbGwgY291bGQgbm90IGJlIGFwcGxpZWRcbiAgICBpZiAodGhpcy54QXhpcyA8PSA0IHx8IHRoaXMuekF4aXMgPD0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpbWVuc2lvbiBpcyB0b28gc21hbGwnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbU2lkZVhEaW1lbnNpb25dJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2lkZVhEaW1lbnNpb247XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3REaW1lbnNpb24gPSByZXF1aXJlKCcuL0Fic3RyYWN0RGltZW5zaW9uJyk7XG5cbnZhciBTaWRlWURpbWVuc2lvbiwgcDtcblxuU2lkZVlEaW1lbnNpb24gPSBmdW5jdGlvbiAoeUF4aXMsIHpBeGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHlBeGlzLCB6QXhpcyk7XG59O1xucCA9IFNpZGVZRGltZW5zaW9uLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdERpbWVuc2lvbigpO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKHlBeGlzLCB6QXhpcykge1xuICAgIHRoaXMueUF4aXMgPSB5QXhpcyB8fCAzMDtcbiAgICB0aGlzLnpBeGlzID0gekF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy55QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd5QXhpcyBtdXN0IGJlIGV2ZW4gbnVtYmVyJyk7XG4gICAgfVxuXG4gICAgLy8geUF4aXMgfHwgekF4aXMgPSA0IGZsb29kRmlsbCBjb3VsZCBub3QgYmUgYXBwbGllZFxuICAgIGlmICh0aGlzLnlBeGlzIDw9IDQgfHwgdGhpcy56QXhpcyA8PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTaWRlWURpbWVuc2lvbl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWRlWURpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdENvbG9yID0gcmVxdWlyZSgnLi9BYnN0cmFjdENvbG9yJyk7XG52YXIgQ29sb3JHZW9tID0gcmVxdWlyZSgnLi4vdXRpbHMvQ29sb3JHZW9tJyk7XG5cbnZhciBMaW5lQ29sb3IsIHA7XG5MaW5lQ29sb3IgPSBmdW5jdGlvbiAoYm9yZGVyLCBpbm5lcikge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShib3JkZXIsIGlubmVyKTtcbn07XG5wID0gTGluZUNvbG9yLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdENvbG9yKCk7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoYm9yZGVyKSB7XG4gICAgdGhpcy5ib3JkZXIgPSBDb2xvckdlb20uZ2V0MzIoYm9yZGVyID09PSB1bmRlZmluZWQgPyAweDg3ODc4NyA6IGJvcmRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbTGluZUNvbG9yXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmVDb2xvcjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIEJyaWNrRGltZW5zaW9uLCBwO1xuQnJpY2tEaW1lbnNpb24gPSBmdW5jdGlvbiAoeEF4aXMsIHlBeGlzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKHhBeGlzLCB5QXhpcyk7XG59O1xucCA9IEJyaWNrRGltZW5zaW9uLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdERpbWVuc2lvbigpO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKHhBeGlzLCB5QXhpcykge1xuICAgIHRoaXMueEF4aXMgPSB4QXhpcyB8fCAzMDtcbiAgICB0aGlzLnlBeGlzID0geUF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy54QXhpcyAlIDIgPT09IDEgfHwgdGhpcy55QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd4LHlBeGlzIG11c3QgYmUgZXZlbiBudW1iZXInKTtcbiAgICB9XG5cbiAgICAvLyB4QXhpcyB8fCB5QXhpcyA9IDQgZmxvb2RGaWxsIGNvdWxkIG5vdCBiZSBhcHBsaWVkXG4gICAgaWYgKHRoaXMueEF4aXMgPD0gNCB8fCB0aGlzLnlBeGlzIDw9IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaW1lbnNpb24gaXMgdG9vIHNtYWxsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0JyaWNrRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJyaWNrRGltZW5zaW9uO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvaW50LCBwO1xuUG9pbnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSh4LCB5KTtcbn07XG5wID0gUG9pbnQucHJvdG90eXBlO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xucC54ID0gMDtcbnAueSA9IDA7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHRoaXMueCA9ICh4ID09PSB1bmRlZmluZWQgPyAwIDogeCk7XG4gICAgdGhpcy55ID0gKHkgPT09IHVuZGVmaW5lZCA/IDAgOiB5KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbUG9pbnQgeCA6ICcgKyB0aGlzLnggKyAnLCB5IDogJyArIHRoaXMueSArICddJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnQ7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2lkZVhEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL1NpZGVYRGltZW5zaW9uJyk7XG52YXIgU2lkZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1NpZGVDb2xvcicpO1xudmFyIE1hdHJpeCA9IHJlcXVpcmUoJy4uL2dlb20vTWF0cml4Jyk7XG52YXIgQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvQml0bWFwRGF0YScpO1xudmFyIEFic3RyYWN0UHJpbWl0aXZlID0gcmVxdWlyZSgnLi9BYnN0cmFjdFByaW1pdGl2ZScpO1xuXG52YXIgU2lkZVgsIHA7XG5TaWRlWCA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gU2lkZVgucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuYm9yZGVyID0gYm9yZGVyIHx8IGJvcmRlciA9PT0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgU2lkZVhEaW1lbnNpb24oKSA6IGRpbWVuc2lvbjtcbiAgICB0aGlzLmNvbG9yID0gY29sb3IgPT09IHVuZGVmaW5lZCA/IG5ldyBTaWRlQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzO1xuICAgIHRoaXMuaCA9IHRoaXMuZGltZW5zaW9uLnpBeGlzICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLyAyO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAwO1xuICAgIHRoaXMubWF0cml4LnR5ID0gLXRoaXMuZGltZW5zaW9uLnpBeGlzO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHhPZmZzZXRJbm5lciwgeU9mZnNldElubmVyLCB4T2Zmc2V0T3V0LCB5T2Zmc2V0T3V0LCBpLCBqLCBib3JkZXJDb2xvcjtcblxuICAgIHhPZmZzZXRJbm5lciA9IDA7XG4gICAgeU9mZnNldElubmVyID0gdGhpcy5kaW1lbnNpb24uekF4aXM7XG4gICAgeE9mZnNldE91dCA9IHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMTtcbiAgICB5T2Zmc2V0T3V0ID0gdGhpcy5oIC0gdGhpcy5kaW1lbnNpb24uekF4aXMgLSAxO1xuICAgIGJvcmRlckNvbG9yID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IuaW5uZXI7XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0SW5uZXIgKyBpLCB5T2Zmc2V0SW5uZXIgKyBNYXRoLmZsb29yKGkgLyAyKSwgYm9yZGVyQ29sb3IpO1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldE91dCAtIGksIHlPZmZzZXRPdXQgLSBNYXRoLmZsb29yKGkgLyAyKSwgYm9yZGVyQ29sb3IpO1xuICAgIH1cblxuICAgIC8veiBheGlzXG4gICAgZm9yIChqID0gMDsgaiA8IHRoaXMuZGltZW5zaW9uLnpBeGlzOyBqICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRJbm5lciwgeU9mZnNldElubmVyIC0gaiwgYm9yZGVyQ29sb3IpO1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldE91dCwgeU9mZnNldE91dCArIGosIGJvcmRlckNvbG9yKTtcbiAgICB9XG5cbiAgICAvL2ZpbGwgYW4gcGl4ZWwgZ3JhcGhpYyBlbmNsb3NlZFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwoTWF0aC5mbG9vcih0aGlzLncgLyAyKSwgTWF0aC5mbG9vcih0aGlzLmggLyAyKSwgdGhpcy5jb2xvci5pbm5lcik7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTaWRlWF0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWRlWDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTaWRlWURpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVlEaW1lbnNpb24nKTtcbnZhciBTaWRlQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvU2lkZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG5cbnZhciBTaWRlWSwgcDtcblNpZGVZID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBTaWRlWS5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBTaWRlWURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IFNpZGVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24uekF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDI7XG5cbiAgICAvLyB0aGUgbWF0cml4IG9mZnNldCBiZXR3ZWVuIHRoZSBiaXRtYXAgYW5kIHRoZSAzZCBwaXhlbCBjb29yZGluYXRlIFpFUk8gcG9pbnRcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeC50eCA9IC10aGlzLmRpbWVuc2lvbi55QXhpcyArIDI7XG4gICAgdGhpcy5tYXRyaXgudHkgPSAtdGhpcy5kaW1lbnNpb24uekF4aXM7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEuY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5iaXRtYXBEYXRhLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmJpdG1hcERhdGEuY2FudmFzO1xufTtcblxucC5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeE9mZnNldElubmVyLCB5T2Zmc2V0SW5uZXIsIHhPZmZzZXRPdXQsIHlPZmZzZXRPdXQsIGksIGosIGJvcmRlckNvbG9yO1xuXG4gICAgeE9mZnNldElubmVyID0gMDtcbiAgICB5T2Zmc2V0SW5uZXIgPSB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi56QXhpcyAtIDE7XG4gICAgeE9mZnNldE91dCA9IHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMTtcbiAgICB5T2Zmc2V0T3V0ID0gdGhpcy5kaW1lbnNpb24uekF4aXM7XG4gICAgYm9yZGVyQ29sb3IgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5pbm5lcjtcblxuICAgIC8veSBheGlzXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9uLnlBeGlzOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRJbm5lciArIGksIHlPZmZzZXRJbm5lciAtIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0T3V0IC0gaSwgeU9mZnNldE91dCArIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgfVxuXG4gICAgLy96IGF4aXNcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5kaW1lbnNpb24uekF4aXM7IGogKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldElubmVyLCB5T2Zmc2V0SW5uZXIgKyBqLCBib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0T3V0LCB5T2Zmc2V0T3V0IC0gaiwgYm9yZGVyQ29sb3IpO1xuICAgIH1cblxuICAgIC8vZmlsbCBhbiBwaXhlbCBncmFwaGljIGVuY2xvc2VkXG4gICAgdGhpcy5iaXRtYXBEYXRhLmZsb29kRmlsbChNYXRoLmZsb29yKHRoaXMudyAvIDIpLCBNYXRoLmZsb29yKHRoaXMuaCAvIDIpLCB0aGlzLmNvbG9yLmlubmVyKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1NpZGVZXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZGVZO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFic3RyYWN0RGltZW5zaW9uID0gcmVxdWlyZSgnLi9BYnN0cmFjdERpbWVuc2lvbicpO1xuXG52YXIgQ3ViZURpbWVuc2lvbiwgcDtcbkN1YmVEaW1lbnNpb24gPSBmdW5jdGlvbiAoeEF4aXMsIHlBeGlzLCB6QXhpcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSh4QXhpcywgeUF4aXMsIHpBeGlzKTtcbn07XG5wID0gQ3ViZURpbWVuc2lvbi5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3REaW1lbnNpb24oKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh4QXhpcywgeUF4aXMsIHpBeGlzKSB7XG4gICAgdGhpcy54QXhpcyA9IHhBeGlzIHx8IDMwO1xuICAgIHRoaXMueUF4aXMgPSB5QXhpcyB8fCAzMDtcbiAgICB0aGlzLnpBeGlzID0gekF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy54QXhpcyAlIDIgPT09IDEgfHwgdGhpcy55QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd4LHlBeGlzIG11c3QgYmUgZXZlbiBudW1iZXInKTtcbiAgICB9XG5cbiAgICAvLyB4QXhpcyB8fCB5QXhpcyA9IDQgZmxvb2RGaWxsIGNvdWxkIG5vdCBiZSBhcHBsaWVkXG4gICAgaWYgKHRoaXMueEF4aXMgPD0gNCB8fCB0aGlzLnlBeGlzIDw9IDQgfHwgdGhpcy56QXhpcyA8PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tDdWJlRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEN1YmVEaW1lbnNpb247XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3RDb2xvciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RDb2xvcicpO1xudmFyIENvbG9yR2VvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL0NvbG9yR2VvbScpO1xuXG52YXIgQ3ViZUNvbG9yLCBwO1xuQ3ViZUNvbG9yID0gZnVuY3Rpb24gKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCwgaG9yaXpvbnRhbCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShib3JkZXIsIGJvcmRlckhpZ2hsaWdodCwgbGVmdCwgcmlnaHQsIGhvcml6b250YWwpO1xufTtcbnAgPSBDdWJlQ29sb3IucHJvdG90eXBlID0gbmV3IEFic3RyYWN0Q29sb3IoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAuQlJJR0hUTkVTU19HQUlOID0gLTIwO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCwgaG9yaXpvbnRhbCkge1xuICAgIHRoaXMuYm9yZGVyID0gQ29sb3JHZW9tLmdldDMyKGJvcmRlciA9PT0gdW5kZWZpbmVkID8gMHg4Nzg3ODcgOiBib3JkZXIpO1xuICAgIHRoaXMuYm9yZGVySGlnaGxpZ2h0ID0gQ29sb3JHZW9tLmdldDMyKGJvcmRlckhpZ2hsaWdodCA9PT0gdW5kZWZpbmVkID8gMHhGRkZGRkYgOiBib3JkZXJIaWdobGlnaHQpO1xuICAgIHRoaXMubGVmdCA9IENvbG9yR2VvbS5nZXQzMihsZWZ0ID09PSB1bmRlZmluZWQgPyAweEM5Q0ZEMCA6IGxlZnQpO1xuICAgIHRoaXMucmlnaHQgPSBDb2xvckdlb20uZ2V0MzIocmlnaHQgPT09IHVuZGVmaW5lZCA/IDB4RTNFM0UzIDogcmlnaHQpO1xuICAgIHRoaXMuaG9yaXpvbnRhbCA9IENvbG9yR2VvbS5nZXQzMihob3Jpem9udGFsID09PSB1bmRlZmluZWQgPyAweEVFRUZGMCA6IGhvcml6b250YWwpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC5nZXRCeUhvcml6b250YWxDb2xvciA9IGZ1bmN0aW9uIChob3Jpem9udGFsKSB7XG4gICAgcmV0dXJuIG5ldyBDdWJlQ29sb3IoXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgdGhpcy5CUklHSFRORVNTX0dBSU4gKiA0KSxcbiAgICAgICAgLy9hcHBseSBoaWdodGxpZ2h0XG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgMCwgdHJ1ZSksXG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MoaG9yaXpvbnRhbCwgdGhpcy5CUklHSFRORVNTX0dBSU4gKiAyKSxcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhob3Jpem9udGFsLCB0aGlzLkJSSUdIVE5FU1NfR0FJTiksXG4gICAgICAgIGhvcml6b250YWxcbiAgICApO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tDdWJlQ29sb3JdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ3ViZUNvbG9yO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvaW50ID0gcmVxdWlyZSgnLi9Qb2ludCcpO1xuXG52YXIgUG9pbnQzRCwgcDtcblBvaW50M0QgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSh4LCB5LCB6KTtcbn07XG5wID0gUG9pbnQzRC5wcm90b3R5cGU7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5wLnggPSAwO1xucC55ID0gMDtcbnAueiA9IDA7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICAgIHRoaXMueCA9ICh4ID09PSB1bmRlZmluZWQgPyAwIDogeCk7XG4gICAgdGhpcy55ID0gKHkgPT09IHVuZGVmaW5lZCA/IDAgOiB5KTtcbiAgICB0aGlzLnogPSAoeiA9PT0gdW5kZWZpbmVkID8gMCA6IHopO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b0dsb2JhbENvb3JkaW5hdGVzID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICAgIHZhciBwMkQgPSBuZXcgUG9pbnQoXG4gICAgICAgIHRoaXMueCAtIHRoaXMueSxcbiAgICAgICAgTWF0aC5mbG9vcih0aGlzLnggLyAyICsgdGhpcy55IC8gMikgLSB0aGlzLnpcbiAgICApO1xuXG4gICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHAyRC54ID0gcDJELnggKyBvZmZzZXQueDtcbiAgICAgICAgcDJELnkgPSBwMkQueSArIG9mZnNldC55O1xuICAgIH1cblxuICAgIHJldHVybiBwMkQ7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1BvaW50M0QgeCA6ICcgKyB0aGlzLnggKyAnLCB5IDogJyArIHRoaXMueSArICcsIHo6ICcgKyB0aGlzLnogKyAnXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvaW50M0Q7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cbi8qZ2xvYmFsIGRvY3VtZW50OnRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYW52YXNNYW5hZ2VyLCBwO1xuQ2FudmFzTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhc01hbmFnZXIgaXMgYSBzdGF0aWMgQ2xhc3MsIGNhbm5vdCBiZSBpbnN0YW5jZWQuJyk7XG59O1xucCA9IENhbnZhc01hbmFnZXI7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5wLmRlZmF1bHRDYW52YXMgPSBudWxsO1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC5nZXREZWZhdWx0Q2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHAuZGVmYXVsdENhbnZhcyA9IHAuZGVmYXVsdENhbnZhcyB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICByZXR1cm4gcC5kZWZhdWx0Q2FudmFzO1xufTtcblxucC5nZXROZXdDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tDYW52YXNNYW5hZ2VyXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbnZhc01hbmFnZXI7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQnJpY2tEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL0JyaWNrRGltZW5zaW9uJyk7XG52YXIgU2lkZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1NpZGVDb2xvcicpO1xudmFyIE1hdHJpeCA9IHJlcXVpcmUoJy4uL2dlb20vTWF0cml4Jyk7XG52YXIgQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvQml0bWFwRGF0YScpO1xudmFyIEFic3RyYWN0UHJpbWl0aXZlID0gcmVxdWlyZSgnLi9BYnN0cmFjdFByaW1pdGl2ZScpO1xuXG52YXIgQnJpY2ssIHA7XG5CcmljayA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gQnJpY2sucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuYm9yZGVyID0gYm9yZGVyIHx8IGJvcmRlciA9PT0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgQnJpY2tEaW1lbnNpb24oKSA6IGRpbWVuc2lvbjtcbiAgICB0aGlzLmNvbG9yID0gY29sb3IgPT09IHVuZGVmaW5lZCA/IG5ldyBTaWRlQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzICsgdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gKHRoaXMuZGltZW5zaW9uLnhBeGlzICsgdGhpcy5kaW1lbnNpb24ueUF4aXMpIC8gMjtcblxuICAgIC8vIDIyLjYgZGVncmVlcyBpbXBsZW1lbnRhdGlvblxuICAgIHRoaXMudyAtPSAyO1xuICAgIHRoaXMuaCAtPSAxO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAtdGhpcy5kaW1lbnNpb24ueUF4aXMgKyAyO1xuICAgIHRoaXMubWF0cml4LnR5ID0gMDtcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xucC5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YS5jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLmJpdG1hcERhdGEuaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuYml0bWFwRGF0YS5jYW52YXM7XG59O1xuXG5wLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4T2Zmc2V0SW5uZXIsIHlPZmZzZXRJbm5lciwgeE9mZnNldE91dCwgeU9mZnNldE91dCwgaSwgaiwgYm9yZGVyQ29sb3I7XG5cbiAgICB4T2Zmc2V0SW5uZXIgPSB0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDI7XG4gICAgeU9mZnNldElubmVyID0gMDtcbiAgICB4T2Zmc2V0T3V0ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxO1xuICAgIHlPZmZzZXRPdXQgPSB0aGlzLmggLSAxO1xuICAgIGJvcmRlckNvbG9yID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IuaW5uZXI7XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0SW5uZXIgKyBpLCB5T2Zmc2V0SW5uZXIgKyBNYXRoLmZsb29yKGkgLyAyKSwgYm9yZGVyQ29sb3IpO1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldE91dCAtIGksIHlPZmZzZXRPdXQgLSBNYXRoLmZsb29yKGkgLyAyKSwgYm9yZGVyQ29sb3IpO1xuICAgIH1cblxuICAgIC8veSBheGlzXG4gICAgZm9yIChqID0gMDsgaiA8IHRoaXMuZGltZW5zaW9uLnlBeGlzOyBqICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRJbm5lciArIDEgLSBqLCB5T2Zmc2V0SW5uZXIgKyBNYXRoLmZsb29yKGogLyAyKSwgYm9yZGVyQ29sb3IpO1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoeE9mZnNldE91dCAtIDEgKyBqLCB5T2Zmc2V0T3V0IC0gTWF0aC5mbG9vcihqIC8gMiksIGJvcmRlckNvbG9yKTtcbiAgICB9XG5cbiAgICAvL2ZpbGwgYW4gcGl4ZWwgZ3JhcGhpYyBlbmNsb3NlZFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwoTWF0aC5mbG9vcih0aGlzLncgLyAyKSwgTWF0aC5mbG9vcih0aGlzLmggLyAyKSwgdGhpcy5jb2xvci5pbm5lcik7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tCcmlja10nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCcmljaztcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIFB5cmFtaWREaW1lbnNpb24sIHA7XG5QeXJhbWlkRGltZW5zaW9uID0gZnVuY3Rpb24gKGF4aXMsIHRhbGwpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoYXhpcywgdGFsbCk7XG59O1xucCA9IFB5cmFtaWREaW1lbnNpb24ucHJvdG90eXBlID0gbmV3IEFic3RyYWN0RGltZW5zaW9uKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoYXhpcywgdGFsbCkge1xuICAgIHRoaXMueEF4aXMgPSBheGlzIHx8IDMwO1xuICAgIHRoaXMueUF4aXMgPSBheGlzIHx8IDMwO1xuICAgIHRoaXMudGFsbCA9IHRhbGwgfHwgZmFsc2U7XG5cbiAgICBpZiAodGhpcy54QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdheGlzIG11c3QgYmUgZXZlbiBudW1iZXInKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy54QXhpcyA8PSA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tQeXJhbWlkRGltZW5zaW9uXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFB5cmFtaWREaW1lbnNpb247XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWJzdHJhY3RDb2xvciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RDb2xvcicpO1xudmFyIENvbG9yR2VvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL0NvbG9yR2VvbScpO1xuXG52YXIgUHlyYW1pZENvbG9yLCBwO1xuUHlyYW1pZENvbG9yID0gZnVuY3Rpb24gKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShib3JkZXIsIGJvcmRlckhpZ2hsaWdodCwgbGVmdCwgcmlnaHQpO1xufTtcbnAgPSBQeXJhbWlkQ29sb3IucHJvdG90eXBlID0gbmV3IEFic3RyYWN0Q29sb3IoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAuQlJJR0hUTkVTU19HQUlOID0gLTIwO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGJvcmRlciwgYm9yZGVySGlnaGxpZ2h0LCBsZWZ0LCByaWdodCkge1xuICAgIHRoaXMuYm9yZGVyID0gQ29sb3JHZW9tLmdldDMyKGJvcmRlciA9PT0gdW5kZWZpbmVkID8gMHg5NDk2OTggOiBib3JkZXIpO1xuICAgIHRoaXMuYm9yZGVySGlnaGxpZ2h0ID0gQ29sb3JHZW9tLmdldDMyKGJvcmRlckhpZ2hsaWdodCA9PT0gdW5kZWZpbmVkID8gMHhGRkZGRkYgOiBib3JkZXJIaWdobGlnaHQpO1xuICAgIHRoaXMubGVmdCA9IENvbG9yR2VvbS5nZXQzMihsZWZ0ID09PSB1bmRlZmluZWQgPyAweEU2RThFOSA6IGxlZnQpO1xuICAgIHRoaXMucmlnaHQgPSBDb2xvckdlb20uZ2V0MzIocmlnaHQgPT09IHVuZGVmaW5lZCA/IDB4RUVFRkYwIDogcmlnaHQpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC5nZXRCeVJpZ2h0Q29sb3IgPSBmdW5jdGlvbiAocmlnaHQpIHtcbiAgICByZXR1cm4gbmV3IFB5cmFtaWRDb2xvcihcbiAgICAgICAgQ29sb3JHZW9tLmFwcGx5QnJpZ2h0bmVzcyhyaWdodCwgdGhpcy5CUklHSFRORVNTX0dBSU4gKiA0KSxcbiAgICAgICAgLy9hcHBseSBoaWdodGxpZ2h0XG4gICAgICAgIENvbG9yR2VvbS5hcHBseUJyaWdodG5lc3MocmlnaHQsIDAsIHRydWUpLFxuICAgICAgICBDb2xvckdlb20uYXBwbHlCcmlnaHRuZXNzKHJpZ2h0LCB0aGlzLkJSSUdIVE5FU1NfR0FJTiksXG4gICAgICAgIHJpZ2h0XG4gICAgKTtcbn07XG5cbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbUHlyYW1pZENvbG9yXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFB5cmFtaWRDb2xvcjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIExpbmVYRGltZW5zaW9uLCBwO1xuTGluZVhEaW1lbnNpb24gPSBmdW5jdGlvbiAoYXhpcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShheGlzKTtcbn07XG5wID0gTGluZVhEaW1lbnNpb24ucHJvdG90eXBlID0gbmV3IEFic3RyYWN0RGltZW5zaW9uKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoeEF4aXMpIHtcbiAgICB0aGlzLnhBeGlzID0geEF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy54QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd4QXhpcyBtdXN0IGJlIGV2ZW4gbnVtYmVyJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMueEF4aXMgPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tMaW5lWERpbWVuc2lvbl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5lWERpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIExpbmVZRGltZW5zaW9uLCBwO1xuTGluZVlEaW1lbnNpb24gPSBmdW5jdGlvbiAoYXhpcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShheGlzKTtcbn07XG5wID0gTGluZVlEaW1lbnNpb24ucHJvdG90eXBlID0gbmV3IEFic3RyYWN0RGltZW5zaW9uKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoeUF4aXMpIHtcbiAgICB0aGlzLnlBeGlzID0geUF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy55QXhpcyAlIDIgPT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd5QXhpcyBtdXN0IGJlIGV2ZW4gbnVtYmVyJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMueUF4aXMgPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tMaW5lWURpbWVuc2lvbl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5lWURpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBYnN0cmFjdERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vQWJzdHJhY3REaW1lbnNpb24nKTtcblxudmFyIExpbmVaRGltZW5zaW9uLCBwO1xuTGluZVpEaW1lbnNpb24gPSBmdW5jdGlvbiAoYXhpcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShheGlzKTtcbn07XG5wID0gTGluZVpEaW1lbnNpb24ucHJvdG90eXBlID0gbmV3IEFic3RyYWN0RGltZW5zaW9uKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoekF4aXMpIHtcbiAgICB0aGlzLnpBeGlzID0gekF4aXMgfHwgMzA7XG5cbiAgICBpZiAodGhpcy56QXhpcyA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGltZW5zaW9uIGlzIHRvbyBzbWFsbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tMaW5lWkRpbWVuc2lvbl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5lWkRpbWVuc2lvbjtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuLypnbG9iYWwgd2luZG93OnRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBvYmVsaXNrXG4gKiovXG52YXIgb2JlbGlzayA9IHt9O1xuXG5vYmVsaXNrLkN1YmUgPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvQ3ViZScpO1xub2JlbGlzay5CcmljayA9IHJlcXVpcmUoJy4vcHJpbWl0aXZlcy9CcmljaycpO1xub2JlbGlzay5QeXJhbWlkID0gcmVxdWlyZSgnLi9wcmltaXRpdmVzL1B5cmFtaWQnKTtcbm9iZWxpc2suTGluZVggPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvTGluZVgnKTtcbm9iZWxpc2suTGluZVkgPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvTGluZVknKTtcbm9iZWxpc2suTGluZVogPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvTGluZVonKTtcbm9iZWxpc2suU2lkZVggPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvU2lkZVgnKTtcbm9iZWxpc2suU2lkZVkgPSByZXF1aXJlKCcuL3ByaW1pdGl2ZXMvU2lkZVknKTtcbm9iZWxpc2suU2xvcGVFYXN0ID0gcmVxdWlyZSgnLi9wcmltaXRpdmVzL1Nsb3BlRWFzdCcpO1xub2JlbGlzay5TbG9wZU5vcnRoID0gcmVxdWlyZSgnLi9wcmltaXRpdmVzL1Nsb3BlTm9ydGgnKTtcbm9iZWxpc2suU2xvcGVTb3V0aCA9IHJlcXVpcmUoJy4vcHJpbWl0aXZlcy9TbG9wZVNvdXRoJyk7XG5vYmVsaXNrLlNsb3BlV2VzdCA9IHJlcXVpcmUoJy4vcHJpbWl0aXZlcy9TbG9wZVdlc3QnKTtcblxub2JlbGlzay5Db2xvclBhdHRlcm4gPSByZXF1aXJlKCcuL3V0aWxzL0NvbG9yUGF0dGVybicpO1xub2JlbGlzay5Db2xvckdlb20gPSByZXF1aXJlKCcuL3V0aWxzL0NvbG9yR2VvbScpO1xub2JlbGlzay5DYW52YXNNYW5hZ2VyID0gcmVxdWlyZSgnLi91dGlscy9DYW52YXNNYW5hZ2VyJyk7XG5vYmVsaXNrLkNhbnZhc1Rvb2wgPSByZXF1aXJlKCcuL3V0aWxzL0NhbnZhc1Rvb2wnKTtcblxub2JlbGlzay5NYXRyaXggPSByZXF1aXJlKCcuL2dlb20vTWF0cml4Jyk7XG5vYmVsaXNrLlBvaW50ID0gcmVxdWlyZSgnLi9nZW9tL1BvaW50Jyk7XG5vYmVsaXNrLlBvaW50M0QgPSByZXF1aXJlKCcuL2dlb20vUG9pbnQzRCcpO1xuXG5vYmVsaXNrLlBpeGVsVmlldyA9IHJlcXVpcmUoJy4vZGlzcGxheS9QaXhlbFZpZXcnKTtcbm9iZWxpc2suUGl4ZWxPYmplY3QgPSByZXF1aXJlKCcuL2Rpc3BsYXkvUGl4ZWxPYmplY3QnKTtcbm9iZWxpc2suQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG5cbm9iZWxpc2suQnJpY2tEaW1lbnNpb24gPSByZXF1aXJlKCcuL2RpbWVuc2lvbnMvQnJpY2tEaW1lbnNpb24nKTtcbm9iZWxpc2suQ3ViZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9DdWJlRGltZW5zaW9uJyk7XG5vYmVsaXNrLlB5cmFtaWREaW1lbnNpb24gPSByZXF1aXJlKCcuL2RpbWVuc2lvbnMvUHlyYW1pZERpbWVuc2lvbicpO1xub2JlbGlzay5MaW5lWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9MaW5lWERpbWVuc2lvbicpO1xub2JlbGlzay5MaW5lWURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9MaW5lWURpbWVuc2lvbicpO1xub2JlbGlzay5MaW5lWkRpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9MaW5lWkRpbWVuc2lvbicpO1xub2JlbGlzay5TaWRlWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9TaWRlWERpbWVuc2lvbicpO1xub2JlbGlzay5TaWRlWURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9TaWRlWURpbWVuc2lvbicpO1xub2JlbGlzay5TbG9wZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4vZGltZW5zaW9ucy9TbG9wZURpbWVuc2lvbicpO1xuXG5vYmVsaXNrLkxpbmVDb2xvciA9IHJlcXVpcmUoJy4vY29sb3JzL0xpbmVDb2xvcicpO1xub2JlbGlzay5DdWJlQ29sb3IgPSByZXF1aXJlKCcuL2NvbG9ycy9DdWJlQ29sb3InKTtcbm9iZWxpc2suUHlyYW1pZENvbG9yID0gcmVxdWlyZSgnLi9jb2xvcnMvUHlyYW1pZENvbG9yJyk7XG5vYmVsaXNrLlNpZGVDb2xvciA9IHJlcXVpcmUoJy4vY29sb3JzL1NpZGVDb2xvcicpO1xub2JlbGlzay5TbG9wZUNvbG9yID0gcmVxdWlyZSgnLi9jb2xvcnMvU2xvcGVDb2xvcicpO1xuXG53aW5kb3cub2JlbGlzayA9IG9iZWxpc2s7XG5cbm1vZHVsZS5leHBvcnRzID0gb2JlbGlzaztcblxuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEN1YmVEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL0N1YmVEaW1lbnNpb24nKTtcbnZhciBCcmlja0RpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvQnJpY2tEaW1lbnNpb24nKTtcbnZhciBTaWRlWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVhEaW1lbnNpb24nKTtcbnZhciBTaWRlWURpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVlEaW1lbnNpb24nKTtcbnZhciBDdWJlQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvQ3ViZUNvbG9yJyk7XG52YXIgU2lkZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1NpZGVDb2xvcicpO1xudmFyIE1hdHJpeCA9IHJlcXVpcmUoJy4uL2dlb20vTWF0cml4Jyk7XG52YXIgUGl4ZWxPYmplY3QgPSByZXF1aXJlKCcuLi9kaXNwbGF5L1BpeGVsT2JqZWN0Jyk7XG52YXIgQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvQml0bWFwRGF0YScpO1xudmFyIEFic3RyYWN0UHJpbWl0aXZlID0gcmVxdWlyZSgnLi9BYnN0cmFjdFByaW1pdGl2ZScpO1xudmFyIEJyaWNrID0gcmVxdWlyZSgnLi9CcmljaycpO1xudmFyIFNpZGVYID0gcmVxdWlyZSgnLi9TaWRlWCcpO1xudmFyIFNpZGVZID0gcmVxdWlyZSgnLi9TaWRlWScpO1xuXG52YXIgQ3ViZSwgcDtcbkN1YmUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG59O1xucCA9IEN1YmUucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuYm9yZGVyID0gYm9yZGVyIHx8IGJvcmRlciA9PT0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgQ3ViZURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IEN1YmVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSB0aGlzLmRpbWVuc2lvbi56QXhpcyArICh0aGlzLmRpbWVuc2lvbi54QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzKSAvIDI7XG5cbiAgICAvLyAyMi42IGRlZ3JlZXMgaW1wbGVtZW50YXRpb25cbiAgICB0aGlzLncgLT0gMjtcbiAgICB0aGlzLmggLT0gMTtcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLXRoaXMuZGltZW5zaW9uLnlBeGlzICsgMjtcbiAgICB0aGlzLm1hdHJpeC50eSA9IC10aGlzLmRpbWVuc2lvbi56QXhpcztcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xucC5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJyaWNrLCBzaWRlWCwgc2lkZVksIHBvQnJpY2ssIHBvWCwgcG9ZLCBjdHgsIGJtZCwgb2Zmc2V0WCwgb2Zmc2V0WSxcbiAgICAgICAgaSwgaiwgaztcbiAgICAvLyBob3Jpem9udGFsIGxheWVyXG4gICAgYnJpY2sgPSBuZXcgQnJpY2soXG4gICAgICAgIG5ldyBCcmlja0RpbWVuc2lvbih0aGlzLmRpbWVuc2lvbi54QXhpcywgdGhpcy5kaW1lbnNpb24ueUF4aXMpLFxuICAgICAgICBuZXcgU2lkZUNvbG9yKHRoaXMuY29sb3IuYm9yZGVyLCB0aGlzLmNvbG9yLmhvcml6b250YWwpLFxuICAgICAgICB0aGlzLmJvcmRlclxuICAgICk7XG5cbiAgICAvLyBsZWZ0IHNpZGVcbiAgICBzaWRlWCA9IG5ldyBTaWRlWChcbiAgICAgICAgbmV3IFNpZGVYRGltZW5zaW9uKHRoaXMuZGltZW5zaW9uLnhBeGlzLCB0aGlzLmRpbWVuc2lvbi56QXhpcyksXG4gICAgICAgIG5ldyBTaWRlQ29sb3IodGhpcy5jb2xvci5ib3JkZXIsIHRoaXMuY29sb3IubGVmdCksXG4gICAgICAgIHRoaXMuYm9yZGVyXG4gICAgKTtcblxuICAgIC8vIHJpZ2h0IHNpZGVcbiAgICBzaWRlWSA9IG5ldyBTaWRlWShcbiAgICAgICAgbmV3IFNpZGVZRGltZW5zaW9uKHRoaXMuZGltZW5zaW9uLnlBeGlzLCB0aGlzLmRpbWVuc2lvbi56QXhpcyksXG4gICAgICAgIG5ldyBTaWRlQ29sb3IodGhpcy5jb2xvci5ib3JkZXIsIHRoaXMuY29sb3IucmlnaHQpLFxuICAgICAgICB0aGlzLmJvcmRlclxuICAgICk7XG5cbiAgICBwb0JyaWNrID0gbmV3IFBpeGVsT2JqZWN0KGJyaWNrKTtcbiAgICBwb1ggPSBuZXcgUGl4ZWxPYmplY3Qoc2lkZVgpO1xuICAgIHBvWSA9IG5ldyBQaXhlbE9iamVjdChzaWRlWSk7XG5cbiAgICBjdHggPSB0aGlzLmJpdG1hcERhdGEuY29udGV4dDtcbiAgICBjdHguZHJhd0ltYWdlKHBvQnJpY2suY2FudmFzLCBwb0JyaWNrLnggKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDIsIHBvQnJpY2sueSk7XG4gICAgY3R4LmRyYXdJbWFnZShwb1guY2FudmFzLCBwb1gueCwgcG9YLnkgKyB0aGlzLmRpbWVuc2lvbi56QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzIC8gMiAtIDEpO1xuICAgIGN0eC5kcmF3SW1hZ2UocG9ZLmNhbnZhcywgcG9ZLnggKyB0aGlzLncgLSAyLCBwb1gueSArIHRoaXMuZGltZW5zaW9uLnpBeGlzICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLyAyIC0gMSk7XG5cbiAgICAvLyBoaWdobGlnaHQgJiBoaWdobGlnaHQgZml4XG4gICAgYm1kID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgpO1xuXG4gICAgaWYgKHRoaXMuYm9yZGVyKSB7XG4gICAgICAgIG9mZnNldFggPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDI7XG4gICAgICAgIG9mZnNldFkgPSAodGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcykgLyAyIC0gMjtcblxuICAgICAgICAvL3RoZSAycHggaW4gYm91bmRpbmcgd2l0aG91dCBoaWdodGxpZ2h0XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDI7IGkgKz0gMSkge1xuICAgICAgICAgICAgYm1kLnNldFBpeGVsKG9mZnNldFggKyAxIC0gaSwgb2Zmc2V0WSAtIE1hdGguZmxvb3IoaSAvIDIpLCB0aGlzLmNvbG9yLmJvcmRlckhpZ2hsaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RoZSAycHggaW4gYm91bmRpbmcgd2l0aG91dCBoaWdodGxpZ2h0XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDI7IGogKz0gMSkge1xuICAgICAgICAgICAgYm1kLnNldFBpeGVsKG9mZnNldFggKyBqLCBvZmZzZXRZIC0gTWF0aC5mbG9vcihqIC8gMiksIHRoaXMuY29sb3IuYm9yZGVySGlnaGxpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoayA9IDA7IGsgPCB0aGlzLmRpbWVuc2lvbi56QXhpczsgayArPSAxKSB7XG4gICAgICAgICAgICBibWQuc2V0UGl4ZWwob2Zmc2V0WCwgb2Zmc2V0WSArIGssIHRoaXMuY29sb3IuYm9yZGVySGlnaGxpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi56QXhpczsgaSArPSAxKSB7XG4gICAgICAgICAgICBibWQuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyLCAodGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcykgLyAyIC0gMSArIGksIHRoaXMuY29sb3IubGVmdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYm1kLmNvbnRleHQucHV0SW1hZ2VEYXRhKGJtZC5pbWFnZURhdGEsIDAsIDApO1xuICAgIGN0eC5kcmF3SW1hZ2UoYm1kLmNhbnZhcywgMCwgMCk7XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tDdWJlXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEN1YmU7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHlyYW1pZERpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvUHlyYW1pZERpbWVuc2lvbicpO1xudmFyIFB5cmFtaWRDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9QeXJhbWlkQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcblxudmFyIFB5cmFtaWQsIHA7XG5QeXJhbWlkID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBQeXJhbWlkLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdFByaW1pdGl2ZSgpO1xuXG4vLyBwcml2YXRlIHByb3BlcnRpZXNcbnAuaFNpemUgPSBudWxsO1xucC5oT2Zmc2V0ID0gbnVsbDtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBQeXJhbWlkRGltZW5zaW9uKCkgOiBkaW1lbnNpb247XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBuZXcgUHlyYW1pZENvbG9yKCkgOiBjb2xvcjtcblxuICAgIHRoaXMuaFNpemUgPSB0aGlzLmRpbWVuc2lvbi50YWxsID8gdGhpcy5kaW1lbnNpb24ueEF4aXMgKiAyIDogdGhpcy5kaW1lbnNpb24ueEF4aXM7XG4gICAgdGhpcy5oT2Zmc2V0ID0gdGhpcy5kaW1lbnNpb24udGFsbCA/IC0zIDogLTI7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSB0aGlzLmhTaXplICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLyAyO1xuXG4gICAgLy8gMjIuNiBkZWdyZWVzIGltcGxlbWVudGF0aW9uXG4gICAgdGhpcy53IC09IDI7XG4gICAgdGhpcy5oICs9IHRoaXMuaE9mZnNldDtcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLXRoaXMuZGltZW5zaW9uLnhBeGlzICsgMjtcbiAgICB0aGlzLm1hdHJpeC50eSA9IC10aGlzLmhTaXplIC8gMiArIDIgLSAodGhpcy5kaW1lbnNpb24udGFsbCA/IHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiA6IDEpO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbG9yQm9yZGVyTGVmdCwgY29sb3JCb3JkZXJSaWdodCwgY29sb3JCb3JkZXJIaWdobGlnaHQsXG4gICAgICAgIGksIGosIGssIGwxLCBtMSwgbDIsIG0yO1xuXG4gICAgY29sb3JCb3JkZXJMZWZ0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IubGVmdDtcbiAgICBjb2xvckJvcmRlclJpZ2h0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IucmlnaHQ7XG5cbiAgICBjb2xvckJvcmRlckhpZ2hsaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXJIaWdobGlnaHQgOiBjb2xvckJvcmRlckxlZnQ7XG5cbiAgICAvL3ogYXhpcyB8fCBoaWdodGxpZ2h0XG4gICAgZm9yIChrID0gMDsgayA8IHRoaXMuaFNpemUgKyB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDIgLSA0OyBrICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgayArIDMgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVySGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChpLCB0aGlzLmhTaXplICsgTWF0aC5mbG9vcihpIC8gMikgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgfVxuXG4gICAgLy95IGF4aXNcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5kaW1lbnNpb24ueEF4aXM7IGogKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoaiArIHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgdGhpcy5oU2l6ZSArIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiAtIE1hdGguZmxvb3IoaiAvIDIpIC0gMSArIHRoaXMuaE9mZnNldCwgY29sb3JCb3JkZXJSaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRpbWVuc2lvbi50YWxsKSB7XG4gICAgICAgIC8vbGVmdCBlZGdlXG4gICAgICAgIGZvciAobDEgPSAwOyBsMSA8IHRoaXMuaFNpemU7IGwxICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChsMSwgdGhpcy5oU2l6ZSAtIGwxICsgdGhpcy5oT2Zmc2V0LCBjb2xvckJvcmRlckxlZnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9yaWdodCBlZGdlXG4gICAgICAgIGZvciAobTEgPSAwOyBtMSA8IHRoaXMuaFNpemU7IG0xICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChtMSArIHRoaXMuaFNpemUgLSAyLCBtMSArIDEgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy9sZWZ0IGVkZ2VcbiAgICAgICAgZm9yIChsMiA9IDA7IGwyIDwgdGhpcy5oU2l6ZSAtIDI7IGwyICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChNYXRoLmZsb29yKGwyIC8gMiksIHRoaXMuaFNpemUgLSBsMiArIHRoaXMuaE9mZnNldCwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vcmlnaHQgZWRnZVxuICAgICAgICBmb3IgKG0yID0gMjsgbTIgPCB0aGlzLmhTaXplOyBtMiArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoTWF0aC5mbG9vcihtMiAvIDIpICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyLCBtMiArIDEgKyB0aGlzLmhPZmZzZXQsIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmJvcmRlcikge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyLCB0aGlzLmhTaXplICsgdGhpcy5kaW1lbnNpb24ueEF4aXMgLyAyIC0gMSArIHRoaXMuaE9mZnNldCwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvL2Zsb29kZmlsbFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxLCB0aGlzLmhTaXplICsgTWF0aC5mbG9vcigodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxKSAvIDIpICsgdGhpcy5oT2Zmc2V0IC0gMSwgdGhpcy5jb2xvci5yaWdodCk7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmZsb29kRmlsbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDMsIHRoaXMuaFNpemUgKyBNYXRoLmZsb29yKCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDEpIC8gMikgKyB0aGlzLmhPZmZzZXQgLSAyLCB0aGlzLmNvbG9yLmxlZnQpO1xufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbUHlyYW1pZF0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQeXJhbWlkO1xuIiwiLypqc2xpbnQgbm9kZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmVYRGltZW5zaW9uID0gcmVxdWlyZSgnLi4vZGltZW5zaW9ucy9MaW5lWERpbWVuc2lvbicpO1xudmFyIExpbmVDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9MaW5lQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcblxudmFyIExpbmVYLCBwO1xuTGluZVggPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gTGluZVgucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIHB1YmxpYyBwcm9wZXJ0aWVzXG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdFJlbmRlcihkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgTGluZVhEaW1lbnNpb24oKSA6IGRpbWVuc2lvbjtcbiAgICB0aGlzLmNvbG9yID0gY29sb3IgPT09IHVuZGVmaW5lZCA/IG5ldyBMaW5lQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzO1xuICAgIHRoaXMuaCA9IHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMjtcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gMDtcbiAgICB0aGlzLm1hdHJpeC50eSA9IDA7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcblxucC5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YS5jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLmJpdG1hcERhdGEuaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuYml0bWFwRGF0YS5jYW52YXM7XG59O1xuXG5wLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4T2Zmc2V0Qm9yZGVyLCB5T2Zmc2V0Qm9yZGVyLCBpLCBib3JkZXJDb2xvcjtcblxuICAgIHhPZmZzZXRCb3JkZXIgPSAwO1xuICAgIHlPZmZzZXRCb3JkZXIgPSAwO1xuICAgIGJvcmRlckNvbG9yID0gdGhpcy5jb2xvci5ib3JkZXI7XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh4T2Zmc2V0Qm9yZGVyICsgaSwgeU9mZnNldEJvcmRlciArIE1hdGguZmxvb3IoaSAvIDIpLCBib3JkZXJDb2xvcik7XG4gICAgfVxufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbTGluZVhdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZVg7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGluZVlEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL0xpbmVZRGltZW5zaW9uJyk7XG52YXIgTGluZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL0xpbmVDb2xvcicpO1xudmFyIE1hdHJpeCA9IHJlcXVpcmUoJy4uL2dlb20vTWF0cml4Jyk7XG52YXIgQml0bWFwRGF0YSA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvQml0bWFwRGF0YScpO1xudmFyIEFic3RyYWN0UHJpbWl0aXZlID0gcmVxdWlyZSgnLi9BYnN0cmFjdFByaW1pdGl2ZScpO1xuXG52YXIgTGluZVksIHA7XG5MaW5lWSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBMaW5lWS5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpO1xuICAgIHRoaXMuaW5pdFJlY3RhbmdsZSgpO1xuICAgIHRoaXMuaW5pdEJpdG1hcERhdGEoKTtcbiAgICB0aGlzLmJ1aWxkKCk7XG4gICAgdGhpcy5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHByaXZhdGUgbWV0aG9kXG5wLmluaXRSZW5kZXIgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBMaW5lWURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IExpbmVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAtdGhpcy5kaW1lbnNpb24ueUF4aXMgKyAyO1xuICAgIHRoaXMubWF0cml4LnR5ID0gMDtcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xuXG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHhPZmZzZXRCb3JkZXIsIHlPZmZzZXRCb3JkZXIsIGksIGJvcmRlckNvbG9yO1xuXG4gICAgeE9mZnNldEJvcmRlciA9IHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMTtcbiAgICB5T2Zmc2V0Qm9yZGVyID0gMDtcbiAgICBib3JkZXJDb2xvciA9IHRoaXMuY29sb3IuYm9yZGVyO1xuXG4gICAgLy95IGF4aXNcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGkgKz0gMSkge1xuICAgICAgICBjb25zb2xlLmxvZyhpKTtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRCb3JkZXIgLSBpLCB5T2Zmc2V0Qm9yZGVyICsgTWF0aC5mbG9vcihpIC8gMiksIGJvcmRlckNvbG9yKTtcbiAgICB9XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tMaW5lWV0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5lWTtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMaW5lWkRpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvTGluZVpEaW1lbnNpb24nKTtcbnZhciBMaW5lQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvTGluZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG5cbnZhciBMaW5lWiwgcDtcbkxpbmVaID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcyk7XG59O1xucCA9IExpbmVaLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdFByaW1pdGl2ZSgpO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy51c2VEZWZhdWx0Q2FudmFzID0gdXNlRGVmYXVsdENhbnZhcyB8fCBmYWxzZTtcbiAgICB0aGlzLmRpbWVuc2lvbiA9IGRpbWVuc2lvbiA9PT0gdW5kZWZpbmVkID8gbmV3IExpbmVaRGltZW5zaW9uKCkgOiBkaW1lbnNpb247XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBuZXcgTGluZUNvbG9yKCkgOiBjb2xvcjtcbn07XG5cbnAuaW5pdFJlY3RhbmdsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLncgPSAxO1xuICAgIHRoaXMuaCA9IHRoaXMuZGltZW5zaW9uLnpBeGlzO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAwO1xuICAgIHRoaXMubWF0cml4LnR5ID0gLXRoaXMuZGltZW5zaW9uLnpBeGlzICsgMTtcbn07XG5cbnAuaW5pdEJpdG1hcERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgsIHRoaXMudXNlRGVmYXVsdENhbnZhcyk7XG59O1xuXG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHhPZmZzZXRCb3JkZXIsIHlPZmZzZXRCb3JkZXIsIGksIGJvcmRlckNvbG9yO1xuXG4gICAgeE9mZnNldEJvcmRlciA9IDA7XG4gICAgeU9mZnNldEJvcmRlciA9IDA7XG4gICAgYm9yZGVyQ29sb3IgPSB0aGlzLmNvbG9yLmJvcmRlcjtcblxuICAgIC8veSBheGlzXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9uLnpBeGlzOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHhPZmZzZXRCb3JkZXIsIHlPZmZzZXRCb3JkZXIgKyBpLCBib3JkZXJDb2xvcik7XG4gICAgfVxufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbTGluZVpdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZVo7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2xvcGVEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL1Nsb3BlRGltZW5zaW9uJyk7XG52YXIgU2xvcGVDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9TbG9wZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG5cbnZhciBTbG9wZUVhc3QsIHA7XG5TbG9wZUVhc3QgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG59O1xucCA9IFNsb3BlRWFzdC5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBTbG9wZURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IFNsb3BlQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzICsgdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKiAyICsgdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyO1xuXG4gICAgLy8gMjIuNiBkZWdyZWVzIGltcGxlbWVudGF0aW9uXG4gICAgdGhpcy53IC09IDI7XG4gICAgdGhpcy5oIC09IDM7XG5cbiAgICAvLyB0aGUgbWF0cml4IG9mZnNldCBiZXR3ZWVuIHRoZSBiaXRtYXAgYW5kIHRoZSAzZCBwaXhlbCBjb29yZGluYXRlIFpFUk8gcG9pbnRcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeC50eCA9IC0odGhpcy5kaW1lbnNpb24ueUF4aXMgLSAyKTtcbiAgICB0aGlzLm1hdHJpeC50eSA9IC0odGhpcy5kaW1lbnNpb24ueEF4aXMgKiAzIC8gMiAtIDIpO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmNvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuYml0bWFwRGF0YS5pbWFnZURhdGEsIDAsIDApO1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5iaXRtYXBEYXRhLmNhbnZhcztcbn07XG5cbnAuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbG9yQm9yZGVyTGVmdCwgY29sb3JCb3JkZXJSaWdodCxcbiAgICAgICAgaSwgaiwgaywgbSwgbjtcblxuICAgIGNvbG9yQm9yZGVyTGVmdCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLmxlZnQ7XG4gICAgY29sb3JCb3JkZXJSaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLnJpZ2h0U2xvcGU7XG5cbiAgICAvLyB5IGF4aXNcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGogKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoaiwgdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyIC0gTWF0aC5mbG9vcihqIC8gMikgLSAxLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKGogKyB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIsIHRoaXMuaCAtIE1hdGguZmxvb3IoaiAvIDIpIC0gMSwgY29sb3JCb3JkZXJSaWdodCk7XG4gICAgfVxuXG4gICAgLy8geCBheGlzXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9uLnhBeGlzOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKGksIHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiArIE1hdGguZmxvb3IoaSAvIDIpLCBjb2xvckJvcmRlckxlZnQpO1xuICAgIH1cblxuICAgIC8vIHogYXhpc1xuICAgIGZvciAoayA9IHRoaXMuZGltZW5zaW9uLnlBeGlzIC8gMiAtIDE7IGsgPCB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDI7IGsgKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoMCwgaywgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvLyBzbG90XG4gICAgZm9yIChtID0gMDsgbSA8IHRoaXMuZGltZW5zaW9uLnhBeGlzICogMiAtIDI7IG0gKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueUF4aXMgLSAxICsgTWF0aC5mbG9vcihtIC8gMiksIG0sIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoMSArIE1hdGguZmxvb3IobSAvIDIpLCB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIgKyBtIC0gMSwgY29sb3JCb3JkZXJSaWdodCk7XG4gICAgfVxuXG4gICAgLy8gZmxvb2QgZmlsbFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueUF4aXMgLSAyLCAxLCB0aGlzLmNvbG9yLnJpZ2h0U2xvcGUpO1xuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAzLCB0aGlzLmggLSAzLCB0aGlzLmNvbG9yLmxlZnQpO1xuICAgIC8vIGhhY2sgc2luZ2xlIHBpeGVsXG4gICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgdGhpcy5oIC0gMiwgdGhpcy5jb2xvci5sZWZ0KTtcblxuICAgIC8vIGhpZ2hsaWdodFxuICAgIGlmICh0aGlzLmJvcmRlcikge1xuICAgICAgICBmb3IgKG4gPSAxOyBuIDwgdGhpcy5kaW1lbnNpb24ueEF4aXMgKiAyIC0gMzsgbiArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwoMSArIE1hdGguZmxvb3IobiAvIDIpLCB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIgKyBuIC0gMSwgdGhpcy5jb2xvci5ib3JkZXJIaWdobGlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLy8gcHVibGljIG1ldGhvZHNcbnAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdbU2xvcGVFYXN0XSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3BlRWFzdDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTbG9wZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2xvcGVEaW1lbnNpb24nKTtcbnZhciBTbG9wZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1Nsb3BlQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcbnZhciBTaWRlWCA9IHJlcXVpcmUoJy4vU2lkZVgnKTtcbnZhciBTaWRlWERpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2lkZVhEaW1lbnNpb24nKTtcbnZhciBTaWRlQ29sb3IgPSByZXF1aXJlKCcuLi9jb2xvcnMvU2lkZUNvbG9yJyk7XG52YXIgUGl4ZWxPYmplY3QgPSByZXF1aXJlKCcuLi9kaXNwbGF5L1BpeGVsT2JqZWN0Jyk7XG5cbnZhciBTbG9wZU5vcnRoLCBwO1xuU2xvcGVOb3J0aCA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wID0gU2xvcGVOb3J0aC5wcm90b3R5cGUgPSBuZXcgQWJzdHJhY3RQcmltaXRpdmUoKTtcblxuLy8gY29uc3RydWN0b3JcbnAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLmluaXRSZW5kZXIoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKTtcbiAgICB0aGlzLmluaXRSZWN0YW5nbGUoKTtcbiAgICB0aGlzLmluaXRCaXRtYXBEYXRhKCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICAgIHRoaXMucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwcml2YXRlIG1ldGhvZFxucC5pbml0UmVuZGVyID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMudXNlRGVmYXVsdENhbnZhcyA9IHVzZURlZmF1bHRDYW52YXMgfHwgZmFsc2U7XG4gICAgdGhpcy5ib3JkZXIgPSBib3JkZXIgfHwgYm9yZGVyID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb24gPT09IHVuZGVmaW5lZCA/IG5ldyBTbG9wZURpbWVuc2lvbigpIDogZGltZW5zaW9uO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gbmV3IFNsb3BlQ29sb3IoKSA6IGNvbG9yO1xufTtcblxucC5pbml0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudyA9IHRoaXMuZGltZW5zaW9uLnhBeGlzICsgdGhpcy5kaW1lbnNpb24ueUF4aXM7XG4gICAgdGhpcy5oID0gdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAzIC8gMiArIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMjtcblxuICAgIC8vIDIyLjYgZGVncmVlcyBpbXBsZW1lbnRhdGlvblxuICAgIHRoaXMudyAtPSAyO1xuICAgIHRoaXMuaCAtPSAzO1xuXG4gICAgLy8gdGhlIG1hdHJpeCBvZmZzZXQgYmV0d2VlbiB0aGUgYml0bWFwIGFuZCB0aGUgM2QgcGl4ZWwgY29vcmRpbmF0ZSBaRVJPIHBvaW50XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXgudHggPSAtKHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMik7XG4gICAgdGhpcy5tYXRyaXgudHkgPSAtKHRoaXMuZGltZW5zaW9uLnlBeGlzIC0gMik7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuYml0bWFwRGF0YS5jYW52YXM7XG59O1xuXG5wLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb2xvckJvcmRlckxlZnQsIGNvbG9yQm9yZGVyUmlnaHQsIGNvbG9yQm9yZGVySGlnaGxpZ2h0LFxuICAgICAgICBzaWRlWCwgcG9YLCBjdHgsIGJtZCxcbiAgICAgICAgaSwgaiwgbjtcblxuICAgIGNvbG9yQm9yZGVyTGVmdCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLmxlZnQ7XG4gICAgY29sb3JCb3JkZXJSaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXIgOiB0aGlzLmNvbG9yLnJpZ2h0O1xuICAgIGNvbG9yQm9yZGVySGlnaGxpZ2h0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlckhpZ2hsaWdodCA6IHRoaXMuY29sb3IubGVmdDtcblxuICAgIHNpZGVYID0gbmV3IFNpZGVYKFxuICAgICAgICBuZXcgU2lkZVhEaW1lbnNpb24odGhpcy5kaW1lbnNpb24ueEF4aXMsIHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiksXG4gICAgICAgIG5ldyBTaWRlQ29sb3IoY29sb3JCb3JkZXJMZWZ0LCB0aGlzLmNvbG9yLmxlZnQpXG4gICAgKTtcblxuICAgIHBvWCA9IG5ldyBQaXhlbE9iamVjdChzaWRlWCk7XG5cbiAgICBjdHggPSB0aGlzLmJpdG1hcERhdGEuY29udGV4dDtcbiAgICBjdHguZHJhd0ltYWdlKHBvWC5jYW52YXMsIHBvWC54LCBwb1gueSArIHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMik7XG5cbiAgICBibWQgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCk7XG5cbiAgICAvLyBjbG9zZSB0aGUgcGF0aCBmb3IgZmxvb2RmaWxsXG4gICAgZm9yIChpID0gdGhpcy5oIC0gdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAzIC8gMiArIDI7IGkgPCB0aGlzLmg7IGkgKz0gMSkge1xuICAgICAgICBibWQuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxLCBpLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICB9XG5cbiAgICAvLyB5IGF4aXNcbiAgICBmb3IgKGogPSAxOyBqIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGogKz0gMSkge1xuICAgICAgICBibWQuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgKyBqIC0gMiwgdGhpcy5oIC0gTWF0aC5mbG9vcihqIC8gMikgLSAxLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICAgICAgYm1kLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzICsgaiAtIDIsIHRoaXMuZGltZW5zaW9uLnhBeGlzIC8gMiAtIDIgKyBqLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICB9XG5cbiAgICAvLyBmbG9vZCBmaWxsXG4gICAgYm1kLmZsb29kRmlsbCh0aGlzLmRpbWVuc2lvbi54QXhpcyArIDEsIHRoaXMuaCAtIDMsIHRoaXMuY29sb3IucmlnaHQpO1xuXG4gICAgLy9oaWdobGlnaHRcbiAgICBmb3IgKG4gPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDI7IG4gPCB0aGlzLmggLSAxOyBuICs9IDEpIHtcbiAgICAgICAgYm1kLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMSwgbiwgdGhpcy5jb2xvci5yaWdodCk7XG4gICAgICAgIGJtZC5zZXRQaXhlbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIsIG4sIGNvbG9yQm9yZGVySGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICBibWQuY29udGV4dC5wdXRJbWFnZURhdGEoYm1kLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgY3R4LmRyYXdJbWFnZShibWQuY2FudmFzLCAwLCAwKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1Nsb3BlTm9ydGhdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2xvcGVOb3J0aDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTbG9wZURpbWVuc2lvbiA9IHJlcXVpcmUoJy4uL2RpbWVuc2lvbnMvU2xvcGVEaW1lbnNpb24nKTtcbnZhciBTbG9wZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1Nsb3BlQ29sb3InKTtcbnZhciBNYXRyaXggPSByZXF1aXJlKCcuLi9nZW9tL01hdHJpeCcpO1xudmFyIEJpdG1hcERhdGEgPSByZXF1aXJlKCcuLi9kaXNwbGF5L0JpdG1hcERhdGEnKTtcbnZhciBBYnN0cmFjdFByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vQWJzdHJhY3RQcmltaXRpdmUnKTtcblxudmFyIFNsb3BlU291dGgsIHA7XG5TbG9wZVNvdXRoID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBTbG9wZVNvdXRoLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdFByaW1pdGl2ZSgpO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdFJlbmRlcihkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xuICAgIHRoaXMuaW5pdFJlY3RhbmdsZSgpO1xuICAgIHRoaXMuaW5pdEJpdG1hcERhdGEoKTtcbiAgICB0aGlzLmJ1aWxkKCk7XG4gICAgdGhpcy5yZW5kZXJCaXRtYXBEYXRhRm9yQ2FudmFzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHByaXZhdGUgbWV0aG9kXG5wLmluaXRSZW5kZXIgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy51c2VEZWZhdWx0Q2FudmFzID0gdXNlRGVmYXVsdENhbnZhcyB8fCBmYWxzZTtcbiAgICB0aGlzLmJvcmRlciA9IGJvcmRlciB8fCBib3JkZXIgPT09IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRpbWVuc2lvbiA9IGRpbWVuc2lvbiA9PT0gdW5kZWZpbmVkID8gbmV3IFNsb3BlRGltZW5zaW9uKCkgOiBkaW1lbnNpb247XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBuZXcgU2xvcGVDb2xvcigpIDogY29sb3I7XG59O1xuXG5wLmluaXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53ID0gdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcztcbiAgICB0aGlzLmggPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDIgKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAqIDI7XG5cbiAgICAvLyAyMi42IGRlZ3JlZXMgaW1wbGVtZW50YXRpb25cbiAgICB0aGlzLncgLT0gMjtcbiAgICB0aGlzLmggLT0gMztcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLSh0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDIpO1xuICAgIHRoaXMubWF0cml4LnR5ID0gLSh0aGlzLmRpbWVuc2lvbi55QXhpcyAqIDMgLyAyIC0gMik7XG59O1xuXG5wLmluaXRCaXRtYXBEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMudywgdGhpcy5oLCB0aGlzLnVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAucmVuZGVyQml0bWFwRGF0YUZvckNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEuY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5iaXRtYXBEYXRhLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmJpdG1hcERhdGEuY2FudmFzO1xufTtcblxucC5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29sb3JCb3JkZXJMZWZ0LCBjb2xvckJvcmRlclJpZ2h0LFxuICAgICAgICBpLCBqLCBrLCBtLCBuO1xuXG4gICAgY29sb3JCb3JkZXJMZWZ0ID0gdGhpcy5ib3JkZXIgPyB0aGlzLmNvbG9yLmJvcmRlciA6IHRoaXMuY29sb3IubGVmdFNsb3BlO1xuICAgIGNvbG9yQm9yZGVyUmlnaHQgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5yaWdodDtcblxuICAgIC8vIHggYXhpc1xuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmRpbWVuc2lvbi54QXhpczsgaiArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChqLCB0aGlzLmRpbWVuc2lvbi55QXhpcyAqIDIgKyBNYXRoLmZsb29yKGogLyAyKSAtIDMsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChqICsgdGhpcy5kaW1lbnNpb24ueUF4aXMgLSAyLCBNYXRoLmZsb29yKGogLyAyKSwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvLyB5IGF4aXNcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb24ueUF4aXM7IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyICsgaSwgdGhpcy5oIC0gTWF0aC5mbG9vcihpIC8gMikgLSAxLCBjb2xvckJvcmRlclJpZ2h0KTtcbiAgICB9XG5cbiAgICAvLyB6IGF4aXNcbiAgICBmb3IgKGsgPSB0aGlzLmRpbWVuc2lvbi54QXhpcyAvIDIgLSAxOyBrIDwgdGhpcy5oIC0gdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyOyBrICs9IDEpIHtcbiAgICAgICAgdGhpcy5iaXRtYXBEYXRhLnNldFBpeGVsKHRoaXMudyAtIDEsIGssIGNvbG9yQm9yZGVyUmlnaHQpO1xuICAgIH1cblxuICAgIC8vIHNsb3RcbiAgICBmb3IgKG0gPSAwOyBtIDwgdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAyIC0gMjsgbSArPSAxKSB7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbChNYXRoLmZsb29yKG0gLyAyKSwgdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAyIC0gbSAtIDMsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgICAgIHRoaXMuYml0bWFwRGF0YS5zZXRQaXhlbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIgKyBNYXRoLmZsb29yKG0gLyAyKSwgdGhpcy5oIC0gbSAtIDEsIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgfVxuXG4gICAgLy8gZmxvb2QgZmlsbFxuICAgIHRoaXMuYml0bWFwRGF0YS5mbG9vZEZpbGwodGhpcy5kaW1lbnNpb24ueUF4aXMgLSAxLCAxLCB0aGlzLmNvbG9yLmxlZnRTbG9wZSk7XG4gICAgdGhpcy5iaXRtYXBEYXRhLmZsb29kRmlsbCh0aGlzLmRpbWVuc2lvbi54QXhpcywgdGhpcy5oIC0gMywgdGhpcy5jb2xvci5yaWdodCk7XG4gICAgLy8gaGFjayBzaW5nbGUgcGl4ZWxcbiAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAxLCB0aGlzLmggLSAyLCB0aGlzLmNvbG9yLnJpZ2h0KTtcblxuICAgIC8vIGhpZ2hsaWdodFxuICAgIGlmICh0aGlzLmJvcmRlcikge1xuICAgICAgICBmb3IgKG4gPSAxOyBuIDwgdGhpcy5kaW1lbnNpb24ueUF4aXMgKiAyIC0gMzsgbiArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcERhdGEuc2V0UGl4ZWwodGhpcy5kaW1lbnNpb24ueEF4aXMgLSAyICsgTWF0aC5mbG9vcihuIC8gMiksIHRoaXMuaCAtIG4gLSAxLCB0aGlzLmNvbG9yLmJvcmRlckhpZ2hsaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1tTbG9wZVNvdXRoXSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3BlU291dGg7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2xvcGVEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL1Nsb3BlRGltZW5zaW9uJyk7XG52YXIgU2xvcGVDb2xvciA9IHJlcXVpcmUoJy4uL2NvbG9ycy9TbG9wZUNvbG9yJyk7XG52YXIgTWF0cml4ID0gcmVxdWlyZSgnLi4vZ2VvbS9NYXRyaXgnKTtcbnZhciBCaXRtYXBEYXRhID0gcmVxdWlyZSgnLi4vZGlzcGxheS9CaXRtYXBEYXRhJyk7XG52YXIgQWJzdHJhY3RQcmltaXRpdmUgPSByZXF1aXJlKCcuL0Fic3RyYWN0UHJpbWl0aXZlJyk7XG52YXIgU2lkZVkgPSByZXF1aXJlKCcuL1NpZGVZJyk7XG52YXIgU2lkZVlEaW1lbnNpb24gPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zL1NpZGVZRGltZW5zaW9uJyk7XG52YXIgU2lkZUNvbG9yID0gcmVxdWlyZSgnLi4vY29sb3JzL1NpZGVDb2xvcicpO1xudmFyIFBpeGVsT2JqZWN0ID0gcmVxdWlyZSgnLi4vZGlzcGxheS9QaXhlbE9iamVjdCcpO1xuXG52YXIgU2xvcGVXZXN0LCBwO1xuU2xvcGVXZXN0ID0gZnVuY3Rpb24gKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpO1xufTtcbnAgPSBTbG9wZVdlc3QucHJvdG90eXBlID0gbmV3IEFic3RyYWN0UHJpbWl0aXZlKCk7XG5cbi8vIGNvbnN0cnVjdG9yXG5wLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCBjb2xvciwgYm9yZGVyLCB1c2VEZWZhdWx0Q2FudmFzKSB7XG4gICAgdGhpcy5pbml0UmVuZGVyKGRpbWVuc2lvbiwgY29sb3IsIGJvcmRlciwgdXNlRGVmYXVsdENhbnZhcyk7XG4gICAgdGhpcy5pbml0UmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5pbml0Qml0bWFwRGF0YSgpO1xuICAgIHRoaXMuYnVpbGQoKTtcbiAgICB0aGlzLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMoKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLy8gcHJpdmF0ZSBtZXRob2RcbnAuaW5pdFJlbmRlciA9IGZ1bmN0aW9uIChkaW1lbnNpb24sIGNvbG9yLCBib3JkZXIsIHVzZURlZmF1bHRDYW52YXMpIHtcbiAgICB0aGlzLnVzZURlZmF1bHRDYW52YXMgPSB1c2VEZWZhdWx0Q2FudmFzIHx8IGZhbHNlO1xuICAgIHRoaXMuYm9yZGVyID0gYm9yZGVyIHx8IGJvcmRlciA9PT0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGltZW5zaW9uID0gZGltZW5zaW9uID09PSB1bmRlZmluZWQgPyBuZXcgU2xvcGVEaW1lbnNpb24oKSA6IGRpbWVuc2lvbjtcbiAgICB0aGlzLmNvbG9yID0gY29sb3IgPT09IHVuZGVmaW5lZCA/IG5ldyBTbG9wZUNvbG9yKCkgOiBjb2xvcjtcbn07XG5cbnAuaW5pdFJlY3RhbmdsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLncgPSB0aGlzLmRpbWVuc2lvbi54QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzO1xuICAgIHRoaXMuaCA9IHRoaXMuZGltZW5zaW9uLnhBeGlzICogMyAvIDIgKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDI7XG5cbiAgICAvLyAyMi42IGRlZ3JlZXMgaW1wbGVtZW50YXRpb25cbiAgICB0aGlzLncgLT0gMjtcbiAgICB0aGlzLmggLT0gMztcblxuICAgIC8vIHRoZSBtYXRyaXggb2Zmc2V0IGJldHdlZW4gdGhlIGJpdG1hcCBhbmQgdGhlIDNkIHBpeGVsIGNvb3JkaW5hdGUgWkVSTyBwb2ludFxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4LnR4ID0gLSh0aGlzLmRpbWVuc2lvbi55QXhpcyAtIDIpO1xuICAgIHRoaXMubWF0cml4LnR5ID0gLSh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIpO1xufTtcblxucC5pbml0Qml0bWFwRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLncsIHRoaXMuaCwgdGhpcy51c2VEZWZhdWx0Q2FudmFzKTtcbn07XG5wLnJlbmRlckJpdG1hcERhdGFGb3JDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmJpdG1hcERhdGEuY2FudmFzO1xufTtcblxucC5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29sb3JCb3JkZXJMZWZ0LCBjb2xvckJvcmRlclJpZ2h0LCBjb2xvckJvcmRlckhpZ2hsaWdodCxcbiAgICAgICAgc2lkZVksIHBvWSwgY3R4LCBibWQsXG4gICAgICAgIGksIGosIG47XG5cbiAgICBjb2xvckJvcmRlckxlZnQgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5sZWZ0O1xuICAgIGNvbG9yQm9yZGVyUmlnaHQgPSB0aGlzLmJvcmRlciA/IHRoaXMuY29sb3IuYm9yZGVyIDogdGhpcy5jb2xvci5yaWdodDtcbiAgICBjb2xvckJvcmRlckhpZ2hsaWdodCA9IHRoaXMuYm9yZGVyID8gdGhpcy5jb2xvci5ib3JkZXJIaWdobGlnaHQgOiB0aGlzLmNvbG9yLmxlZnQ7XG5cbiAgICBzaWRlWSA9IG5ldyBTaWRlWShcbiAgICAgICAgbmV3IFNpZGVZRGltZW5zaW9uKHRoaXMuZGltZW5zaW9uLnlBeGlzLCB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIpLFxuICAgICAgICBuZXcgU2lkZUNvbG9yKGNvbG9yQm9yZGVyUmlnaHQsIHRoaXMuY29sb3IucmlnaHQpXG4gICAgKTtcblxuICAgIHBvWSA9IG5ldyBQaXhlbE9iamVjdChzaWRlWSk7XG5cbiAgICBjdHggPSB0aGlzLmJpdG1hcERhdGEuY29udGV4dDtcbiAgICBjdHguZHJhd0ltYWdlKHBvWS5jYW52YXMsIHBvWS54ICsgdGhpcy53IC0gMiwgcG9ZLnkgKyB0aGlzLmggLSB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIpO1xuXG4gICAgYm1kID0gbmV3IEJpdG1hcERhdGEodGhpcy53LCB0aGlzLmgpO1xuXG4gICAgLy8gY2xvc2UgdGhlIHBhdGggZm9yIGZsb29kZmlsbFxuICAgIGZvciAoaSA9IHRoaXMuaCAtIHRoaXMuZGltZW5zaW9uLnhBeGlzICogMyAvIDIgKyAyOyBpIDwgdGhpcy5oOyBpICs9IDEpIHtcbiAgICAgICAgYm1kLnNldFBpeGVsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMiwgaSwgY29sb3JCb3JkZXJMZWZ0KTtcbiAgICB9XG5cbiAgICAvL3ggYXhpc1xuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDE7IGogKz0gMSkge1xuICAgICAgICBibWQuc2V0UGl4ZWwoaiwgdGhpcy5kaW1lbnNpb24ueEF4aXMgKyB0aGlzLmRpbWVuc2lvbi55QXhpcyAvIDIgLSAzICsgTWF0aC5mbG9vcihqIC8gMiksIGNvbG9yQm9yZGVyTGVmdCk7XG4gICAgICAgIGJtZC5zZXRQaXhlbChqLCB0aGlzLmRpbWVuc2lvbi54QXhpcyArIHRoaXMuZGltZW5zaW9uLnlBeGlzIC8gMiAtIDMgLSBqLCBjb2xvckJvcmRlckxlZnQpO1xuICAgIH1cblxuICAgIC8vIGZsb29kIGZpbGxcbiAgICBibWQuZmxvb2RGaWxsKHRoaXMuZGltZW5zaW9uLnhBeGlzIC0gMywgdGhpcy5oIC0gMywgdGhpcy5jb2xvci5sZWZ0KTtcblxuICAgIC8vaGlnaGxpZ2h0XG4gICAgZm9yIChuID0gdGhpcy5kaW1lbnNpb24ueUF4aXMgLyAyOyBuIDwgdGhpcy5oIC0gMTsgbiArPSAxKSB7XG4gICAgICAgIGJtZC5zZXRQaXhlbCh0aGlzLmRpbWVuc2lvbi54QXhpcyAtIDIsIG4sIGNvbG9yQm9yZGVySGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICBibWQuY29udGV4dC5wdXRJbWFnZURhdGEoYm1kLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgY3R4LmRyYXdJbWFnZShibWQuY2FudmFzLCAwLCAwKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1Nsb3BlV2VzdF0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbG9wZVdlc3Q7XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29sb3JQYXR0ZXJuLCBwO1xuXG5Db2xvclBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvclBhdHRlcm4gaXMgYSBzdGF0aWMgQ2xhc3MsIGNhbm5vdCBiZSBpbnN0YW5jZWQuJyk7XG59O1xucCA9IENvbG9yUGF0dGVybjtcblxuLy8gcHVibGljIHByb3BlcnRpZXNcbnAuR1JBU1NfR1JFRU4gPSAweENDRkYwMDtcbnAuWUVMTE9XID0gMHhGRkZGMDA7XG5wLldJTkVfUkVEID0gMHhGRjAwOTk7XG5wLlBJTksgPSAweEZGN0NCRjtcbnAuUFVSUExFID0gMHhDQzAwRkY7XG5wLkJMVUUgPSAweDAwQ0NGRjtcbnAuR1JBWSA9IDB4RUVFRUVFO1xucC5CTEFDSyA9IDB4NjY2NjY2O1xucC5GSU5FX0NPTE9SUyA9XG4gICAgW1xuICAgICAgICBwLkdSQVNTX0dSRUVOLFxuICAgICAgICBwLllFTExPVyxcbiAgICAgICAgcC5XSU5FX1JFRCxcbiAgICAgICAgcC5QSU5LLFxuICAgICAgICBwLlBVUlBMRSxcbiAgICAgICAgcC5CTFVFLFxuICAgICAgICBwLkdSQVksXG4gICAgICAgIHAuQkxBQ0tcbiAgICBdO1xuXG4vLyBwdWJsaWMgbWV0aG9kc1xucC5nZXRSYW5kb21Db21mb3J0YWJsZUNvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwLkZJTkVfQ09MT1JTW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHAuRklORV9DT0xPUlMubGVuZ3RoKV07XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0NvbG9yUGF0dGVybl0nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xvclBhdHRlcm47XG4iLCIvKmpzbGludCBub2RlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FudmFzVG9vbCwgcDtcblxuQ2FudmFzVG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhc1Rvb2wgaXMgYSBzdGF0aWMgQ2xhc3MsIGNhbm5vdCBiZSBpbnN0YW5jZWQuJyk7XG59O1xucCA9IENhbnZhc1Rvb2w7XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLmdldFBpeGVsID0gZnVuY3Rpb24gKGltYWdlRGF0YSwgeCwgeSkge1xuICAgIHZhciBkYXRhLCBpbmRleCwgciwgZywgYjtcblxuICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcbiAgICBpbmRleCA9ICh5ICogaW1hZ2VEYXRhLndpZHRoICsgeCkgKiA0O1xuICAgIHIgPSBkYXRhW2luZGV4XTtcbiAgICBnID0gZGF0YVtpbmRleCArIDFdO1xuICAgIGIgPSBkYXRhW2luZGV4ICsgMl07XG5cbiAgICByZXR1cm4gKChyIDw8IDE2KSB8IChnIDw8IDgpIHwgYik7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW0NhbnZhc1Rvb2xdJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzVG9vbDtcbiIsIi8qanNsaW50IG5vZGU6IHRydWUqL1xuLypnbG9iYWwgalF1ZXJ5OnRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb2ludCA9IHJlcXVpcmUoJy4uL2dlb20vUG9pbnQnKTtcbnZhciBQaXhlbE9iamVjdCA9IHJlcXVpcmUoJy4uL2Rpc3BsYXkvUGl4ZWxPYmplY3QnKTtcblxudmFyIFBpeGVsVmlldywgcDtcblBpeGVsVmlldyA9IGZ1bmN0aW9uIChjYW52YXMsIHBvaW50KSB7XG4gICAgdGhpcy5pbml0aWFsaXplKGNhbnZhcywgcG9pbnQpO1xufTtcbnAgPSBQaXhlbFZpZXcucHJvdG90eXBlO1xuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xucC5jYW52YXMgPSBudWxsO1xucC5jb250ZXh0ID0gbnVsbDtcbnAucG9pbnQgPSBudWxsO1xuXG4vLyBjb25zdHJ1Y3RvclxucC5pbml0aWFsaXplID0gZnVuY3Rpb24gKGNhbnZhcywgcG9pbnQpIHtcbiAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhcyBpcyBub3QgZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGlmIChjYW52YXMgaW5zdGFuY2VvZiBqUXVlcnkpIHtcbiAgICAgICAgICAgIGNhbnZhcyA9IGNhbnZhcy5nZXQoMCk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChpZ25vcmUpIHtcbiAgICB9XG5cbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcblxuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5jb250ZXh0Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udGV4dC5tc0ltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuICAgIHRoaXMucG9pbnQgPSBwb2ludCB8fCBuZXcgUG9pbnQoMCwgMCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHB1YmxpYyBtZXRob2RzXG5wLnJlbmRlck9iamVjdCA9IGZ1bmN0aW9uIChwcmltaXRpdmUsIHBvaW50M0QpIHtcbiAgICB2YXIgcG8gPSBuZXcgUGl4ZWxPYmplY3QocHJpbWl0aXZlLCBwb2ludDNEKTtcbiAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHBvLmNhbnZhcywgdGhpcy5wb2ludC54ICsgcG8ueCwgdGhpcy5wb2ludC55ICsgcG8ueSk7XG59O1xuXG5wLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG59O1xuXG5wLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnW1BpeGVsVmlld10nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaXhlbFZpZXc7XG4iXSwic291cmNlUm9vdCI6IiJ9